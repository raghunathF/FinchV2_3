
FinchBit_V2_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e08  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000014  20000000  00002e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007fc  20000020  00002e30  00020020  2**4
                  ALLOC
  3 .stack        00000404  2000081c  0000362c  00020020  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00053b73  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006997  00000000  00000000  00073c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009920  00000000  00000000  0007a59f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008e0  00000000  00000000  00083ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d28  00000000  00000000  0008479f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000b254  00000000  00000000  000854c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017d75  00000000  00000000  0009071b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072b6d  00000000  00000000  000a8490  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000014b4  00000000  00000000  0011b000  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 0c 00 20 b9 28 00 00 b5 28 00 00 b5 28 00 00      .. .(...(...(..
	...
      2c:	b5 28 00 00 00 00 00 00 00 00 00 00 b5 28 00 00     .(...........(..
      3c:	b5 28 00 00 b5 28 00 00 b5 28 00 00 b5 28 00 00     .(...(...(...(..
      4c:	b5 28 00 00 b5 1f 00 00 b5 28 00 00 ad 01 00 00     .(.......(......
      5c:	00 00 00 00 b5 28 00 00 39 1f 00 00 49 1f 00 00     .....(..9...I...
      6c:	59 1f 00 00 01 17 00 00 59 1a 00 00 69 1a 00 00     Y.......Y...i...
      7c:	ed 00 00 00 b5 28 00 00 b5 28 00 00 b5 28 00 00     .....(...(...(..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000020 	.word	0x20000020
      ac:	00000000 	.word	0x00000000
      b0:	00002e08 	.word	0x00002e08

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000024 	.word	0x20000024
      e0:	00002e08 	.word	0x00002e08
      e4:	00002e08 	.word	0x00002e08
      e8:	00000000 	.word	0x00000000

000000ec <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
      ec:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
      ee:	4b2e      	ldr	r3, [pc, #184]	; (1a8 <ADC_Handler+0xbc>)
      f0:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
      f2:	6823      	ldr	r3, [r4, #0]
      f4:	7e1d      	ldrb	r5, [r3, #24]
      f6:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
      f8:	07ea      	lsls	r2, r5, #31
      fa:	d505      	bpl.n	108 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
      fc:	7ee2      	ldrb	r2, [r4, #27]
      fe:	07d2      	lsls	r2, r2, #31
     100:	d502      	bpl.n	108 <ADC_Handler+0x1c>
     102:	7ea2      	ldrb	r2, [r4, #26]
     104:	07d2      	lsls	r2, r2, #31
     106:	d416      	bmi.n	136 <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
     108:	076b      	lsls	r3, r5, #29
     10a:	d508      	bpl.n	11e <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     10c:	2304      	movs	r3, #4
     10e:	6822      	ldr	r2, [r4, #0]
     110:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     112:	7ee3      	ldrb	r3, [r4, #27]
     114:	079b      	lsls	r3, r3, #30
     116:	d502      	bpl.n	11e <ADC_Handler+0x32>
     118:	7ea3      	ldrb	r3, [r4, #26]
     11a:	079b      	lsls	r3, r3, #30
     11c:	d43c      	bmi.n	198 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
     11e:	07ab      	lsls	r3, r5, #30
     120:	d508      	bpl.n	134 <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     122:	2302      	movs	r3, #2
     124:	6822      	ldr	r2, [r4, #0]
     126:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     128:	7ee3      	ldrb	r3, [r4, #27]
     12a:	075b      	lsls	r3, r3, #29
     12c:	d502      	bpl.n	134 <ADC_Handler+0x48>
     12e:	7ea3      	ldrb	r3, [r4, #26]
     130:	075b      	lsls	r3, r3, #29
     132:	d435      	bmi.n	1a0 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
     134:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     136:	2201      	movs	r2, #1
     138:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     13a:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     13c:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
     13e:	b25b      	sxtb	r3, r3
     140:	2b00      	cmp	r3, #0
     142:	dbfb      	blt.n	13c <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
     144:	6961      	ldr	r1, [r4, #20]
     146:	1c8b      	adds	r3, r1, #2
     148:	6163      	str	r3, [r4, #20]
     14a:	8b53      	ldrh	r3, [r2, #26]
     14c:	b29b      	uxth	r3, r3
     14e:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
     150:	8b23      	ldrh	r3, [r4, #24]
     152:	3b01      	subs	r3, #1
     154:	b29b      	uxth	r3, r3
     156:	8323      	strh	r3, [r4, #24]
     158:	2b00      	cmp	r3, #0
     15a:	d011      	beq.n	180 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
     15c:	7f63      	ldrb	r3, [r4, #29]
     15e:	2b00      	cmp	r3, #0
     160:	d0d2      	beq.n	108 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     162:	6822      	ldr	r2, [r4, #0]
     164:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     166:	b25b      	sxtb	r3, r3
     168:	2b00      	cmp	r3, #0
     16a:	dbfb      	blt.n	164 <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     16c:	7b13      	ldrb	r3, [r2, #12]
     16e:	2102      	movs	r1, #2
     170:	430b      	orrs	r3, r1
     172:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     174:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     176:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     178:	b25b      	sxtb	r3, r3
     17a:	2b00      	cmp	r3, #0
     17c:	dbfb      	blt.n	176 <ADC_Handler+0x8a>
     17e:	e7c3      	b.n	108 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
     180:	7f23      	ldrb	r3, [r4, #28]
     182:	2b05      	cmp	r3, #5
     184:	d1c0      	bne.n	108 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
     186:	2300      	movs	r3, #0
     188:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     18a:	3301      	adds	r3, #1
     18c:	6822      	ldr	r2, [r4, #0]
     18e:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     190:	0020      	movs	r0, r4
     192:	68a3      	ldr	r3, [r4, #8]
     194:	4798      	blx	r3
     196:	e7b7      	b.n	108 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     198:	0020      	movs	r0, r4
     19a:	68e3      	ldr	r3, [r4, #12]
     19c:	4798      	blx	r3
     19e:	e7be      	b.n	11e <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     1a0:	6923      	ldr	r3, [r4, #16]
     1a2:	0020      	movs	r0, r4
     1a4:	4798      	blx	r3
}
     1a6:	e7c5      	b.n	134 <ADC_Handler+0x48>
     1a8:	20000154 	.word	0x20000154

000001ac <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     1ac:	b510      	push	{r4, lr}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     1ae:	4b26      	ldr	r3, [pc, #152]	; (248 <DMAC_Handler+0x9c>)
     1b0:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     1b2:	4926      	ldr	r1, [pc, #152]	; (24c <DMAC_Handler+0xa0>)
     1b4:	8c0b      	ldrh	r3, [r1, #32]
     1b6:	2207      	movs	r2, #7

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     1b8:	4013      	ands	r3, r2
     1ba:	009b      	lsls	r3, r3, #2
     1bc:	4824      	ldr	r0, [pc, #144]	; (250 <DMAC_Handler+0xa4>)
     1be:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     1c0:	7803      	ldrb	r3, [r0, #0]
     1c2:	401a      	ands	r2, r3
     1c4:	233f      	movs	r3, #63	; 0x3f
     1c6:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
     1c8:	330f      	adds	r3, #15
     1ca:	5cca      	ldrb	r2, [r1, r3]
     1cc:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     1ce:	7803      	ldrb	r3, [r0, #0]
     1d0:	011b      	lsls	r3, r3, #4
     1d2:	4920      	ldr	r1, [pc, #128]	; (254 <DMAC_Handler+0xa8>)
     1d4:	18c9      	adds	r1, r1, r3
     1d6:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     1d8:	4c1f      	ldr	r4, [pc, #124]	; (258 <DMAC_Handler+0xac>)
     1da:	18e3      	adds	r3, r4, r3
     1dc:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
     1de:	1acb      	subs	r3, r1, r3
     1e0:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     1e2:	07d3      	lsls	r3, r2, #31
     1e4:	d50f      	bpl.n	206 <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     1e6:	2101      	movs	r1, #1
     1e8:	234e      	movs	r3, #78	; 0x4e
     1ea:	4a18      	ldr	r2, [pc, #96]	; (24c <DMAC_Handler+0xa0>)
     1ec:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     1ee:	3b3e      	subs	r3, #62	; 0x3e
     1f0:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     1f2:	7c03      	ldrb	r3, [r0, #16]
     1f4:	07db      	lsls	r3, r3, #31
     1f6:	d503      	bpl.n	200 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     1f8:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     1fa:	2b00      	cmp	r3, #0
     1fc:	d000      	beq.n	200 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     1fe:	4798      	blx	r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     200:	4b16      	ldr	r3, [pc, #88]	; (25c <DMAC_Handler+0xb0>)
     202:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
     204:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     206:	0793      	lsls	r3, r2, #30
     208:	d50d      	bpl.n	226 <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     20a:	2102      	movs	r1, #2
     20c:	234e      	movs	r3, #78	; 0x4e
     20e:	4a0f      	ldr	r2, [pc, #60]	; (24c <DMAC_Handler+0xa0>)
     210:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
     212:	2300      	movs	r3, #0
     214:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     216:	7c03      	ldrb	r3, [r0, #16]
     218:	079b      	lsls	r3, r3, #30
     21a:	d5f1      	bpl.n	200 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     21c:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     21e:	2b00      	cmp	r3, #0
     220:	d0ee      	beq.n	200 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     222:	4798      	blx	r3
     224:	e7ec      	b.n	200 <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     226:	0753      	lsls	r3, r2, #29
     228:	d5ea      	bpl.n	200 <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     22a:	2104      	movs	r1, #4
     22c:	234e      	movs	r3, #78	; 0x4e
     22e:	4a07      	ldr	r2, [pc, #28]	; (24c <DMAC_Handler+0xa0>)
     230:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
     232:	3b48      	subs	r3, #72	; 0x48
     234:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     236:	7c03      	ldrb	r3, [r0, #16]
     238:	075b      	lsls	r3, r3, #29
     23a:	d5e1      	bpl.n	200 <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     23c:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     23e:	2b00      	cmp	r3, #0
     240:	d0de      	beq.n	200 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     242:	4798      	blx	r3
     244:	e7dc      	b.n	200 <DMAC_Handler+0x54>
     246:	46c0      	nop			; (mov r8, r8)
     248:	000020c9 	.word	0x000020c9
     24c:	41004800 	.word	0x41004800
     250:	2000003c 	.word	0x2000003c
     254:	20000160 	.word	0x20000160
     258:	20000050 	.word	0x20000050
     25c:	00002109 	.word	0x00002109

00000260 <readSensors>:
#include<asf.h>
#include "sensorsControl.h"
#include "ultrasound.h"

void readSensors()
{	
     260:	b510      	push	{r4, lr}
	uint16_t temp =0;
	//readLight();
	temp = getUltrasoundDistance();
     262:	4b04      	ldr	r3, [pc, #16]	; (274 <readSensors+0x14>)
     264:	4798      	blx	r3
	sensor_outputs[0] = (temp & 0xFF00)>>8;
     266:	0a03      	lsrs	r3, r0, #8
     268:	b2db      	uxtb	r3, r3
     26a:	4a03      	ldr	r2, [pc, #12]	; (278 <readSensors+0x18>)
     26c:	7013      	strb	r3, [r2, #0]
	sensor_outputs[1] = temp & 0x00FF;
     26e:	b2c0      	uxtb	r0, r0
     270:	7050      	strb	r0, [r2, #1]
     272:	bd10      	pop	{r4, pc}
     274:	000003cd 	.word	0x000003cd
     278:	200007e0 	.word	0x200007e0

0000027c <new_echo_detection_callback>:
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	port_pin_set_config(ECHO, &config_port_pin);
}

void new_echo_detection_callback(void)
{
     27c:	b510      	push	{r4, lr}
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     27e:	4b0b      	ldr	r3, [pc, #44]	; (2ac <new_echo_detection_callback+0x30>)
     280:	6a1b      	ldr	r3, [r3, #32]
	
	static uint16_t rising_edge = 0;
	//serial_timeout_count = serial_timeout_count + 1;
	
	bool pin_state = port_pin_get_input_level(ECHO);
	if(pin_state)
     282:	065b      	lsls	r3, r3, #25
     284:	d40b      	bmi.n	29e <new_echo_detection_callback+0x22>
	{
		rising_edge = tc_get_count_value(&tc_instance2);
	}
	else
	{
		distance_16b = tc_get_count_value(&tc_instance2) - rising_edge;
     286:	480a      	ldr	r0, [pc, #40]	; (2b0 <new_echo_detection_callback+0x34>)
     288:	4b0a      	ldr	r3, [pc, #40]	; (2b4 <new_echo_detection_callback+0x38>)
     28a:	4798      	blx	r3
     28c:	4b0a      	ldr	r3, [pc, #40]	; (2b8 <new_echo_detection_callback+0x3c>)
     28e:	881b      	ldrh	r3, [r3, #0]
     290:	1ac0      	subs	r0, r0, r3
     292:	4b0a      	ldr	r3, [pc, #40]	; (2bc <new_echo_detection_callback+0x40>)
     294:	6018      	str	r0, [r3, #0]
		readyDistance = true;
     296:	2201      	movs	r2, #1
     298:	4b09      	ldr	r3, [pc, #36]	; (2c0 <new_echo_detection_callback+0x44>)
     29a:	701a      	strb	r2, [r3, #0]
	}
	
}
     29c:	bd10      	pop	{r4, pc}
		rising_edge = tc_get_count_value(&tc_instance2);
     29e:	4804      	ldr	r0, [pc, #16]	; (2b0 <new_echo_detection_callback+0x34>)
     2a0:	4b04      	ldr	r3, [pc, #16]	; (2b4 <new_echo_detection_callback+0x38>)
     2a2:	4798      	blx	r3
     2a4:	4b04      	ldr	r3, [pc, #16]	; (2b8 <new_echo_detection_callback+0x3c>)
     2a6:	8018      	strh	r0, [r3, #0]
     2a8:	e7f8      	b.n	29c <new_echo_detection_callback+0x20>
     2aa:	46c0      	nop			; (mov r8, r8)
     2ac:	41004400 	.word	0x41004400
     2b0:	200001b0 	.word	0x200001b0
     2b4:	00001997 	.word	0x00001997
     2b8:	200000a8 	.word	0x200000a8
     2bc:	200000a0 	.word	0x200000a0
     2c0:	200000a6 	.word	0x200000a6

000002c4 <configure_tc2>:
{
     2c4:	b510      	push	{r4, lr}
     2c6:	b08e      	sub	sp, #56	; 0x38
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     2c8:	aa01      	add	r2, sp, #4
     2ca:	2300      	movs	r3, #0
     2cc:	2100      	movs	r1, #0
     2ce:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     2d0:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     2d2:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     2d4:	2000      	movs	r0, #0
     2d6:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     2d8:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     2da:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     2dc:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     2de:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     2e0:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     2e2:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     2e4:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     2e6:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     2e8:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     2ea:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     2ec:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     2ee:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     2f0:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     2f2:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.clock_source		= GCLK_GENERATOR_3;
     2f4:	3303      	adds	r3, #3
     2f6:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler	= TC_CLOCK_PRESCALER_DIV16; //64
     2f8:	2380      	movs	r3, #128	; 0x80
     2fa:	00db      	lsls	r3, r3, #3
     2fc:	8093      	strh	r3, [r2, #4]
	tc_init(&tc_instance2, TC2, &config_tc);
     2fe:	4c08      	ldr	r4, [pc, #32]	; (320 <configure_tc2+0x5c>)
     300:	4908      	ldr	r1, [pc, #32]	; (324 <configure_tc2+0x60>)
     302:	0020      	movs	r0, r4
     304:	4b08      	ldr	r3, [pc, #32]	; (328 <configure_tc2+0x64>)
     306:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     308:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     30a:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     30c:	b25b      	sxtb	r3, r3
     30e:	2b00      	cmp	r3, #0
     310:	dbfb      	blt.n	30a <configure_tc2+0x46>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     312:	8813      	ldrh	r3, [r2, #0]
     314:	2102      	movs	r1, #2
     316:	430b      	orrs	r3, r1
     318:	8013      	strh	r3, [r2, #0]
}
     31a:	b00e      	add	sp, #56	; 0x38
     31c:	bd10      	pop	{r4, pc}
     31e:	46c0      	nop			; (mov r8, r8)
     320:	200001b0 	.word	0x200001b0
     324:	42001c00 	.word	0x42001c00
     328:	00001735 	.word	0x00001735

0000032c <configure_echo_extint>:
{
     32c:	b510      	push	{r4, lr}
     32e:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
     330:	ac01      	add	r4, sp, #4
     332:	0020      	movs	r0, r4
     334:	4b08      	ldr	r3, [pc, #32]	; (358 <configure_echo_extint+0x2c>)
     336:	4798      	blx	r3
	config_extint_chan.gpio_pin           = US_ECHO_PIN_EIC;
     338:	2306      	movs	r3, #6
     33a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = US_ECHO_PIN_MUX;
     33c:	23c0      	movs	r3, #192	; 0xc0
     33e:	02db      	lsls	r3, r3, #11
     340:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
     342:	2302      	movs	r3, #2
     344:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
     346:	3301      	adds	r3, #1
     348:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(US_ECHO_EIC_LINE, &config_extint_chan);
     34a:	0021      	movs	r1, r4
     34c:	2006      	movs	r0, #6
     34e:	4b03      	ldr	r3, [pc, #12]	; (35c <configure_echo_extint+0x30>)
     350:	4798      	blx	r3
}
     352:	b004      	add	sp, #16
     354:	bd10      	pop	{r4, pc}
     356:	46c0      	nop			; (mov r8, r8)
     358:	0000052d 	.word	0x0000052d
     35c:	00000541 	.word	0x00000541

00000360 <setup_ultrasound>:
{
     360:	b570      	push	{r4, r5, r6, lr}
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     362:	4c06      	ldr	r4, [pc, #24]	; (37c <setup_ultrasound+0x1c>)
     364:	2580      	movs	r5, #128	; 0x80
     366:	61a5      	str	r5, [r4, #24]
	delay_cycles_us(10);
     368:	200a      	movs	r0, #10
     36a:	4b05      	ldr	r3, [pc, #20]	; (380 <setup_ultrasound+0x20>)
     36c:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
     36e:	6165      	str	r5, [r4, #20]
	tc_set_count_value(&tc_instance2, 0);
     370:	2100      	movs	r1, #0
     372:	4804      	ldr	r0, [pc, #16]	; (384 <setup_ultrasound+0x24>)
     374:	4b04      	ldr	r3, [pc, #16]	; (388 <setup_ultrasound+0x28>)
     376:	4798      	blx	r3
}
     378:	bd70      	pop	{r4, r5, r6, pc}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	41004400 	.word	0x41004400
     380:	00002049 	.word	0x00002049
     384:	200001b0 	.word	0x200001b0
     388:	00001965 	.word	0x00001965

0000038c <TC2_OV_callback>:
{
     38c:	b510      	push	{r4, lr}
	setup_ultrasound();
     38e:	4b01      	ldr	r3, [pc, #4]	; (394 <TC2_OV_callback+0x8>)
     390:	4798      	blx	r3
}
     392:	bd10      	pop	{r4, pc}
     394:	00000361 	.word	0x00000361

00000398 <configurePins>:
{
     398:	b570      	push	{r4, r5, r6, lr}
     39a:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
     39c:	ac01      	add	r4, sp, #4
     39e:	2301      	movs	r3, #1
     3a0:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     3a2:	2600      	movs	r6, #0
     3a4:	70a6      	strb	r6, [r4, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     3a6:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(TRIG, &config_port_pin);
     3a8:	0021      	movs	r1, r4
     3aa:	2007      	movs	r0, #7
     3ac:	4d05      	ldr	r5, [pc, #20]	; (3c4 <configurePins+0x2c>)
     3ae:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
     3b0:	2280      	movs	r2, #128	; 0x80
     3b2:	4b05      	ldr	r3, [pc, #20]	; (3c8 <configurePins+0x30>)
     3b4:	615a      	str	r2, [r3, #20]
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
     3b6:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(ECHO, &config_port_pin);
     3b8:	0021      	movs	r1, r4
     3ba:	2006      	movs	r0, #6
     3bc:	47a8      	blx	r5
}
     3be:	b002      	add	sp, #8
     3c0:	bd70      	pop	{r4, r5, r6, pc}
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	000020a1 	.word	0x000020a1
     3c8:	41004400 	.word	0x41004400

000003cc <getUltrasoundDistance>:

uint16_t getUltrasoundDistance()
{
	static uint16_t distance_ultrasound = 0 ;
	if(readyDistance)
     3cc:	4b06      	ldr	r3, [pc, #24]	; (3e8 <getUltrasoundDistance+0x1c>)
     3ce:	781b      	ldrb	r3, [r3, #0]
     3d0:	2b00      	cmp	r3, #0
     3d2:	d006      	beq.n	3e2 <getUltrasoundDistance+0x16>
	{
		readyDistance		= false;
     3d4:	2200      	movs	r2, #0
     3d6:	4b04      	ldr	r3, [pc, #16]	; (3e8 <getUltrasoundDistance+0x1c>)
     3d8:	701a      	strb	r2, [r3, #0]
		distance_ultrasound	= distance_16b;
     3da:	4b04      	ldr	r3, [pc, #16]	; (3ec <getUltrasoundDistance+0x20>)
     3dc:	681a      	ldr	r2, [r3, #0]
     3de:	4b04      	ldr	r3, [pc, #16]	; (3f0 <getUltrasoundDistance+0x24>)
     3e0:	801a      	strh	r2, [r3, #0]
	}
	return distance_ultrasound;
     3e2:	4b03      	ldr	r3, [pc, #12]	; (3f0 <getUltrasoundDistance+0x24>)
     3e4:	8818      	ldrh	r0, [r3, #0]
}
     3e6:	4770      	bx	lr
     3e8:	200000a6 	.word	0x200000a6
     3ec:	200000a0 	.word	0x200000a0
     3f0:	200000a4 	.word	0x200000a4

000003f4 <configure_TC2_callback>:

void configure_TC2_callback()
{
     3f4:	b510      	push	{r4, lr}
	tc_register_callback(&tc_instance2, TC2_OV_callback,TC_CALLBACK_OVERFLOW);
     3f6:	4c0c      	ldr	r4, [pc, #48]	; (428 <STACK_SIZE+0x28>)
     3f8:	2200      	movs	r2, #0
     3fa:	490c      	ldr	r1, [pc, #48]	; (42c <STACK_SIZE+0x2c>)
     3fc:	0020      	movs	r0, r4
     3fe:	4b0c      	ldr	r3, [pc, #48]	; (430 <STACK_SIZE+0x30>)
     400:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     402:	6820      	ldr	r0, [r4, #0]
     404:	4b0b      	ldr	r3, [pc, #44]	; (434 <STACK_SIZE+0x34>)
     406:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     408:	4b0b      	ldr	r3, [pc, #44]	; (438 <STACK_SIZE+0x38>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     40a:	5c1a      	ldrb	r2, [r3, r0]
     40c:	231f      	movs	r3, #31
     40e:	4013      	ands	r3, r2
     410:	2201      	movs	r2, #1
     412:	0011      	movs	r1, r2
     414:	4099      	lsls	r1, r3
     416:	4b09      	ldr	r3, [pc, #36]	; (43c <STACK_SIZE+0x3c>)
     418:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     41a:	7e63      	ldrb	r3, [r4, #25]
     41c:	2101      	movs	r1, #1
     41e:	430b      	orrs	r3, r1
     420:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     422:	6823      	ldr	r3, [r4, #0]
     424:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tc_instance2, TC_CALLBACK_OVERFLOW);
}
     426:	bd10      	pop	{r4, pc}
     428:	200001b0 	.word	0x200001b0
     42c:	0000038d 	.word	0x0000038d
     430:	000019c3 	.word	0x000019c3
     434:	00001711 	.word	0x00001711
     438:	00002d5c 	.word	0x00002d5c
     43c:	e000e100 	.word	0xe000e100

00000440 <configure_ext_callback>:

void configure_ext_callback()
{
     440:	b510      	push	{r4, lr}
	extint_register_callback(new_echo_detection_callback,US_ECHO_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     442:	2200      	movs	r2, #0
     444:	2106      	movs	r1, #6
     446:	4804      	ldr	r0, [pc, #16]	; (458 <configure_ext_callback+0x18>)
     448:	4b04      	ldr	r3, [pc, #16]	; (45c <configure_ext_callback+0x1c>)
     44a:	4798      	blx	r3
	extint_chan_enable_callback(US_ECHO_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     44c:	2100      	movs	r1, #0
     44e:	2006      	movs	r0, #6
     450:	4b03      	ldr	r3, [pc, #12]	; (460 <configure_ext_callback+0x20>)
     452:	4798      	blx	r3
}
     454:	bd10      	pop	{r4, pc}
     456:	46c0      	nop			; (mov r8, r8)
     458:	0000027d 	.word	0x0000027d
     45c:	00001f69 	.word	0x00001f69
     460:	00001f95 	.word	0x00001f95

00000464 <configureModules>:

void configureModules()
{
     464:	b510      	push	{r4, lr}
	configure_tc2();
     466:	4b02      	ldr	r3, [pc, #8]	; (470 <configureModules+0xc>)
     468:	4798      	blx	r3
	configure_echo_extint();
     46a:	4b02      	ldr	r3, [pc, #8]	; (474 <configureModules+0x10>)
     46c:	4798      	blx	r3
}
     46e:	bd10      	pop	{r4, pc}
     470:	000002c5 	.word	0x000002c5
     474:	0000032d 	.word	0x0000032d

00000478 <configureCallbacks>:

void configureCallbacks()
{
     478:	b510      	push	{r4, lr}
	configure_TC2_callback();
     47a:	4b02      	ldr	r3, [pc, #8]	; (484 <configureCallbacks+0xc>)
     47c:	4798      	blx	r3
	configure_ext_callback();
     47e:	4b02      	ldr	r3, [pc, #8]	; (488 <configureCallbacks+0x10>)
     480:	4798      	blx	r3
}
     482:	bd10      	pop	{r4, pc}
     484:	000003f5 	.word	0x000003f5
     488:	00000441 	.word	0x00000441

0000048c <configureUltrasound>:

void configureUltrasound()
{
     48c:	b510      	push	{r4, lr}
	configurePins();
     48e:	4b03      	ldr	r3, [pc, #12]	; (49c <configureUltrasound+0x10>)
     490:	4798      	blx	r3
	configureModules();
     492:	4b03      	ldr	r3, [pc, #12]	; (4a0 <configureUltrasound+0x14>)
     494:	4798      	blx	r3
	configureCallbacks();
     496:	4b03      	ldr	r3, [pc, #12]	; (4a4 <configureUltrasound+0x18>)
     498:	4798      	blx	r3
} 
     49a:	bd10      	pop	{r4, pc}
     49c:	00000399 	.word	0x00000399
     4a0:	00000465 	.word	0x00000465
     4a4:	00000479 	.word	0x00000479

000004a8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     4a8:	4a04      	ldr	r2, [pc, #16]	; (4bc <_extint_enable+0x14>)
     4aa:	7813      	ldrb	r3, [r2, #0]
     4ac:	2102      	movs	r1, #2
     4ae:	430b      	orrs	r3, r1
     4b0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     4b2:	7853      	ldrb	r3, [r2, #1]
     4b4:	b25b      	sxtb	r3, r3
     4b6:	2b00      	cmp	r3, #0
     4b8:	dbfb      	blt.n	4b2 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     4ba:	4770      	bx	lr
     4bc:	40001800 	.word	0x40001800

000004c0 <_system_extint_init>:
{
     4c0:	b500      	push	{lr}
     4c2:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     4c4:	4a12      	ldr	r2, [pc, #72]	; (510 <_system_extint_init+0x50>)
     4c6:	6993      	ldr	r3, [r2, #24]
     4c8:	2140      	movs	r1, #64	; 0x40
     4ca:	430b      	orrs	r3, r1
     4cc:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     4ce:	a901      	add	r1, sp, #4
     4d0:	2300      	movs	r3, #0
     4d2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     4d4:	2005      	movs	r0, #5
     4d6:	4b0f      	ldr	r3, [pc, #60]	; (514 <_system_extint_init+0x54>)
     4d8:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     4da:	2005      	movs	r0, #5
     4dc:	4b0e      	ldr	r3, [pc, #56]	; (518 <_system_extint_init+0x58>)
     4de:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     4e0:	4a0e      	ldr	r2, [pc, #56]	; (51c <_system_extint_init+0x5c>)
     4e2:	7813      	ldrb	r3, [r2, #0]
     4e4:	2101      	movs	r1, #1
     4e6:	430b      	orrs	r3, r1
     4e8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     4ea:	7853      	ldrb	r3, [r2, #1]
     4ec:	b25b      	sxtb	r3, r3
     4ee:	2b00      	cmp	r3, #0
     4f0:	dbfb      	blt.n	4ea <_system_extint_init+0x2a>
     4f2:	4b0b      	ldr	r3, [pc, #44]	; (520 <_system_extint_init+0x60>)
     4f4:	0019      	movs	r1, r3
     4f6:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     4f8:	2200      	movs	r2, #0
     4fa:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     4fc:	4299      	cmp	r1, r3
     4fe:	d1fc      	bne.n	4fa <_system_extint_init+0x3a>
     500:	2210      	movs	r2, #16
     502:	4b08      	ldr	r3, [pc, #32]	; (524 <_system_extint_init+0x64>)
     504:	601a      	str	r2, [r3, #0]
	_extint_enable();
     506:	4b08      	ldr	r3, [pc, #32]	; (528 <_system_extint_init+0x68>)
     508:	4798      	blx	r3
}
     50a:	b003      	add	sp, #12
     50c:	bd00      	pop	{pc}
     50e:	46c0      	nop			; (mov r8, r8)
     510:	40000400 	.word	0x40000400
     514:	0000275d 	.word	0x0000275d
     518:	000026d1 	.word	0x000026d1
     51c:	40001800 	.word	0x40001800
     520:	200001cc 	.word	0x200001cc
     524:	e000e100 	.word	0xe000e100
     528:	000004a9 	.word	0x000004a9

0000052c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     52c:	2300      	movs	r3, #0
     52e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     530:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     532:	2201      	movs	r2, #1
     534:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     536:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     538:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     53a:	3302      	adds	r3, #2
     53c:	72c3      	strb	r3, [r0, #11]
}
     53e:	4770      	bx	lr

00000540 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     540:	b5f0      	push	{r4, r5, r6, r7, lr}
     542:	b083      	sub	sp, #12
     544:	0005      	movs	r5, r0
     546:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     548:	a901      	add	r1, sp, #4
     54a:	2300      	movs	r3, #0
     54c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     54e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     550:	7923      	ldrb	r3, [r4, #4]
     552:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     554:	7a23      	ldrb	r3, [r4, #8]
     556:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     558:	7820      	ldrb	r0, [r4, #0]
     55a:	4b15      	ldr	r3, [pc, #84]	; (5b0 <extint_chan_set_config+0x70>)
     55c:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     55e:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     560:	2d1f      	cmp	r5, #31
     562:	d800      	bhi.n	566 <extint_chan_set_config+0x26>
		return eics[eic_index];
     564:	4813      	ldr	r0, [pc, #76]	; (5b4 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     566:	2207      	movs	r2, #7
     568:	402a      	ands	r2, r5
     56a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     56c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     56e:	7aa3      	ldrb	r3, [r4, #10]
     570:	2b00      	cmp	r3, #0
     572:	d001      	beq.n	578 <extint_chan_set_config+0x38>
     574:	2308      	movs	r3, #8
     576:	431f      	orrs	r7, r3
     578:	08eb      	lsrs	r3, r5, #3
     57a:	009b      	lsls	r3, r3, #2
     57c:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     57e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     580:	260f      	movs	r6, #15
     582:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     584:	43b1      	bics	r1, r6
			(new_config << config_pos);
     586:	4097      	lsls	r7, r2
     588:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     58a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     58c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     58e:	7a63      	ldrb	r3, [r4, #9]
     590:	2b00      	cmp	r3, #0
     592:	d106      	bne.n	5a2 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     594:	6943      	ldr	r3, [r0, #20]
     596:	2201      	movs	r2, #1
     598:	40aa      	lsls	r2, r5
     59a:	4393      	bics	r3, r2
     59c:	6143      	str	r3, [r0, #20]
	}
}
     59e:	b003      	add	sp, #12
     5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     5a2:	6942      	ldr	r2, [r0, #20]
     5a4:	2301      	movs	r3, #1
     5a6:	40ab      	lsls	r3, r5
     5a8:	4313      	orrs	r3, r2
     5aa:	6143      	str	r3, [r0, #20]
     5ac:	e7f7      	b.n	59e <extint_chan_set_config+0x5e>
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	00002855 	.word	0x00002855
     5b4:	40001800 	.word	0x40001800

000005b8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     5b8:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     5ba:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5bc:	2340      	movs	r3, #64	; 0x40
     5be:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     5c0:	4281      	cmp	r1, r0
     5c2:	d202      	bcs.n	5ca <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     5c4:	0018      	movs	r0, r3
     5c6:	bd10      	pop	{r4, pc}
		baud_calculated++;
     5c8:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     5ca:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     5cc:	1c63      	adds	r3, r4, #1
     5ce:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     5d0:	4288      	cmp	r0, r1
     5d2:	d9f9      	bls.n	5c8 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5d4:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     5d6:	2cff      	cmp	r4, #255	; 0xff
     5d8:	d8f4      	bhi.n	5c4 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     5da:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     5dc:	2300      	movs	r3, #0
     5de:	e7f1      	b.n	5c4 <_sercom_get_sync_baud_val+0xc>

000005e0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     5e0:	b510      	push	{r4, lr}
     5e2:	b082      	sub	sp, #8
     5e4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     5e6:	4b0e      	ldr	r3, [pc, #56]	; (620 <sercom_set_gclk_generator+0x40>)
     5e8:	781b      	ldrb	r3, [r3, #0]
     5ea:	2b00      	cmp	r3, #0
     5ec:	d007      	beq.n	5fe <sercom_set_gclk_generator+0x1e>
     5ee:	2900      	cmp	r1, #0
     5f0:	d105      	bne.n	5fe <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     5f2:	4b0b      	ldr	r3, [pc, #44]	; (620 <sercom_set_gclk_generator+0x40>)
     5f4:	785b      	ldrb	r3, [r3, #1]
     5f6:	4283      	cmp	r3, r0
     5f8:	d010      	beq.n	61c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     5fa:	201d      	movs	r0, #29
     5fc:	e00c      	b.n	618 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     5fe:	a901      	add	r1, sp, #4
     600:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     602:	200d      	movs	r0, #13
     604:	4b07      	ldr	r3, [pc, #28]	; (624 <sercom_set_gclk_generator+0x44>)
     606:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     608:	200d      	movs	r0, #13
     60a:	4b07      	ldr	r3, [pc, #28]	; (628 <sercom_set_gclk_generator+0x48>)
     60c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     60e:	4b04      	ldr	r3, [pc, #16]	; (620 <sercom_set_gclk_generator+0x40>)
     610:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     612:	2201      	movs	r2, #1
     614:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     616:	2000      	movs	r0, #0
}
     618:	b002      	add	sp, #8
     61a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     61c:	2000      	movs	r0, #0
     61e:	e7fb      	b.n	618 <sercom_set_gclk_generator+0x38>
     620:	200000ac 	.word	0x200000ac
     624:	0000275d 	.word	0x0000275d
     628:	000026d1 	.word	0x000026d1

0000062c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     62c:	4b20      	ldr	r3, [pc, #128]	; (6b0 <_sercom_get_default_pad+0x84>)
     62e:	4298      	cmp	r0, r3
     630:	d017      	beq.n	662 <_sercom_get_default_pad+0x36>
     632:	4b20      	ldr	r3, [pc, #128]	; (6b4 <_sercom_get_default_pad+0x88>)
     634:	4298      	cmp	r0, r3
     636:	d024      	beq.n	682 <_sercom_get_default_pad+0x56>
     638:	4b1f      	ldr	r3, [pc, #124]	; (6b8 <_sercom_get_default_pad+0x8c>)
     63a:	4298      	cmp	r0, r3
     63c:	d001      	beq.n	642 <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     63e:	2000      	movs	r0, #0
}
     640:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     642:	2901      	cmp	r1, #1
     644:	d007      	beq.n	656 <_sercom_get_default_pad+0x2a>
     646:	2900      	cmp	r1, #0
     648:	d02b      	beq.n	6a2 <_sercom_get_default_pad+0x76>
     64a:	2902      	cmp	r1, #2
     64c:	d005      	beq.n	65a <_sercom_get_default_pad+0x2e>
     64e:	2903      	cmp	r1, #3
     650:	d005      	beq.n	65e <_sercom_get_default_pad+0x32>
	return 0;
     652:	2000      	movs	r0, #0
     654:	e7f4      	b.n	640 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     656:	4819      	ldr	r0, [pc, #100]	; (6bc <_sercom_get_default_pad+0x90>)
     658:	e7f2      	b.n	640 <_sercom_get_default_pad+0x14>
     65a:	4819      	ldr	r0, [pc, #100]	; (6c0 <_sercom_get_default_pad+0x94>)
     65c:	e7f0      	b.n	640 <_sercom_get_default_pad+0x14>
     65e:	4819      	ldr	r0, [pc, #100]	; (6c4 <_sercom_get_default_pad+0x98>)
     660:	e7ee      	b.n	640 <_sercom_get_default_pad+0x14>
     662:	2901      	cmp	r1, #1
     664:	d007      	beq.n	676 <_sercom_get_default_pad+0x4a>
     666:	2900      	cmp	r1, #0
     668:	d01d      	beq.n	6a6 <_sercom_get_default_pad+0x7a>
     66a:	2902      	cmp	r1, #2
     66c:	d005      	beq.n	67a <_sercom_get_default_pad+0x4e>
     66e:	2903      	cmp	r1, #3
     670:	d005      	beq.n	67e <_sercom_get_default_pad+0x52>
	return 0;
     672:	2000      	movs	r0, #0
     674:	e7e4      	b.n	640 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     676:	4814      	ldr	r0, [pc, #80]	; (6c8 <_sercom_get_default_pad+0x9c>)
     678:	e7e2      	b.n	640 <_sercom_get_default_pad+0x14>
     67a:	4814      	ldr	r0, [pc, #80]	; (6cc <_sercom_get_default_pad+0xa0>)
     67c:	e7e0      	b.n	640 <_sercom_get_default_pad+0x14>
     67e:	4814      	ldr	r0, [pc, #80]	; (6d0 <_sercom_get_default_pad+0xa4>)
     680:	e7de      	b.n	640 <_sercom_get_default_pad+0x14>
     682:	2901      	cmp	r1, #1
     684:	d007      	beq.n	696 <_sercom_get_default_pad+0x6a>
     686:	2900      	cmp	r1, #0
     688:	d00f      	beq.n	6aa <_sercom_get_default_pad+0x7e>
     68a:	2902      	cmp	r1, #2
     68c:	d005      	beq.n	69a <_sercom_get_default_pad+0x6e>
     68e:	2903      	cmp	r1, #3
     690:	d005      	beq.n	69e <_sercom_get_default_pad+0x72>
	return 0;
     692:	2000      	movs	r0, #0
     694:	e7d4      	b.n	640 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     696:	480f      	ldr	r0, [pc, #60]	; (6d4 <_sercom_get_default_pad+0xa8>)
     698:	e7d2      	b.n	640 <_sercom_get_default_pad+0x14>
     69a:	480f      	ldr	r0, [pc, #60]	; (6d8 <_sercom_get_default_pad+0xac>)
     69c:	e7d0      	b.n	640 <_sercom_get_default_pad+0x14>
     69e:	480f      	ldr	r0, [pc, #60]	; (6dc <_sercom_get_default_pad+0xb0>)
     6a0:	e7ce      	b.n	640 <_sercom_get_default_pad+0x14>
     6a2:	480f      	ldr	r0, [pc, #60]	; (6e0 <_sercom_get_default_pad+0xb4>)
     6a4:	e7cc      	b.n	640 <_sercom_get_default_pad+0x14>
     6a6:	480f      	ldr	r0, [pc, #60]	; (6e4 <_sercom_get_default_pad+0xb8>)
     6a8:	e7ca      	b.n	640 <_sercom_get_default_pad+0x14>
     6aa:	480f      	ldr	r0, [pc, #60]	; (6e8 <_sercom_get_default_pad+0xbc>)
     6ac:	e7c8      	b.n	640 <_sercom_get_default_pad+0x14>
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	42000c00 	.word	0x42000c00
     6b4:	42001000 	.word	0x42001000
     6b8:	42000800 	.word	0x42000800
     6bc:	00050003 	.word	0x00050003
     6c0:	00060003 	.word	0x00060003
     6c4:	00070003 	.word	0x00070003
     6c8:	00170002 	.word	0x00170002
     6cc:	001e0003 	.word	0x001e0003
     6d0:	001f0003 	.word	0x001f0003
     6d4:	00170003 	.word	0x00170003
     6d8:	00100003 	.word	0x00100003
     6dc:	00190003 	.word	0x00190003
     6e0:	00040003 	.word	0x00040003
     6e4:	00160002 	.word	0x00160002
     6e8:	00160003 	.word	0x00160003

000006ec <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     6ec:	b530      	push	{r4, r5, lr}
     6ee:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     6f0:	aa01      	add	r2, sp, #4
     6f2:	4b0b      	ldr	r3, [pc, #44]	; (720 <_sercom_get_sercom_inst_index+0x34>)
     6f4:	cb32      	ldmia	r3!, {r1, r4, r5}
     6f6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6f8:	0003      	movs	r3, r0
     6fa:	9a01      	ldr	r2, [sp, #4]
     6fc:	4282      	cmp	r2, r0
     6fe:	d00c      	beq.n	71a <_sercom_get_sercom_inst_index+0x2e>
     700:	9a02      	ldr	r2, [sp, #8]
     702:	4282      	cmp	r2, r0
     704:	d007      	beq.n	716 <_sercom_get_sercom_inst_index+0x2a>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     706:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     708:	9a03      	ldr	r2, [sp, #12]
     70a:	429a      	cmp	r2, r3
     70c:	d001      	beq.n	712 <_sercom_get_sercom_inst_index+0x26>
}
     70e:	b005      	add	sp, #20
     710:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     712:	3002      	adds	r0, #2
     714:	e002      	b.n	71c <_sercom_get_sercom_inst_index+0x30>
     716:	2001      	movs	r0, #1
     718:	e000      	b.n	71c <_sercom_get_sercom_inst_index+0x30>
     71a:	2000      	movs	r0, #0
			return i;
     71c:	b2c0      	uxtb	r0, r0
     71e:	e7f6      	b.n	70e <_sercom_get_sercom_inst_index+0x22>
     720:	00002d60 	.word	0x00002d60

00000724 <control_loop_motors>:
static uint16_t ki_constant = KI_CONTROL;
static uint16_t kd_constant = KD_CONTROL;


void control_loop_motors()
{
     724:	b5f0      	push	{r4, r5, r6, r7, lr}
     726:	b083      	sub	sp, #12
	volatile uint8_t speed = 0;
     728:	2300      	movs	r3, #0
     72a:	466a      	mov	r2, sp
     72c:	71d3      	strb	r3, [r2, #7]
	
	static uint32_t sum_integral_right = 0;
	static uint16_t  prev_error_right   = 0;
	
	uint16_t  current_error   = 0;
	volatile int16_t   diff_derivative = 0; 
     72e:	aa01      	add	r2, sp, #4
     730:	8013      	strh	r3, [r2, #0]
	static bool first_time = false;
	if(first_time == false);
	{
		first_time = true ; 
		prev_error_left  = abs(left_total_req_ticks - left_encoder_ticks) ;
     732:	4b69      	ldr	r3, [pc, #420]	; (8d8 <control_loop_motors+0x1b4>)
     734:	8818      	ldrh	r0, [r3, #0]
     736:	4b69      	ldr	r3, [pc, #420]	; (8dc <control_loop_motors+0x1b8>)
     738:	881a      	ldrh	r2, [r3, #0]
		prev_error_right = abs(right_total_req_ticks - right_encoder_ticks) ;
     73a:	4b69      	ldr	r3, [pc, #420]	; (8e0 <control_loop_motors+0x1bc>)
     73c:	881b      	ldrh	r3, [r3, #0]
     73e:	4969      	ldr	r1, [pc, #420]	; (8e4 <control_loop_motors+0x1c0>)
     740:	8809      	ldrh	r1, [r1, #0]
     742:	1a5b      	subs	r3, r3, r1
     744:	17d9      	asrs	r1, r3, #31
     746:	185b      	adds	r3, r3, r1
     748:	404b      	eors	r3, r1
     74a:	4967      	ldr	r1, [pc, #412]	; (8e8 <control_loop_motors+0x1c4>)
     74c:	800b      	strh	r3, [r1, #0]
	}
	//Left Motor
	if((left_encoder_ticks - left_total_req_ticks) >= 0)
     74e:	1a13      	subs	r3, r2, r0
     750:	d439      	bmi.n	7c6 <control_loop_motors+0xa2>
		port_base->OUTSET.reg = pin_mask;
     752:	4c66      	ldr	r4, [pc, #408]	; (8ec <control_loop_motors+0x1c8>)
     754:	2504      	movs	r5, #4
     756:	61a5      	str	r5, [r4, #24]
	{
		port_pin_set_output_level(PROFILE_PIN,true);
		set_motor_left(left_dir ,  0);
     758:	4b65      	ldr	r3, [pc, #404]	; (8f0 <control_loop_motors+0x1cc>)
     75a:	7818      	ldrb	r0, [r3, #0]
     75c:	2100      	movs	r1, #0
     75e:	4b65      	ldr	r3, [pc, #404]	; (8f4 <control_loop_motors+0x1d0>)
     760:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     762:	6165      	str	r5, [r4, #20]
		port_pin_set_output_level(PROFILE_PIN,false);
		//delay_cycles_ms(2000);
		//move_motor(true , 128 , true , 0);
		sum_integral_left = 0;
     764:	2200      	movs	r2, #0
     766:	4b64      	ldr	r3, [pc, #400]	; (8f8 <control_loop_motors+0x1d4>)
     768:	601a      	str	r2, [r3, #0]
		set_motor_left(left_dir ,  speed);
		prev_error_left  = current_error ;
	}
	
	//Right Motor
	if((right_encoder_ticks - right_total_req_ticks) >= 0)
     76a:	4b5e      	ldr	r3, [pc, #376]	; (8e4 <control_loop_motors+0x1c0>)
     76c:	881a      	ldrh	r2, [r3, #0]
     76e:	4b5c      	ldr	r3, [pc, #368]	; (8e0 <control_loop_motors+0x1bc>)
     770:	881b      	ldrh	r3, [r3, #0]
     772:	1ad1      	subs	r1, r2, r3
     774:	d500      	bpl.n	778 <control_loop_motors+0x54>
     776:	e06f      	b.n	858 <control_loop_motors+0x134>
	{
		set_motor_right(right_dir , 0 );
     778:	4b60      	ldr	r3, [pc, #384]	; (8fc <control_loop_motors+0x1d8>)
     77a:	7818      	ldrb	r0, [r3, #0]
     77c:	2100      	movs	r1, #0
     77e:	4b60      	ldr	r3, [pc, #384]	; (900 <control_loop_motors+0x1dc>)
     780:	4798      	blx	r3
		sum_integral_right = 0;
     782:	2200      	movs	r2, #0
     784:	4b5f      	ldr	r3, [pc, #380]	; (904 <control_loop_motors+0x1e0>)
     786:	601a      	str	r2, [r3, #0]
		}
		//speed = 15;
		set_motor_right(right_dir ,  speed);
	}
	
	if(((right_encoder_ticks - right_total_req_ticks) >= 0) && ((left_encoder_ticks - left_total_req_ticks) >= 0) )
     788:	4b56      	ldr	r3, [pc, #344]	; (8e4 <control_loop_motors+0x1c0>)
     78a:	881b      	ldrh	r3, [r3, #0]
     78c:	4a54      	ldr	r2, [pc, #336]	; (8e0 <control_loop_motors+0x1bc>)
     78e:	8812      	ldrh	r2, [r2, #0]
     790:	1a9b      	subs	r3, r3, r2
     792:	d416      	bmi.n	7c2 <control_loop_motors+0x9e>
     794:	4b51      	ldr	r3, [pc, #324]	; (8dc <control_loop_motors+0x1b8>)
     796:	881b      	ldrh	r3, [r3, #0]
     798:	4a4f      	ldr	r2, [pc, #316]	; (8d8 <control_loop_motors+0x1b4>)
     79a:	8812      	ldrh	r2, [r2, #0]
     79c:	1a9b      	subs	r3, r3, r2
     79e:	d410      	bmi.n	7c2 <control_loop_motors+0x9e>
	{
		set_motor_left(left_dir , 0 );
     7a0:	4b53      	ldr	r3, [pc, #332]	; (8f0 <control_loop_motors+0x1cc>)
     7a2:	7818      	ldrb	r0, [r3, #0]
     7a4:	2100      	movs	r1, #0
     7a6:	4b53      	ldr	r3, [pc, #332]	; (8f4 <control_loop_motors+0x1d0>)
     7a8:	4798      	blx	r3
		//delay_cycles_ms(1000);
		set_motor_right(right_dir , 0 );
     7aa:	4b54      	ldr	r3, [pc, #336]	; (8fc <control_loop_motors+0x1d8>)
     7ac:	7818      	ldrb	r0, [r3, #0]
     7ae:	2100      	movs	r1, #0
     7b0:	4b53      	ldr	r3, [pc, #332]	; (900 <control_loop_motors+0x1dc>)
     7b2:	4798      	blx	r3
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
     7b4:	4b54      	ldr	r3, [pc, #336]	; (908 <control_loop_motors+0x1e4>)
     7b6:	2101      	movs	r1, #1
     7b8:	681a      	ldr	r2, [r3, #0]
     7ba:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~(1 << callback_type);
     7bc:	7e5a      	ldrb	r2, [r3, #25]
     7be:	438a      	bics	r2, r1
     7c0:	765a      	strb	r2, [r3, #25]
		tc_disable_callback(&tc_encoder_capture, TC_CALLBACK_OVERFLOW);
	}
}
     7c2:	b003      	add	sp, #12
     7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		prev_error_left  = abs(left_total_req_ticks - left_encoder_ticks) ;
     7c6:	1a80      	subs	r0, r0, r2
     7c8:	17c3      	asrs	r3, r0, #31
     7ca:	18c0      	adds	r0, r0, r3
     7cc:	4058      	eors	r0, r3
		sum_integral_left   +=  current_error;
     7ce:	0403      	lsls	r3, r0, #16
     7d0:	0c1b      	lsrs	r3, r3, #16
     7d2:	4a49      	ldr	r2, [pc, #292]	; (8f8 <control_loop_motors+0x1d4>)
     7d4:	6811      	ldr	r1, [r2, #0]
     7d6:	468c      	mov	ip, r1
     7d8:	4463      	add	r3, ip
     7da:	6013      	str	r3, [r2, #0]
		if(sum_integral_left > 100 * ki_constant)
     7dc:	4a4b      	ldr	r2, [pc, #300]	; (90c <control_loop_motors+0x1e8>)
     7de:	8816      	ldrh	r6, [r2, #0]
     7e0:	2264      	movs	r2, #100	; 0x64
     7e2:	4372      	muls	r2, r6
     7e4:	4293      	cmp	r3, r2
     7e6:	d901      	bls.n	7ec <control_loop_motors+0xc8>
			sum_integral_left  =  100 * ki_constant;
     7e8:	4b43      	ldr	r3, [pc, #268]	; (8f8 <control_loop_motors+0x1d4>)
     7ea:	601a      	str	r2, [r3, #0]
		diff_derivative =  (current_error - prev_error_left);
     7ec:	2200      	movs	r2, #0
     7ee:	ab01      	add	r3, sp, #4
     7f0:	801a      	strh	r2, [r3, #0]
		temp_speed = current_error/kp_constant + sum_integral_left/ki_constant ;//+ diff_derivative/kd_constant ;
     7f2:	4b41      	ldr	r3, [pc, #260]	; (8f8 <control_loop_motors+0x1d4>)
     7f4:	681d      	ldr	r5, [r3, #0]
     7f6:	b280      	uxth	r0, r0
     7f8:	4b45      	ldr	r3, [pc, #276]	; (910 <control_loop_motors+0x1ec>)
     7fa:	8819      	ldrh	r1, [r3, #0]
     7fc:	4f45      	ldr	r7, [pc, #276]	; (914 <control_loop_motors+0x1f0>)
     7fe:	47b8      	blx	r7
     800:	0004      	movs	r4, r0
     802:	0031      	movs	r1, r6
     804:	0028      	movs	r0, r5
     806:	47b8      	blx	r7
     808:	1824      	adds	r4, r4, r0
     80a:	b2a4      	uxth	r4, r4
		if(temp_speed > 255)
     80c:	2cff      	cmp	r4, #255	; 0xff
     80e:	d91b      	bls.n	848 <control_loop_motors+0x124>
			speed = 255;
     810:	22ff      	movs	r2, #255	; 0xff
     812:	466b      	mov	r3, sp
     814:	71da      	strb	r2, [r3, #7]
		speed_storage[k] = sum_integral_left/KI_CONTROL ;
     816:	4b40      	ldr	r3, [pc, #256]	; (918 <control_loop_motors+0x1f4>)
     818:	881c      	ldrh	r4, [r3, #0]
     81a:	4940      	ldr	r1, [pc, #256]	; (91c <control_loop_motors+0x1f8>)
     81c:	0028      	movs	r0, r5
     81e:	4b3d      	ldr	r3, [pc, #244]	; (914 <control_loop_motors+0x1f0>)
     820:	4798      	blx	r3
     822:	b2c0      	uxtb	r0, r0
     824:	4b3e      	ldr	r3, [pc, #248]	; (920 <control_loop_motors+0x1fc>)
     826:	5518      	strb	r0, [r3, r4]
		k++;
     828:	3401      	adds	r4, #1
     82a:	b2a4      	uxth	r4, r4
		if(k == 1000)
     82c:	23fa      	movs	r3, #250	; 0xfa
     82e:	009b      	lsls	r3, r3, #2
     830:	429c      	cmp	r4, r3
     832:	d00d      	beq.n	850 <control_loop_motors+0x12c>
		k++;
     834:	4b38      	ldr	r3, [pc, #224]	; (918 <control_loop_motors+0x1f4>)
     836:	801c      	strh	r4, [r3, #0]
		set_motor_left(left_dir ,  speed);
     838:	466b      	mov	r3, sp
     83a:	79d9      	ldrb	r1, [r3, #7]
     83c:	b2c9      	uxtb	r1, r1
     83e:	4b2c      	ldr	r3, [pc, #176]	; (8f0 <control_loop_motors+0x1cc>)
     840:	7818      	ldrb	r0, [r3, #0]
     842:	4b2c      	ldr	r3, [pc, #176]	; (8f4 <control_loop_motors+0x1d0>)
     844:	4798      	blx	r3
     846:	e790      	b.n	76a <control_loop_motors+0x46>
			speed = temp_speed;
     848:	b2e0      	uxtb	r0, r4
     84a:	466b      	mov	r3, sp
     84c:	71d8      	strb	r0, [r3, #7]
     84e:	e7e2      	b.n	816 <control_loop_motors+0xf2>
			k=0;
     850:	2200      	movs	r2, #0
     852:	4b31      	ldr	r3, [pc, #196]	; (918 <control_loop_motors+0x1f4>)
     854:	801a      	strh	r2, [r3, #0]
     856:	e7ef      	b.n	838 <control_loop_motors+0x114>
		current_error   = abs(right_total_req_ticks - right_encoder_ticks) ;
     858:	1a9b      	subs	r3, r3, r2
     85a:	17da      	asrs	r2, r3, #31
     85c:	189b      	adds	r3, r3, r2
     85e:	4053      	eors	r3, r2
     860:	b29d      	uxth	r5, r3
		sum_integral_right   +=  current_error;
     862:	041b      	lsls	r3, r3, #16
     864:	0c1b      	lsrs	r3, r3, #16
     866:	4a27      	ldr	r2, [pc, #156]	; (904 <control_loop_motors+0x1e0>)
     868:	6811      	ldr	r1, [r2, #0]
     86a:	468c      	mov	ip, r1
     86c:	4463      	add	r3, ip
     86e:	6013      	str	r3, [r2, #0]
		if(sum_integral_right > 255 * ki_constant)
     870:	4a26      	ldr	r2, [pc, #152]	; (90c <control_loop_motors+0x1e8>)
     872:	8811      	ldrh	r1, [r2, #0]
     874:	020a      	lsls	r2, r1, #8
     876:	1a52      	subs	r2, r2, r1
     878:	4293      	cmp	r3, r2
     87a:	d903      	bls.n	884 <control_loop_motors+0x160>
			sum_integral_right  =  100 * ki_constant;
     87c:	2364      	movs	r3, #100	; 0x64
     87e:	434b      	muls	r3, r1
     880:	4a20      	ldr	r2, [pc, #128]	; (904 <control_loop_motors+0x1e0>)
     882:	6013      	str	r3, [r2, #0]
		diff_derivative =  (current_error - prev_error_right);
     884:	4b18      	ldr	r3, [pc, #96]	; (8e8 <control_loop_motors+0x1c4>)
     886:	881b      	ldrh	r3, [r3, #0]
     888:	1aeb      	subs	r3, r5, r3
     88a:	b21b      	sxth	r3, r3
     88c:	aa01      	add	r2, sp, #4
     88e:	8013      	strh	r3, [r2, #0]
		temp_speed = current_error/kp_constant + sum_integral_right/ki_constant + diff_derivative/kd_constant ;
     890:	8816      	ldrh	r6, [r2, #0]
     892:	b236      	sxth	r6, r6
     894:	4f1f      	ldr	r7, [pc, #124]	; (914 <control_loop_motors+0x1f0>)
     896:	4b1b      	ldr	r3, [pc, #108]	; (904 <control_loop_motors+0x1e0>)
     898:	6818      	ldr	r0, [r3, #0]
     89a:	47b8      	blx	r7
     89c:	0004      	movs	r4, r0
     89e:	4b21      	ldr	r3, [pc, #132]	; (924 <control_loop_motors+0x200>)
     8a0:	8819      	ldrh	r1, [r3, #0]
     8a2:	0030      	movs	r0, r6
     8a4:	4b20      	ldr	r3, [pc, #128]	; (928 <control_loop_motors+0x204>)
     8a6:	4798      	blx	r3
     8a8:	1824      	adds	r4, r4, r0
     8aa:	4b19      	ldr	r3, [pc, #100]	; (910 <control_loop_motors+0x1ec>)
     8ac:	8819      	ldrh	r1, [r3, #0]
     8ae:	0028      	movs	r0, r5
     8b0:	47b8      	blx	r7
     8b2:	1820      	adds	r0, r4, r0
     8b4:	b280      	uxth	r0, r0
		if(temp_speed > 255)
     8b6:	28ff      	cmp	r0, #255	; 0xff
     8b8:	d90a      	bls.n	8d0 <control_loop_motors+0x1ac>
			speed = 255;
     8ba:	22ff      	movs	r2, #255	; 0xff
     8bc:	466b      	mov	r3, sp
     8be:	71da      	strb	r2, [r3, #7]
		set_motor_right(right_dir ,  speed);
     8c0:	466b      	mov	r3, sp
     8c2:	79d9      	ldrb	r1, [r3, #7]
     8c4:	b2c9      	uxtb	r1, r1
     8c6:	4b0d      	ldr	r3, [pc, #52]	; (8fc <control_loop_motors+0x1d8>)
     8c8:	7818      	ldrb	r0, [r3, #0]
     8ca:	4b0d      	ldr	r3, [pc, #52]	; (900 <control_loop_motors+0x1dc>)
     8cc:	4798      	blx	r3
     8ce:	e75b      	b.n	788 <control_loop_motors+0x64>
			speed = temp_speed;
     8d0:	b2c0      	uxtb	r0, r0
     8d2:	466b      	mov	r3, sp
     8d4:	71d8      	strb	r0, [r3, #7]
     8d6:	e7f3      	b.n	8c0 <control_loop_motors+0x19c>
     8d8:	200000b2 	.word	0x200000b2
     8dc:	20000148 	.word	0x20000148
     8e0:	200000b8 	.word	0x200000b8
     8e4:	2000014a 	.word	0x2000014a
     8e8:	200000b4 	.word	0x200000b4
     8ec:	41004400 	.word	0x41004400
     8f0:	200000b0 	.word	0x200000b0
     8f4:	00000c51 	.word	0x00000c51
     8f8:	200000bc 	.word	0x200000bc
     8fc:	200000b6 	.word	0x200000b6
     900:	00000cb1 	.word	0x00000cb1
     904:	200000c0 	.word	0x200000c0
     908:	200005f4 	.word	0x200005f4
     90c:	20000002 	.word	0x20000002
     910:	20000004 	.word	0x20000004
     914:	00002a19 	.word	0x00002a19
     918:	200000ae 	.word	0x200000ae
     91c:	000009c4 	.word	0x000009c4
     920:	2000020c 	.word	0x2000020c
     924:	20000000 	.word	0x20000000
     928:	00002b2d 	.word	0x00002b2d

0000092c <update_PID_values>:
	//tc_enable_callback(&tc_encoder_capture, TC_CALLBACK_OVERFLOW);
}

void update_PID_values(uint8_t* pid_values )
{
	kp_constant   = (pid_values[0] << 8) & 0xFF00 ;
     92c:	7802      	ldrb	r2, [r0, #0]
     92e:	0212      	lsls	r2, r2, #8
	kp_constant  |=  pid_values[1];
     930:	7843      	ldrb	r3, [r0, #1]
     932:	4313      	orrs	r3, r2
     934:	4a07      	ldr	r2, [pc, #28]	; (954 <update_PID_values+0x28>)
     936:	8013      	strh	r3, [r2, #0]
	
	ki_constant   = (pid_values[2] << 8) & 0xFF00 ;
     938:	7882      	ldrb	r2, [r0, #2]
     93a:	0212      	lsls	r2, r2, #8
	ki_constant  |=  pid_values[3];
     93c:	78c3      	ldrb	r3, [r0, #3]
     93e:	4313      	orrs	r3, r2
     940:	4a05      	ldr	r2, [pc, #20]	; (958 <update_PID_values+0x2c>)
     942:	8013      	strh	r3, [r2, #0]
	
	kd_constant   = (pid_values[4] << 8) & 0xFF00 ;
     944:	7902      	ldrb	r2, [r0, #4]
     946:	0212      	lsls	r2, r2, #8
	kd_constant  |=  pid_values[5];
     948:	7943      	ldrb	r3, [r0, #5]
     94a:	4313      	orrs	r3, r2
     94c:	4a03      	ldr	r2, [pc, #12]	; (95c <update_PID_values+0x30>)
     94e:	8013      	strh	r3, [r2, #0]

}
     950:	4770      	bx	lr
     952:	46c0      	nop			; (mov r8, r8)
     954:	20000004 	.word	0x20000004
     958:	20000002 	.word	0x20000002
     95c:	20000000 	.word	0x20000000

00000960 <move_motor>:

void move_motor(bool left_direction , uint16_t left_ticks, bool right_direction , uint16_t right_ticks)
{
     960:	b510      	push	{r4, lr}
	if((left_ticks > 0) || (right_ticks > 0))
     962:	000c      	movs	r4, r1
     964:	431c      	orrs	r4, r3
     966:	d016      	beq.n	996 <move_motor+0x36>
	{
		if(left_ticks > 0)
     968:	2900      	cmp	r1, #0
     96a:	d115      	bne.n	998 <move_motor+0x38>
		{
			left_dir  = left_direction;
			left_total_req_ticks = left_ticks;
			ticks_left();
		}
		if(right_ticks > 0)
     96c:	2b00      	cmp	r3, #0
     96e:	d11b      	bne.n	9a8 <move_motor+0x48>
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     970:	4c11      	ldr	r4, [pc, #68]	; (9b8 <move_motor+0x58>)
     972:	6820      	ldr	r0, [r4, #0]
     974:	4b11      	ldr	r3, [pc, #68]	; (9bc <move_motor+0x5c>)
     976:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     978:	4b11      	ldr	r3, [pc, #68]	; (9c0 <move_motor+0x60>)
     97a:	5c1a      	ldrb	r2, [r3, r0]
     97c:	231f      	movs	r3, #31
     97e:	4013      	ands	r3, r2
     980:	2201      	movs	r2, #1
     982:	0011      	movs	r1, r2
     984:	4099      	lsls	r1, r3
     986:	4b0f      	ldr	r3, [pc, #60]	; (9c4 <move_motor+0x64>)
     988:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
     98a:	7e63      	ldrb	r3, [r4, #25]
     98c:	2101      	movs	r1, #1
     98e:	430b      	orrs	r3, r1
     990:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     992:	6823      	ldr	r3, [r4, #0]
     994:	735a      	strb	r2, [r3, #13]
		}
		tc_enable_callback(&tc_encoder_capture, TC_CALLBACK_OVERFLOW);
	}
	//calculate_initial_speed_right();
	//calculate_initial_speed_left();
}
     996:	bd10      	pop	{r4, pc}
			left_dir  = left_direction;
     998:	4c0b      	ldr	r4, [pc, #44]	; (9c8 <move_motor+0x68>)
     99a:	7020      	strb	r0, [r4, #0]
			left_total_req_ticks = left_ticks;
     99c:	480b      	ldr	r0, [pc, #44]	; (9cc <move_motor+0x6c>)
     99e:	8001      	strh	r1, [r0, #0]
	left_encoder_ticks = 0;
     9a0:	2000      	movs	r0, #0
     9a2:	490b      	ldr	r1, [pc, #44]	; (9d0 <move_motor+0x70>)
     9a4:	8008      	strh	r0, [r1, #0]
     9a6:	e7e1      	b.n	96c <move_motor+0xc>
			right_dir = right_direction;
     9a8:	490a      	ldr	r1, [pc, #40]	; (9d4 <move_motor+0x74>)
     9aa:	700a      	strb	r2, [r1, #0]
			right_total_req_ticks = right_ticks;
     9ac:	4a0a      	ldr	r2, [pc, #40]	; (9d8 <move_motor+0x78>)
     9ae:	8013      	strh	r3, [r2, #0]
	right_encoder_ticks = 0;
     9b0:	2200      	movs	r2, #0
     9b2:	4b0a      	ldr	r3, [pc, #40]	; (9dc <move_motor+0x7c>)
     9b4:	801a      	strh	r2, [r3, #0]
     9b6:	e7db      	b.n	970 <move_motor+0x10>
     9b8:	200005f4 	.word	0x200005f4
     9bc:	00001711 	.word	0x00001711
     9c0:	00002d6c 	.word	0x00002d6c
     9c4:	e000e100 	.word	0xe000e100
     9c8:	200000b0 	.word	0x200000b0
     9cc:	200000b2 	.word	0x200000b2
     9d0:	20000148 	.word	0x20000148
     9d4:	200000b6 	.word	0x200000b6
     9d8:	200000b8 	.word	0x200000b8
     9dc:	2000014a 	.word	0x2000014a

000009e0 <extint_detection_left_encoder_callback>:
void extint_detection_left_encoder_callback(void)
{
	volatile static uint16_t count_high = 0;
	volatile static uint16_t count_low  = 0;
	//port_pin_set_output_level(PROFILE_PIN,true);
	left_encoder_ticks++;
     9e0:	4b07      	ldr	r3, [pc, #28]	; (a00 <extint_detection_left_encoder_callback+0x20>)
     9e2:	881b      	ldrh	r3, [r3, #0]
     9e4:	3301      	adds	r3, #1
     9e6:	b29b      	uxth	r3, r3
	if(left_encoder_ticks >32000)
     9e8:	22fa      	movs	r2, #250	; 0xfa
     9ea:	01d2      	lsls	r2, r2, #7
     9ec:	4293      	cmp	r3, r2
     9ee:	d903      	bls.n	9f8 <extint_detection_left_encoder_callback+0x18>
	{
		left_encoder_ticks = 0;
     9f0:	2200      	movs	r2, #0
     9f2:	4b03      	ldr	r3, [pc, #12]	; (a00 <extint_detection_left_encoder_callback+0x20>)
     9f4:	801a      	strh	r2, [r3, #0]
	}
	//port_pin_set_output_level(PROFILE_PIN,false);
}
     9f6:	4770      	bx	lr
	left_encoder_ticks++;
     9f8:	4a01      	ldr	r2, [pc, #4]	; (a00 <extint_detection_left_encoder_callback+0x20>)
     9fa:	8013      	strh	r3, [r2, #0]
     9fc:	e7fb      	b.n	9f6 <extint_detection_left_encoder_callback+0x16>
     9fe:	46c0      	nop			; (mov r8, r8)
     a00:	20000148 	.word	0x20000148

00000a04 <extint_detection_right_encoder_callback>:
void extint_detection_right_encoder_callback(void)
{
	volatile static uint16_t count_high = 0;
	volatile static uint16_t count_low  = 0;
	//port_pin_set_output_level(PROFILE_PIN,true);
	right_encoder_ticks++;
     a04:	4b07      	ldr	r3, [pc, #28]	; (a24 <extint_detection_right_encoder_callback+0x20>)
     a06:	881b      	ldrh	r3, [r3, #0]
     a08:	3301      	adds	r3, #1
     a0a:	b29b      	uxth	r3, r3
	if(right_encoder_ticks >32000)
     a0c:	22fa      	movs	r2, #250	; 0xfa
     a0e:	01d2      	lsls	r2, r2, #7
     a10:	4293      	cmp	r3, r2
     a12:	d903      	bls.n	a1c <extint_detection_right_encoder_callback+0x18>
	{
		right_encoder_ticks = 0;
     a14:	2200      	movs	r2, #0
     a16:	4b03      	ldr	r3, [pc, #12]	; (a24 <extint_detection_right_encoder_callback+0x20>)
     a18:	801a      	strh	r2, [r3, #0]
	}
	//port_pin_set_output_level(PROFILE_PIN,false);
}
     a1a:	4770      	bx	lr
	right_encoder_ticks++;
     a1c:	4a01      	ldr	r2, [pc, #4]	; (a24 <extint_detection_right_encoder_callback+0x20>)
     a1e:	8013      	strh	r3, [r2, #0]
     a20:	e7fb      	b.n	a1a <extint_detection_right_encoder_callback+0x16>
     a22:	46c0      	nop			; (mov r8, r8)
     a24:	2000014a 	.word	0x2000014a

00000a28 <tc_callback_OF>:
{
     a28:	b510      	push	{r4, lr}
	control_loop_motors();
     a2a:	4b01      	ldr	r3, [pc, #4]	; (a30 <tc_callback_OF+0x8>)
     a2c:	4798      	blx	r3
}
     a2e:	bd10      	pop	{r4, pc}
     a30:	00000725 	.word	0x00000725

00000a34 <init_timer_callbacks>:
{
     a34:	b510      	push	{r4, lr}
	tc_register_callback(&tc_encoder_capture, tc_callback_OF,TC_CALLBACK_OVERFLOW);
     a36:	2200      	movs	r2, #0
     a38:	4902      	ldr	r1, [pc, #8]	; (a44 <init_timer_callbacks+0x10>)
     a3a:	4803      	ldr	r0, [pc, #12]	; (a48 <init_timer_callbacks+0x14>)
     a3c:	4b03      	ldr	r3, [pc, #12]	; (a4c <init_timer_callbacks+0x18>)
     a3e:	4798      	blx	r3
}
     a40:	bd10      	pop	{r4, pc}
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	00000a29 	.word	0x00000a29
     a48:	200005f4 	.word	0x200005f4
     a4c:	000019c3 	.word	0x000019c3

00000a50 <configure_timer_encoder>:
{
     a50:	b510      	push	{r4, lr}
     a52:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
     a54:	aa01      	add	r2, sp, #4
     a56:	2300      	movs	r3, #0
     a58:	2100      	movs	r1, #0
     a5a:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     a5c:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     a5e:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     a60:	2000      	movs	r0, #0
     a62:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     a64:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     a66:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     a68:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     a6a:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     a6c:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     a6e:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     a70:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     a72:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     a74:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     a76:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     a78:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     a7a:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     a7c:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.enable_capture_on_channel[0] = true;
     a7e:	3301      	adds	r3, #1
     a80:	72d3      	strb	r3, [r2, #11]
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT; //8
     a82:	3303      	adds	r3, #3
     a84:	7093      	strb	r3, [r2, #2]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV256; //1024
     a86:	23c0      	movs	r3, #192	; 0xc0
     a88:	00db      	lsls	r3, r3, #3
     a8a:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 0xFF;
     a8c:	21ff      	movs	r1, #255	; 0xff
     a8e:	2329      	movs	r3, #41	; 0x29
     a90:	54d1      	strb	r1, [r2, r3]
	tc_init(&tc_encoder_capture, ENCODER_TC, &config_tc);
     a92:	4c08      	ldr	r4, [pc, #32]	; (ab4 <configure_timer_encoder+0x64>)
     a94:	4908      	ldr	r1, [pc, #32]	; (ab8 <configure_timer_encoder+0x68>)
     a96:	0020      	movs	r0, r4
     a98:	4b08      	ldr	r3, [pc, #32]	; (abc <configure_timer_encoder+0x6c>)
     a9a:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     a9c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     a9e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     aa0:	b25b      	sxtb	r3, r3
     aa2:	2b00      	cmp	r3, #0
     aa4:	dbfb      	blt.n	a9e <configure_timer_encoder+0x4e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     aa6:	8813      	ldrh	r3, [r2, #0]
     aa8:	2102      	movs	r1, #2
     aaa:	430b      	orrs	r3, r1
     aac:	8013      	strh	r3, [r2, #0]
}
     aae:	b00e      	add	sp, #56	; 0x38
     ab0:	bd10      	pop	{r4, pc}
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	200005f4 	.word	0x200005f4
     ab8:	42001800 	.word	0x42001800
     abc:	00001735 	.word	0x00001735

00000ac0 <configure_extint_left_encoder>:
{
     ac0:	b510      	push	{r4, lr}
     ac2:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
     ac4:	ac01      	add	r4, sp, #4
     ac6:	0020      	movs	r0, r4
     ac8:	4b07      	ldr	r3, [pc, #28]	; (ae8 <configure_extint_left_encoder+0x28>)
     aca:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA16A_EIC_EXTINT0;
     acc:	2310      	movs	r3, #16
     ace:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA16A_EIC_EXTINT0;
     ad0:	2300      	movs	r3, #0
     ad2:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
     ad4:	3301      	adds	r3, #1
     ad6:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
     ad8:	3302      	adds	r3, #2
     ada:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(ENCODER_LEFT_EIC_LINE, &config_extint_chan);
     adc:	0021      	movs	r1, r4
     ade:	2000      	movs	r0, #0
     ae0:	4b02      	ldr	r3, [pc, #8]	; (aec <configure_extint_left_encoder+0x2c>)
     ae2:	4798      	blx	r3
}
     ae4:	b004      	add	sp, #16
     ae6:	bd10      	pop	{r4, pc}
     ae8:	0000052d 	.word	0x0000052d
     aec:	00000541 	.word	0x00000541

00000af0 <configure_extint_right_encoder>:
{
     af0:	b510      	push	{r4, lr}
     af2:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
     af4:	ac01      	add	r4, sp, #4
     af6:	0020      	movs	r0, r4
     af8:	4b07      	ldr	r3, [pc, #28]	; (b18 <configure_extint_right_encoder+0x28>)
     afa:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA15A_EIC_EXTINT1;
     afc:	230f      	movs	r3, #15
     afe:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA15A_EIC_EXTINT1;
     b00:	2300      	movs	r3, #0
     b02:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
     b04:	3301      	adds	r3, #1
     b06:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
     b08:	3302      	adds	r3, #2
     b0a:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(ENCODER_RIGHT_EIC_LINE, &config_extint_chan);
     b0c:	0021      	movs	r1, r4
     b0e:	2001      	movs	r0, #1
     b10:	4b02      	ldr	r3, [pc, #8]	; (b1c <configure_extint_right_encoder+0x2c>)
     b12:	4798      	blx	r3
}
     b14:	b004      	add	sp, #16
     b16:	bd10      	pop	{r4, pc}
     b18:	0000052d 	.word	0x0000052d
     b1c:	00000541 	.word	0x00000541

00000b20 <configure_extint_right_encoder_callbacks>:

void configure_extint_right_encoder_callbacks(void)
{
     b20:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_right_encoder_callback,ENCODER_LEFT_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     b22:	2200      	movs	r2, #0
     b24:	2100      	movs	r1, #0
     b26:	4804      	ldr	r0, [pc, #16]	; (b38 <configure_extint_right_encoder_callbacks+0x18>)
     b28:	4b04      	ldr	r3, [pc, #16]	; (b3c <configure_extint_right_encoder_callbacks+0x1c>)
     b2a:	4798      	blx	r3
	extint_chan_enable_callback(ENCODER_LEFT_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     b2c:	2100      	movs	r1, #0
     b2e:	2000      	movs	r0, #0
     b30:	4b03      	ldr	r3, [pc, #12]	; (b40 <configure_extint_right_encoder_callbacks+0x20>)
     b32:	4798      	blx	r3
}
     b34:	bd10      	pop	{r4, pc}
     b36:	46c0      	nop			; (mov r8, r8)
     b38:	00000a05 	.word	0x00000a05
     b3c:	00001f69 	.word	0x00001f69
     b40:	00001f95 	.word	0x00001f95

00000b44 <configure_extint_left_encoder_callbacks>:


void configure_extint_left_encoder_callbacks(void)
{
     b44:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_left_encoder_callback,ENCODER_RIGHT_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     b46:	2200      	movs	r2, #0
     b48:	2101      	movs	r1, #1
     b4a:	4804      	ldr	r0, [pc, #16]	; (b5c <configure_extint_left_encoder_callbacks+0x18>)
     b4c:	4b04      	ldr	r3, [pc, #16]	; (b60 <configure_extint_left_encoder_callbacks+0x1c>)
     b4e:	4798      	blx	r3
	extint_chan_enable_callback(ENCODER_RIGHT_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     b50:	2100      	movs	r1, #0
     b52:	2001      	movs	r0, #1
     b54:	4b03      	ldr	r3, [pc, #12]	; (b64 <configure_extint_left_encoder_callbacks+0x20>)
     b56:	4798      	blx	r3
}
     b58:	bd10      	pop	{r4, pc}
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	000009e1 	.word	0x000009e1
     b60:	00001f69 	.word	0x00001f69
     b64:	00001f95 	.word	0x00001f95

00000b68 <encoder_timer_init>:

void encoder_timer_init()
{
     b68:	b510      	push	{r4, lr}
	configure_timer_encoder();
     b6a:	4b02      	ldr	r3, [pc, #8]	; (b74 <encoder_timer_init+0xc>)
     b6c:	4798      	blx	r3
	init_timer_callbacks();
     b6e:	4b02      	ldr	r3, [pc, #8]	; (b78 <encoder_timer_init+0x10>)
     b70:	4798      	blx	r3
}
     b72:	bd10      	pop	{r4, pc}
     b74:	00000a51 	.word	0x00000a51
     b78:	00000a35 	.word	0x00000a35

00000b7c <encoders_init>:

//Initializing the encoders
void encoders_init()
{
     b7c:	b510      	push	{r4, lr}
	
	//Initialize the external interrupt channel for both encoders
	configure_extint_left_encoder();
     b7e:	4b05      	ldr	r3, [pc, #20]	; (b94 <encoders_init+0x18>)
     b80:	4798      	blx	r3
	configure_extint_right_encoder();
     b82:	4b05      	ldr	r3, [pc, #20]	; (b98 <encoders_init+0x1c>)
     b84:	4798      	blx	r3
	
	
	//Initialize the callbacks for external interrupt channel for both encoders
	configure_extint_left_encoder_callbacks();
     b86:	4b05      	ldr	r3, [pc, #20]	; (b9c <encoders_init+0x20>)
     b88:	4798      	blx	r3
	configure_extint_right_encoder_callbacks();
     b8a:	4b05      	ldr	r3, [pc, #20]	; (ba0 <encoders_init+0x24>)
     b8c:	4798      	blx	r3
	
	//Initialize the timer encoder
	encoder_timer_init();
     b8e:	4b05      	ldr	r3, [pc, #20]	; (ba4 <encoders_init+0x28>)
     b90:	4798      	blx	r3
	
}
     b92:	bd10      	pop	{r4, pc}
     b94:	00000ac1 	.word	0x00000ac1
     b98:	00000af1 	.word	0x00000af1
     b9c:	00000b45 	.word	0x00000b45
     ba0:	00000b21 	.word	0x00000b21
     ba4:	00000b69 	.word	0x00000b69

00000ba8 <config_timer_waveform>:


/**************************************************************************************/

void config_timer_waveform()
{
     ba8:	b570      	push	{r4, r5, r6, lr}
     baa:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
     bac:	4d20      	ldr	r5, [pc, #128]	; (c30 <config_timer_waveform+0x88>)
     bae:	ac01      	add	r4, sp, #4
     bb0:	0029      	movs	r1, r5
     bb2:	0020      	movs	r0, r4
     bb4:	4b1f      	ldr	r3, [pc, #124]	; (c34 <config_timer_waveform+0x8c>)
     bb6:	4798      	blx	r3
	struct port_config config_port_pin;
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	
	//
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV256;
     bb8:	2306      	movs	r3, #6
     bba:	72e3      	strb	r3, [r4, #11]
	config_tcc.counter.period		   = 0x00FF;
     bbc:	33f9      	adds	r3, #249	; 0xf9
     bbe:	6063      	str	r3, [r4, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     bc0:	3bfd      	subs	r3, #253	; 0xfd
     bc2:	7623      	strb	r3, [r4, #24]
	
	
	//Wave Polarity
	config_tcc.compare.wave_polarity[LEFT_MOTOR_CLOCK_CH]		= TCC_WAVE_POLARITY_0;
     bc4:	2300      	movs	r3, #0
     bc6:	75a3      	strb	r3, [r4, #22]
	config_tcc.compare.wave_polarity[RIGHT_MOTOR_CLOCK_CH]		= TCC_WAVE_POLARITY_0;
     bc8:	7523      	strb	r3, [r4, #20]
	config_tcc.compare.wave_polarity[LEFT_MOTOR_ANTI_CH]		= TCC_WAVE_POLARITY_0;
     bca:	75e3      	strb	r3, [r4, #23]
	config_tcc.compare.wave_polarity[RIGHT_MOTOR_ANTI_CH]		= TCC_WAVE_POLARITY_0;
     bcc:	7563      	strb	r3, [r4, #21]
	
	//Right Motor
	config_tcc.compare.match[RIGHT_MOTOR_CLOCK_CH]			= 0x00;
     bce:	61e3      	str	r3, [r4, #28]
	config_tcc.pins.enable_wave_out_pin[RIGHT_MOTOR_CLOCK_WO] = true;
     bd0:	2201      	movs	r2, #1
     bd2:	2198      	movs	r1, #152	; 0x98
     bd4:	5462      	strb	r2, [r4, r1]
	config_tcc.pins.wave_out_pin[RIGHT_MOTOR_CLOCK_WO]        = PIN_PA04F_TCC0_WO0; // this is no longer correct --- should be now
     bd6:	3994      	subs	r1, #148	; 0x94
     bd8:	65a1      	str	r1, [r4, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[RIGHT_MOTOR_CLOCK_WO]    = PINMUX_PA04F_TCC0_WO0; // this is no longer correct --- should be now
     bda:	4917      	ldr	r1, [pc, #92]	; (c38 <config_timer_waveform+0x90>)
     bdc:	67a1      	str	r1, [r4, #120]	; 0x78
	
	config_tcc.compare.match[RIGHT_MOTOR_ANTI_CH]			= 0x00;
     bde:	6223      	str	r3, [r4, #32]
	config_tcc.pins.enable_wave_out_pin[RIGHT_MOTOR_ANTI_WO] = true;
     be0:	2199      	movs	r1, #153	; 0x99
     be2:	5462      	strb	r2, [r4, r1]
	config_tcc.pins.wave_out_pin[RIGHT_MOTOR_ANTI_WO]        = PIN_PA05F_TCC0_WO1; // this is no longer correct --- should be now
     be4:	3994      	subs	r1, #148	; 0x94
     be6:	65e1      	str	r1, [r4, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[RIGHT_MOTOR_ANTI_WO]    = PINMUX_PA05F_TCC0_WO1; // this is no longer correct --- should be now
     be8:	4914      	ldr	r1, [pc, #80]	; (c3c <config_timer_waveform+0x94>)
     bea:	67e1      	str	r1, [r4, #124]	; 0x7c
	
	//
	config_tcc.compare.match[LEFT_MOTOR_CLOCK_CH]				= 0x00;
     bec:	6263      	str	r3, [r4, #36]	; 0x24
	config_tcc.pins.enable_wave_out_pin[LEFT_MOTOR_CLOCK_WO]  = true;
     bee:	219a      	movs	r1, #154	; 0x9a
     bf0:	5462      	strb	r2, [r4, r1]
	config_tcc.pins.wave_out_pin[LEFT_MOTOR_CLOCK_WO]         = PIN_PA10F_TCC0_WO2; //this is no longer correct--- should be now
     bf2:	3990      	subs	r1, #144	; 0x90
     bf4:	6621      	str	r1, [r4, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[LEFT_MOTOR_CLOCK_WO]     = PINMUX_PA10F_TCC0_WO2; // this is no longer correct --- should be now
     bf6:	4812      	ldr	r0, [pc, #72]	; (c40 <config_timer_waveform+0x98>)
     bf8:	3176      	adds	r1, #118	; 0x76
     bfa:	5060      	str	r0, [r4, r1]
	
	config_tcc.compare.match[LEFT_MOTOR_ANTI_CH]				= 0x00;
     bfc:	62a3      	str	r3, [r4, #40]	; 0x28
	config_tcc.pins.enable_wave_out_pin[LEFT_MOTOR_ANTI_WO]  = true;
     bfe:	339b      	adds	r3, #155	; 0x9b
     c00:	54e2      	strb	r2, [r4, r3]
	config_tcc.pins.wave_out_pin[LEFT_MOTOR_ANTI_WO]         = PIN_PA11F_TCC0_WO3; //this is no longer correct--- should be now
     c02:	3b90      	subs	r3, #144	; 0x90
     c04:	6663      	str	r3, [r4, #100]	; 0x64
	config_tcc.pins.wave_out_pin_mux[LEFT_MOTOR_ANTI_WO]     = PINMUX_PA11F_TCC0_WO3; // this is no longer correct --- should be now
     c06:	4a0f      	ldr	r2, [pc, #60]	; (c44 <config_timer_waveform+0x9c>)
     c08:	3379      	adds	r3, #121	; 0x79
     c0a:	50e2      	str	r2, [r4, r3]
	
	
	tcc_init(&tcc_instance0, TCC0, &config_tcc);
     c0c:	4e0e      	ldr	r6, [pc, #56]	; (c48 <config_timer_waveform+0xa0>)
     c0e:	0022      	movs	r2, r4
     c10:	0029      	movs	r1, r5
     c12:	0030      	movs	r0, r6
     c14:	4b0d      	ldr	r3, [pc, #52]	; (c4c <config_timer_waveform+0xa4>)
     c16:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     c18:	6832      	ldr	r2, [r6, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     c1a:	2102      	movs	r1, #2
     c1c:	6893      	ldr	r3, [r2, #8]
     c1e:	4219      	tst	r1, r3
     c20:	d1fc      	bne.n	c1c <config_timer_waveform+0x74>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     c22:	6813      	ldr	r3, [r2, #0]
     c24:	2102      	movs	r1, #2
     c26:	430b      	orrs	r3, r1
     c28:	6013      	str	r3, [r2, #0]
	tcc_enable(&tcc_instance0);
	
}
     c2a:	b02a      	add	sp, #168	; 0xa8
     c2c:	bd70      	pop	{r4, r5, r6, pc}
     c2e:	46c0      	nop			; (mov r8, r8)
     c30:	42001400 	.word	0x42001400
     c34:	000011e1 	.word	0x000011e1
     c38:	00040005 	.word	0x00040005
     c3c:	00050005 	.word	0x00050005
     c40:	000a0005 	.word	0x000a0005
     c44:	000b0005 	.word	0x000b0005
     c48:	200000c8 	.word	0x200000c8
     c4c:	0000131d 	.word	0x0000131d

00000c50 <set_motor_left>:

void set_motor_left(uint8_t dir, uint8_t speed)
{
     c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c52:	0004      	movs	r4, r0
     c54:	000d      	movs	r5, r1
	static uint8_t old_left_dir   = 0;
	static uint8_t old_left_speed = 0;
	if((old_left_dir != dir)||(old_left_speed != speed))
     c56:	4b12      	ldr	r3, [pc, #72]	; (ca0 <set_motor_left+0x50>)
     c58:	781b      	ldrb	r3, [r3, #0]
     c5a:	4283      	cmp	r3, r0
     c5c:	d010      	beq.n	c80 <set_motor_left+0x30>
	{
		// need to configure PWM with opposite pins
		if(dir == 0)
     c5e:	2c00      	cmp	r4, #0
     c60:	d013      	beq.n	c8a <set_motor_left+0x3a>
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_CLOCK_CH, speed);
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_ANTI_CH, 0x00);
		}
		else
		{
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_CLOCK_CH, 0x00);
     c62:	4f10      	ldr	r7, [pc, #64]	; (ca4 <set_motor_left+0x54>)
     c64:	2200      	movs	r2, #0
     c66:	2102      	movs	r1, #2
     c68:	0038      	movs	r0, r7
     c6a:	4e0f      	ldr	r6, [pc, #60]	; (ca8 <set_motor_left+0x58>)
     c6c:	47b0      	blx	r6
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_ANTI_CH, speed);
     c6e:	002a      	movs	r2, r5
     c70:	2103      	movs	r1, #3
     c72:	0038      	movs	r0, r7
     c74:	47b0      	blx	r6
		}
		
	}
	old_left_speed	= speed;
     c76:	4b0d      	ldr	r3, [pc, #52]	; (cac <set_motor_left+0x5c>)
     c78:	701d      	strb	r5, [r3, #0]
	old_left_dir	= dir;
     c7a:	4b09      	ldr	r3, [pc, #36]	; (ca0 <set_motor_left+0x50>)
     c7c:	701c      	strb	r4, [r3, #0]
}
     c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if((old_left_dir != dir)||(old_left_speed != speed))
     c80:	4b0a      	ldr	r3, [pc, #40]	; (cac <set_motor_left+0x5c>)
     c82:	781b      	ldrb	r3, [r3, #0]
     c84:	428b      	cmp	r3, r1
     c86:	d1ea      	bne.n	c5e <set_motor_left+0xe>
     c88:	e7f5      	b.n	c76 <set_motor_left+0x26>
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_CLOCK_CH, speed);
     c8a:	4f06      	ldr	r7, [pc, #24]	; (ca4 <set_motor_left+0x54>)
     c8c:	002a      	movs	r2, r5
     c8e:	2102      	movs	r1, #2
     c90:	0038      	movs	r0, r7
     c92:	4e05      	ldr	r6, [pc, #20]	; (ca8 <set_motor_left+0x58>)
     c94:	47b0      	blx	r6
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_ANTI_CH, 0x00);
     c96:	2200      	movs	r2, #0
     c98:	2103      	movs	r1, #3
     c9a:	0038      	movs	r0, r7
     c9c:	47b0      	blx	r6
     c9e:	e7ea      	b.n	c76 <set_motor_left+0x26>
     ca0:	200000c4 	.word	0x200000c4
     ca4:	200000c8 	.word	0x200000c8
     ca8:	000016a5 	.word	0x000016a5
     cac:	200000c5 	.word	0x200000c5

00000cb0 <set_motor_right>:


void set_motor_right(uint8_t dir, uint8_t speed)
{
     cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cb2:	0004      	movs	r4, r0
     cb4:	000d      	movs	r5, r1
	static uint8_t old_right_dir = 0;
	static uint8_t old_right_speed = 0;
	if((old_right_dir != dir ) || (old_right_speed != speed))
     cb6:	4b12      	ldr	r3, [pc, #72]	; (d00 <set_motor_right+0x50>)
     cb8:	781b      	ldrb	r3, [r3, #0]
     cba:	4283      	cmp	r3, r0
     cbc:	d010      	beq.n	ce0 <set_motor_right+0x30>
	{
		// need to configure PWM with opposite pins
		if(dir == 0)
     cbe:	2c00      	cmp	r4, #0
     cc0:	d013      	beq.n	cea <set_motor_right+0x3a>
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_CLOCK_CH, speed);
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_ANTI_CH, 0x00);
		}
		else
		{
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_CLOCK_CH, 0x00);
     cc2:	4f10      	ldr	r7, [pc, #64]	; (d04 <set_motor_right+0x54>)
     cc4:	2200      	movs	r2, #0
     cc6:	2100      	movs	r1, #0
     cc8:	0038      	movs	r0, r7
     cca:	4e0f      	ldr	r6, [pc, #60]	; (d08 <set_motor_right+0x58>)
     ccc:	47b0      	blx	r6
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_ANTI_CH, speed);
     cce:	002a      	movs	r2, r5
     cd0:	2101      	movs	r1, #1
     cd2:	0038      	movs	r0, r7
     cd4:	47b0      	blx	r6
		}
	}
	old_right_speed     = speed;
     cd6:	4b0d      	ldr	r3, [pc, #52]	; (d0c <set_motor_right+0x5c>)
     cd8:	701d      	strb	r5, [r3, #0]
	old_right_dir		= dir;
     cda:	4b09      	ldr	r3, [pc, #36]	; (d00 <set_motor_right+0x50>)
     cdc:	701c      	strb	r4, [r3, #0]
}
     cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if((old_right_dir != dir ) || (old_right_speed != speed))
     ce0:	4b0a      	ldr	r3, [pc, #40]	; (d0c <set_motor_right+0x5c>)
     ce2:	781b      	ldrb	r3, [r3, #0]
     ce4:	428b      	cmp	r3, r1
     ce6:	d1ea      	bne.n	cbe <set_motor_right+0xe>
     ce8:	e7f5      	b.n	cd6 <set_motor_right+0x26>
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_CLOCK_CH, speed);
     cea:	4f06      	ldr	r7, [pc, #24]	; (d04 <set_motor_right+0x54>)
     cec:	002a      	movs	r2, r5
     cee:	2100      	movs	r1, #0
     cf0:	0038      	movs	r0, r7
     cf2:	4e05      	ldr	r6, [pc, #20]	; (d08 <set_motor_right+0x58>)
     cf4:	47b0      	blx	r6
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_ANTI_CH, 0x00);
     cf6:	2200      	movs	r2, #0
     cf8:	2101      	movs	r1, #1
     cfa:	0038      	movs	r0, r7
     cfc:	47b0      	blx	r6
     cfe:	e7ea      	b.n	cd6 <set_motor_right+0x26>
     d00:	200000c6 	.word	0x200000c6
     d04:	200000c8 	.word	0x200000c8
     d08:	000016a5 	.word	0x000016a5
     d0c:	200000c7 	.word	0x200000c7

00000d10 <configure_motors>:
	set_motor_right(0,0);
}


void configure_motors()
{
     d10:	b510      	push	{r4, lr}
	config_timer_waveform();
     d12:	4b01      	ldr	r3, [pc, #4]	; (d18 <configure_motors+0x8>)
     d14:	4798      	blx	r3
     d16:	bd10      	pop	{r4, pc}
     d18:	00000ba9 	.word	0x00000ba9

00000d1c <init_power_pin>:
#include "power_on_off.h"
#include "status_LED.h"


void init_power_pin()
{
     d1c:	b570      	push	{r4, r5, r6, lr}
     d1e:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
     d20:	ac01      	add	r4, sp, #4
     d22:	2301      	movs	r3, #1
     d24:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     d26:	2600      	movs	r6, #0
     d28:	70a6      	strb	r6, [r4, #2]
	struct port_config power_button_config;
	port_get_config_defaults(&power_button_config);
	power_button_config.direction  = PORT_PIN_DIR_OUTPUT;
     d2a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(POWER_ON_BTN,&power_button_config);
     d2c:	0021      	movs	r1, r4
     d2e:	2009      	movs	r0, #9
     d30:	4d04      	ldr	r5, [pc, #16]	; (d44 <init_power_pin+0x28>)
     d32:	47a8      	blx	r5
	
	power_button_config.direction  = PORT_PIN_DIR_INPUT;
     d34:	7026      	strb	r6, [r4, #0]
	power_button_config.input_pull = SYSTEM_PINMUX_PIN_PULL_DOWN;
     d36:	2302      	movs	r3, #2
     d38:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(POWER_OFF_BTN,&power_button_config);
     d3a:	0021      	movs	r1, r4
     d3c:	200e      	movs	r0, #14
     d3e:	47a8      	blx	r5
}
     d40:	b002      	add	sp, #8
     d42:	bd70      	pop	{r4, r5, r6, pc}
     d44:	000020a1 	.word	0x000020a1

00000d48 <power_button_on>:


void power_button_on()
{
     d48:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
     d4a:	2280      	movs	r2, #128	; 0x80
     d4c:	0092      	lsls	r2, r2, #2
     d4e:	4b04      	ldr	r3, [pc, #16]	; (d60 <power_button_on+0x18>)
     d50:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(POWER_ON_BTN, true);
	status_led_red  ( false );
     d52:	2000      	movs	r0, #0
     d54:	4b03      	ldr	r3, [pc, #12]	; (d64 <power_button_on+0x1c>)
     d56:	4798      	blx	r3
	status_led_green( true );
     d58:	2001      	movs	r0, #1
     d5a:	4b03      	ldr	r3, [pc, #12]	; (d68 <power_button_on+0x20>)
     d5c:	4798      	blx	r3
	//port_pin_set_output_level(RGB_R_PIN, true);
}
     d5e:	bd10      	pop	{r4, pc}
     d60:	41004400 	.word	0x41004400
     d64:	00001169 	.word	0x00001169
     d68:	0000114d 	.word	0x0000114d

00000d6c <power_off>:

void power_off()
{
     d6c:	b510      	push	{r4, lr}
	volatile static int count_test = 0;
	status_led_green( false );
     d6e:	2000      	movs	r0, #0
     d70:	4b08      	ldr	r3, [pc, #32]	; (d94 <power_off+0x28>)
     d72:	4798      	blx	r3
	status_led_red( true );
     d74:	2001      	movs	r0, #1
     d76:	4b08      	ldr	r3, [pc, #32]	; (d98 <power_off+0x2c>)
     d78:	4798      	blx	r3
	delay_cycles_ms(1000);
     d7a:	20fa      	movs	r0, #250	; 0xfa
     d7c:	0080      	lsls	r0, r0, #2
     d7e:	4b07      	ldr	r3, [pc, #28]	; (d9c <power_off+0x30>)
     d80:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     d82:	2280      	movs	r2, #128	; 0x80
     d84:	0092      	lsls	r2, r2, #2
     d86:	4b06      	ldr	r3, [pc, #24]	; (da0 <power_off+0x34>)
     d88:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(POWER_ON_BTN, false);
	count_test = count_test + 1;
     d8a:	4a06      	ldr	r2, [pc, #24]	; (da4 <power_off+0x38>)
     d8c:	6813      	ldr	r3, [r2, #0]
     d8e:	3301      	adds	r3, #1
     d90:	6013      	str	r3, [r2, #0]
	
	
}
     d92:	bd10      	pop	{r4, pc}
     d94:	0000114d 	.word	0x0000114d
     d98:	00001169 	.word	0x00001169
     d9c:	00002075 	.word	0x00002075
     da0:	41004400 	.word	0x41004400
     da4:	2000010c 	.word	0x2000010c

00000da8 <check_power_off_button>:
	//stop_all_actuators();
	power_off();
}

void check_power_off_button()
{
     da8:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
     daa:	4b10      	ldr	r3, [pc, #64]	; (dec <check_power_off_button+0x44>)
     dac:	6a1b      	ldr	r3, [r3, #32]
	power_button_value = port_pin_get_input_level(POWER_OFF_BTN);
	//volatile const uint32_t *input_port        = INPUT_REG_ADDRESS;
	//power_off_button = *input_port & MASK_POWER_OFF;
	//if(power_off_button == POWER_OFF_VALUE )
	//{
	if(power_button_value == true)
     dae:	045b      	lsls	r3, r3, #17
     db0:	d514      	bpl.n	ddc <check_power_off_button+0x34>
	{
		count_power_button = count_power_button + 1 ;
     db2:	4a0f      	ldr	r2, [pc, #60]	; (df0 <check_power_off_button+0x48>)
     db4:	8813      	ldrh	r3, [r2, #0]
     db6:	3301      	adds	r3, #1
     db8:	b29b      	uxth	r3, r3
     dba:	8013      	strh	r3, [r2, #0]
		if(count_power_button > POWER_OFF_LIMIT)
     dbc:	8813      	ldrh	r3, [r2, #0]
     dbe:	b29b      	uxth	r3, r3
     dc0:	22c8      	movs	r2, #200	; 0xc8
     dc2:	0092      	lsls	r2, r2, #2
     dc4:	4293      	cmp	r3, r2
     dc6:	d90f      	bls.n	de8 <check_power_off_button+0x40>
		{
			if(power_button_value_off == true)
     dc8:	4b0a      	ldr	r3, [pc, #40]	; (df4 <check_power_off_button+0x4c>)
     dca:	681b      	ldr	r3, [r3, #0]
     dcc:	2b01      	cmp	r3, #1
     dce:	d10b      	bne.n	de8 <check_power_off_button+0x40>
	power_off();
     dd0:	4b09      	ldr	r3, [pc, #36]	; (df8 <check_power_off_button+0x50>)
     dd2:	4798      	blx	r3
			{
				system_power_off();
				count_power_button = 0;
     dd4:	2200      	movs	r2, #0
     dd6:	4b06      	ldr	r3, [pc, #24]	; (df0 <check_power_off_button+0x48>)
     dd8:	801a      	strh	r2, [r3, #0]
     dda:	e005      	b.n	de8 <check_power_off_button+0x40>
			
		}
	}
	else
	{
		count_power_button = 0;
     ddc:	2200      	movs	r2, #0
     dde:	4b04      	ldr	r3, [pc, #16]	; (df0 <check_power_off_button+0x48>)
     de0:	801a      	strh	r2, [r3, #0]
		power_button_value_off = true;
     de2:	3201      	adds	r2, #1
     de4:	4b03      	ldr	r3, [pc, #12]	; (df4 <check_power_off_button+0x4c>)
     de6:	601a      	str	r2, [r3, #0]
	}
}
     de8:	bd10      	pop	{r4, pc}
     dea:	46c0      	nop			; (mov r8, r8)
     dec:	41004400 	.word	0x41004400
     df0:	20000108 	.word	0x20000108
     df4:	20000110 	.word	0x20000110
     df8:	00000d6d 	.word	0x00000d6d

00000dfc <power_button_init>:


void power_button_init()
{
     dfc:	b510      	push	{r4, lr}
	delay_cycles_ms(2000);
     dfe:	20fa      	movs	r0, #250	; 0xfa
     e00:	00c0      	lsls	r0, r0, #3
     e02:	4b03      	ldr	r3, [pc, #12]	; (e10 <power_button_init+0x14>)
     e04:	4798      	blx	r3
	init_power_pin();
     e06:	4b03      	ldr	r3, [pc, #12]	; (e14 <power_button_init+0x18>)
     e08:	4798      	blx	r3
	power_button_on();
     e0a:	4b03      	ldr	r3, [pc, #12]	; (e18 <power_button_init+0x1c>)
     e0c:	4798      	blx	r3
     e0e:	bd10      	pop	{r4, pc}
     e10:	00002075 	.word	0x00002075
     e14:	00000d1d 	.word	0x00000d1d
     e18:	00000d49 	.word	0x00000d49

00000e1c <configure_spi_slave>:
/********************************************************************************************
SPI transfer Mode 0
Pre-load is important it helps during a reset to have the sensor 0 and sensor 1 value loaded
********************************************************************************************/
void configure_spi_slave(void)
{
     e1c:	b570      	push	{r4, r5, r6, lr}
     e1e:	b08e      	sub	sp, #56	; 0x38
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
	config->data_order       = SPI_DATA_ORDER_MSB;
     e20:	2400      	movs	r4, #0
     e22:	9401      	str	r4, [sp, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     e24:	9402      	str	r4, [sp, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     e26:	23c0      	movs	r3, #192	; 0xc0
     e28:	039b      	lsls	r3, r3, #14
     e2a:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     e2c:	466b      	mov	r3, sp
     e2e:	741c      	strb	r4, [r3, #16]
	config->run_in_standby   = false;
     e30:	745c      	strb	r4, [r3, #17]
	config->receiver_enable  = true;
     e32:	2501      	movs	r5, #1
     e34:	749d      	strb	r5, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     e36:	74dd      	strb	r5, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     e38:	751c      	strb	r4, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     e3a:	2324      	movs	r3, #36	; 0x24
     e3c:	466a      	mov	r2, sp
     e3e:	54d4      	strb	r4, [r2, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     e40:	220c      	movs	r2, #12
     e42:	2100      	movs	r1, #0
     e44:	a806      	add	r0, sp, #24
     e46:	4b14      	ldr	r3, [pc, #80]	; (e98 <configure_spi_slave+0x7c>)
     e48:	4798      	blx	r3
	struct spi_config config_spi_slave;
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_slave);
	config_spi_slave.transfer_mode = SPI_TRANSFER_MODE_0;
	config_spi_slave.mode = SPI_MODE_SLAVE;
     e4a:	466b      	mov	r3, sp
     e4c:	701c      	strb	r4, [r3, #0]
	config_spi_slave.mode_specific.slave.preload_enable = true;
     e4e:	2320      	movs	r3, #32
     e50:	466a      	mov	r2, sp
     e52:	54d5      	strb	r5, [r2, r3]
	config_spi_slave.mode_specific.slave.frame_format = SPI_FRAME_FORMAT_SPI_FRAME;
     e54:	9406      	str	r4, [sp, #24]
	config_spi_slave.mux_setting = SPI_SLAVE_MUX_SETTING;
	config_spi_slave.pinmux_pad0 = SPI_SLAVE_PINMUX_PAD0;
     e56:	4b11      	ldr	r3, [pc, #68]	; (e9c <configure_spi_slave+0x80>)
     e58:	930a      	str	r3, [sp, #40]	; 0x28
	config_spi_slave.pinmux_pad1 = SPI_SLAVE_PINMUX_PAD1;
     e5a:	4b11      	ldr	r3, [pc, #68]	; (ea0 <configure_spi_slave+0x84>)
     e5c:	930b      	str	r3, [sp, #44]	; 0x2c
	config_spi_slave.pinmux_pad2 = SPI_SLAVE_PINMUX_PAD2;
     e5e:	4b11      	ldr	r3, [pc, #68]	; (ea4 <configure_spi_slave+0x88>)
     e60:	930c      	str	r3, [sp, #48]	; 0x30
	config_spi_slave.pinmux_pad3 = SPI_SLAVE_PINMUX_PAD3;
     e62:	4b11      	ldr	r3, [pc, #68]	; (ea8 <configure_spi_slave+0x8c>)
     e64:	930d      	str	r3, [sp, #52]	; 0x34
	spi_init(&spi_slave_instance,  SLAVE_SPI_MODULE, &config_spi_slave);
     e66:	4e11      	ldr	r6, [pc, #68]	; (eac <configure_spi_slave+0x90>)
     e68:	4911      	ldr	r1, [pc, #68]	; (eb0 <configure_spi_slave+0x94>)
     e6a:	0030      	movs	r0, r6
     e6c:	4b11      	ldr	r3, [pc, #68]	; (eb4 <configure_spi_slave+0x98>)
     e6e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e70:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     e72:	0020      	movs	r0, r4
     e74:	4b10      	ldr	r3, [pc, #64]	; (eb8 <configure_spi_slave+0x9c>)
     e76:	4798      	blx	r3
     e78:	231f      	movs	r3, #31
     e7a:	4018      	ands	r0, r3
     e7c:	4085      	lsls	r5, r0
     e7e:	4b0f      	ldr	r3, [pc, #60]	; (ebc <configure_spi_slave+0xa0>)
     e80:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     e82:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
     e84:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     e86:	2b00      	cmp	r3, #0
     e88:	d1fc      	bne.n	e84 <configure_spi_slave+0x68>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     e8a:	6823      	ldr	r3, [r4, #0]
     e8c:	2202      	movs	r2, #2
     e8e:	4313      	orrs	r3, r2
     e90:	6023      	str	r3, [r4, #0]
	spi_enable(&spi_slave_instance);
}
     e92:	b00e      	add	sp, #56	; 0x38
     e94:	bd70      	pop	{r4, r5, r6, pc}
     e96:	46c0      	nop			; (mov r8, r8)
     e98:	00002d4d 	.word	0x00002d4d
     e9c:	00160002 	.word	0x00160002
     ea0:	00170002 	.word	0x00170002
     ea4:	00180002 	.word	0x00180002
     ea8:	00190002 	.word	0x00190002
     eac:	20000610 	.word	0x20000610
     eb0:	42000c00 	.word	0x42000c00
     eb4:	00001ac5 	.word	0x00001ac5
     eb8:	00001f19 	.word	0x00001f19
     ebc:	e000e100 	.word	0xe000e100

00000ec0 <check_buffer>:
/********************************************************************************************
Checks the ring buffer if there any new data in the buffer if it is present it will be
transferred into the temp_receive global variable and we also look into the length of commands
********************************************************************************************/
void check_buffer()
{
     ec0:	b510      	push	{r4, lr}
	uint8_t i =0;
	if(tail_pointer == head_pointer)
     ec2:	4b1c      	ldr	r3, [pc, #112]	; (f34 <check_buffer+0x74>)
     ec4:	781b      	ldrb	r3, [r3, #0]
     ec6:	4a1c      	ldr	r2, [pc, #112]	; (f38 <check_buffer+0x78>)
     ec8:	7812      	ldrb	r2, [r2, #0]
     eca:	b2db      	uxtb	r3, r3
     ecc:	4293      	cmp	r3, r2
     ece:	d018      	beq.n	f02 <check_buffer+0x42>
		head_pointer = 0;
	}
	else
	{
		//Transfer receive
		if(ring_buffer[tail_pointer] == 0xEA )
     ed0:	4b18      	ldr	r3, [pc, #96]	; (f34 <check_buffer+0x74>)
     ed2:	781b      	ldrb	r3, [r3, #0]
     ed4:	b2db      	uxtb	r3, r3
     ed6:	4a19      	ldr	r2, [pc, #100]	; (f3c <check_buffer+0x7c>)
     ed8:	5cd3      	ldrb	r3, [r2, r3]
     eda:	b2db      	uxtb	r3, r3
     edc:	2200      	movs	r2, #0
     ede:	2bea      	cmp	r3, #234	; 0xea
     ee0:	d017      	beq.n	f12 <check_buffer+0x52>
		}
		else
		{
			for(i=0; i<LENGTH_SINGLE;i++)
			{
				temp_receive[i] = ring_buffer[tail_pointer];
     ee2:	4914      	ldr	r1, [pc, #80]	; (f34 <check_buffer+0x74>)
     ee4:	4c15      	ldr	r4, [pc, #84]	; (f3c <check_buffer+0x7c>)
     ee6:	4816      	ldr	r0, [pc, #88]	; (f40 <check_buffer+0x80>)
     ee8:	780b      	ldrb	r3, [r1, #0]
     eea:	b2db      	uxtb	r3, r3
     eec:	5ce3      	ldrb	r3, [r4, r3]
     eee:	b2db      	uxtb	r3, r3
     ef0:	5483      	strb	r3, [r0, r2]
				tail_pointer++;
     ef2:	780b      	ldrb	r3, [r1, #0]
     ef4:	3301      	adds	r3, #1
     ef6:	b2db      	uxtb	r3, r3
     ef8:	700b      	strb	r3, [r1, #0]
     efa:	3201      	adds	r2, #1
			for(i=0; i<LENGTH_SINGLE;i++)
     efc:	2a07      	cmp	r2, #7
     efe:	d1f3      	bne.n	ee8 <check_buffer+0x28>
			}
		}
	}

}
     f00:	bd10      	pop	{r4, pc}
		transfer_complete_spi_slave = false;
     f02:	2300      	movs	r3, #0
     f04:	4a0f      	ldr	r2, [pc, #60]	; (f44 <check_buffer+0x84>)
     f06:	7013      	strb	r3, [r2, #0]
		tail_pointer = 0;
     f08:	4a0a      	ldr	r2, [pc, #40]	; (f34 <check_buffer+0x74>)
     f0a:	7013      	strb	r3, [r2, #0]
		head_pointer = 0;
     f0c:	4a0a      	ldr	r2, [pc, #40]	; (f38 <check_buffer+0x78>)
     f0e:	7013      	strb	r3, [r2, #0]
     f10:	e7f6      	b.n	f00 <check_buffer+0x40>
				temp_receive[i] = ring_buffer[tail_pointer];
     f12:	4908      	ldr	r1, [pc, #32]	; (f34 <check_buffer+0x74>)
     f14:	4c09      	ldr	r4, [pc, #36]	; (f3c <check_buffer+0x7c>)
     f16:	480a      	ldr	r0, [pc, #40]	; (f40 <check_buffer+0x80>)
     f18:	780b      	ldrb	r3, [r1, #0]
     f1a:	b2db      	uxtb	r3, r3
     f1c:	5ce3      	ldrb	r3, [r4, r3]
     f1e:	b2db      	uxtb	r3, r3
     f20:	5483      	strb	r3, [r0, r2]
				tail_pointer++;
     f22:	780b      	ldrb	r3, [r1, #0]
     f24:	3301      	adds	r3, #1
     f26:	b2db      	uxtb	r3, r3
     f28:	700b      	strb	r3, [r1, #0]
     f2a:	3201      	adds	r2, #1
			for(i=0; i<LENGTH_SET_ALL;i++)
     f2c:	2a0d      	cmp	r2, #13
     f2e:	d1f3      	bne.n	f18 <check_buffer+0x58>
     f30:	e7e6      	b.n	f00 <check_buffer+0x40>
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	20000116 	.word	0x20000116
     f38:	20000114 	.word	0x20000114
     f3c:	2000064c 	.word	0x2000064c
     f40:	200007f4 	.word	0x200007f4
     f44:	20000150 	.word	0x20000150

00000f48 <configure_spi_slave_callbacks>:
}



void configure_spi_slave_callbacks(void)
{
     f48:	b510      	push	{r4, lr}
	spi_register_callback(&spi_slave_instance, spi_slave_callback,SPI_CALLBACK_BUFFER_TRANSCEIVED);
     f4a:	4c06      	ldr	r4, [pc, #24]	; (f64 <configure_spi_slave_callbacks+0x1c>)
     f4c:	2202      	movs	r2, #2
     f4e:	4906      	ldr	r1, [pc, #24]	; (f68 <configure_spi_slave_callbacks+0x20>)
     f50:	0020      	movs	r0, r4
     f52:	4b06      	ldr	r3, [pc, #24]	; (f6c <configure_spi_slave_callbacks+0x24>)
     f54:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
     f56:	2237      	movs	r2, #55	; 0x37
     f58:	5ca3      	ldrb	r3, [r4, r2]
     f5a:	2104      	movs	r1, #4
     f5c:	430b      	orrs	r3, r1
     f5e:	54a3      	strb	r3, [r4, r2]
	spi_enable_callback(&spi_slave_instance, SPI_CALLBACK_BUFFER_TRANSCEIVED);
}
     f60:	bd10      	pop	{r4, pc}
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	20000610 	.word	0x20000610
     f68:	00000fd1 	.word	0x00000fd1
     f6c:	00001cd9 	.word	0x00001cd9

00000f70 <spi_slave_init>:


void spi_slave_init()
{
     f70:	b5f0      	push	{r4, r5, r6, r7, lr}
     f72:	b083      	sub	sp, #12
	volatile enum status_code error_code = 0x10;
     f74:	2210      	movs	r2, #16
     f76:	466b      	mov	r3, sp
     f78:	71da      	strb	r2, [r3, #7]
	static bool init = false;
	const uint8_t firmware_version[4] = {0x00,0x00,DEVICE_ID_HARDWARE,DEVICE_ID_FIRMWARE};
	//Initial values are the firmware version
	configure_spi_slave();
     f7a:	4b0e      	ldr	r3, [pc, #56]	; (fb4 <spi_slave_init+0x44>)
     f7c:	4798      	blx	r3
	configure_spi_slave_callbacks();
     f7e:	4b0e      	ldr	r3, [pc, #56]	; (fb8 <spi_slave_init+0x48>)
     f80:	4798      	blx	r3
	if(init == false)
     f82:	4b0e      	ldr	r3, [pc, #56]	; (fbc <spi_slave_init+0x4c>)
     f84:	781b      	ldrb	r3, [r3, #0]
     f86:	2b00      	cmp	r3, #0
     f88:	d111      	bne.n	fae <spi_slave_init+0x3e>
	{
		init = true;
     f8a:	2201      	movs	r2, #1
     f8c:	4b0b      	ldr	r3, [pc, #44]	; (fbc <spi_slave_init+0x4c>)
     f8e:	701a      	strb	r2, [r3, #0]
		do
		{
			error_code = spi_transceive_buffer_job(&spi_slave_instance, sensor_outputs, received_value,SPI_LENGTH);
     f90:	4e0b      	ldr	r6, [pc, #44]	; (fc0 <spi_slave_init+0x50>)
     f92:	4d0c      	ldr	r5, [pc, #48]	; (fc4 <spi_slave_init+0x54>)
     f94:	4c0c      	ldr	r4, [pc, #48]	; (fc8 <spi_slave_init+0x58>)
     f96:	2307      	movs	r3, #7
     f98:	0032      	movs	r2, r6
     f9a:	0029      	movs	r1, r5
     f9c:	0020      	movs	r0, r4
     f9e:	4f0b      	ldr	r7, [pc, #44]	; (fcc <spi_slave_init+0x5c>)
     fa0:	47b8      	blx	r7
     fa2:	466b      	mov	r3, sp
     fa4:	71d8      	strb	r0, [r3, #7]
     fa6:	3307      	adds	r3, #7
		} while (error_code != STATUS_OK );
     fa8:	781b      	ldrb	r3, [r3, #0]
     faa:	2b00      	cmp	r3, #0
     fac:	d1f3      	bne.n	f96 <spi_slave_init+0x26>
	}
}
     fae:	b003      	add	sp, #12
     fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fb2:	46c0      	nop			; (mov r8, r8)
     fb4:	00000e1d 	.word	0x00000e1d
     fb8:	00000f49 	.word	0x00000f49
     fbc:	20000115 	.word	0x20000115
     fc0:	200007cc 	.word	0x200007cc
     fc4:	200007e0 	.word	0x200007e0
     fc8:	20000610 	.word	0x20000610
     fcc:	00001cf1 	.word	0x00001cf1

00000fd0 <spi_slave_callback>:
{
     fd0:	b570      	push	{r4, r5, r6, lr}
	transfer_complete_spi_slave = true;
     fd2:	2201      	movs	r2, #1
     fd4:	4b21      	ldr	r3, [pc, #132]	; (105c <spi_slave_callback+0x8c>)
     fd6:	701a      	strb	r2, [r3, #0]
	serial_timeout_count = 0;
     fd8:	2200      	movs	r2, #0
     fda:	4b21      	ldr	r3, [pc, #132]	; (1060 <spi_slave_callback+0x90>)
     fdc:	701a      	strb	r2, [r3, #0]
	if(spi_reset_1 == true )
     fde:	4b21      	ldr	r3, [pc, #132]	; (1064 <spi_slave_callback+0x94>)
     fe0:	781b      	ldrb	r3, [r3, #0]
     fe2:	2b00      	cmp	r3, #0
     fe4:	d11b      	bne.n	101e <spi_slave_callback+0x4e>
		if(received_value[0] == 0xEA)
     fe6:	4b20      	ldr	r3, [pc, #128]	; (1068 <spi_slave_callback+0x98>)
     fe8:	781b      	ldrb	r3, [r3, #0]
     fea:	b2db      	uxtb	r3, r3
     fec:	2200      	movs	r2, #0
     fee:	2bea      	cmp	r3, #234	; 0xea
     ff0:	d024      	beq.n	103c <spi_slave_callback+0x6c>
				ring_buffer[head_pointer] = received_value[i];
     ff2:	481e      	ldr	r0, [pc, #120]	; (106c <spi_slave_callback+0x9c>)
     ff4:	4d1c      	ldr	r5, [pc, #112]	; (1068 <spi_slave_callback+0x98>)
     ff6:	4c1e      	ldr	r4, [pc, #120]	; (1070 <spi_slave_callback+0xa0>)
     ff8:	7803      	ldrb	r3, [r0, #0]
     ffa:	b2db      	uxtb	r3, r3
     ffc:	5ca9      	ldrb	r1, [r5, r2]
     ffe:	b2c9      	uxtb	r1, r1
    1000:	54e1      	strb	r1, [r4, r3]
				head_pointer++;
    1002:	7803      	ldrb	r3, [r0, #0]
    1004:	3301      	adds	r3, #1
    1006:	b2db      	uxtb	r3, r3
    1008:	7003      	strb	r3, [r0, #0]
    100a:	3201      	adds	r2, #1
			for(i=0 ; i<LENGTH_SINGLE;i++)
    100c:	2a07      	cmp	r2, #7
    100e:	d1f3      	bne.n	ff8 <spi_slave_callback+0x28>
		spi_transceive_buffer_job(&spi_slave_instance, sensor_outputs, received_value,SPI_LENGTH);
    1010:	2307      	movs	r3, #7
    1012:	4a15      	ldr	r2, [pc, #84]	; (1068 <spi_slave_callback+0x98>)
    1014:	4917      	ldr	r1, [pc, #92]	; (1074 <spi_slave_callback+0xa4>)
    1016:	4818      	ldr	r0, [pc, #96]	; (1078 <spi_slave_callback+0xa8>)
    1018:	4c18      	ldr	r4, [pc, #96]	; (107c <spi_slave_callback+0xac>)
    101a:	47a0      	blx	r4
}
    101c:	bd70      	pop	{r4, r5, r6, pc}
		spi_reset_1 = false;
    101e:	4b11      	ldr	r3, [pc, #68]	; (1064 <spi_slave_callback+0x94>)
    1020:	701a      	strb	r2, [r3, #0]
		spi_reset(&spi_slave_instance);
    1022:	4c15      	ldr	r4, [pc, #84]	; (1078 <spi_slave_callback+0xa8>)
    1024:	0020      	movs	r0, r4
    1026:	4b16      	ldr	r3, [pc, #88]	; (1080 <spi_slave_callback+0xb0>)
    1028:	4798      	blx	r3
		spi_slave_init();
    102a:	4b16      	ldr	r3, [pc, #88]	; (1084 <spi_slave_callback+0xb4>)
    102c:	4798      	blx	r3
		spi_transceive_buffer_job(&spi_slave_instance, sensor_outputs, received_value,SPI_LENGTH);
    102e:	2307      	movs	r3, #7
    1030:	4a0d      	ldr	r2, [pc, #52]	; (1068 <spi_slave_callback+0x98>)
    1032:	4910      	ldr	r1, [pc, #64]	; (1074 <spi_slave_callback+0xa4>)
    1034:	0020      	movs	r0, r4
    1036:	4c11      	ldr	r4, [pc, #68]	; (107c <spi_slave_callback+0xac>)
    1038:	47a0      	blx	r4
    103a:	e7ef      	b.n	101c <spi_slave_callback+0x4c>
				ring_buffer[head_pointer] = received_value[i];
    103c:	480b      	ldr	r0, [pc, #44]	; (106c <spi_slave_callback+0x9c>)
    103e:	4d0a      	ldr	r5, [pc, #40]	; (1068 <spi_slave_callback+0x98>)
    1040:	4c0b      	ldr	r4, [pc, #44]	; (1070 <spi_slave_callback+0xa0>)
    1042:	7803      	ldrb	r3, [r0, #0]
    1044:	b2db      	uxtb	r3, r3
    1046:	5ca9      	ldrb	r1, [r5, r2]
    1048:	b2c9      	uxtb	r1, r1
    104a:	54e1      	strb	r1, [r4, r3]
				head_pointer++;
    104c:	7803      	ldrb	r3, [r0, #0]
    104e:	3301      	adds	r3, #1
    1050:	b2db      	uxtb	r3, r3
    1052:	7003      	strb	r3, [r0, #0]
    1054:	3201      	adds	r2, #1
			for(i=0; i<LENGTH_SET_ALL;i++)
    1056:	2a0d      	cmp	r2, #13
    1058:	d1f3      	bne.n	1042 <spi_slave_callback+0x72>
    105a:	e7d9      	b.n	1010 <spi_slave_callback+0x40>
    105c:	20000150 	.word	0x20000150
    1060:	2000014d 	.word	0x2000014d
    1064:	2000014e 	.word	0x2000014e
    1068:	200007cc 	.word	0x200007cc
    106c:	20000114 	.word	0x20000114
    1070:	2000064c 	.word	0x2000064c
    1074:	200007e0 	.word	0x200007e0
    1078:	20000610 	.word	0x20000610
    107c:	00001cf1 	.word	0x00001cf1
    1080:	00001a79 	.word	0x00001a79
    1084:	00000f71 	.word	0x00000f71

00001088 <spi_main_loop>:
}



void spi_main_loop()
{
    1088:	b530      	push	{r4, r5, lr}
    108a:	b083      	sub	sp, #12
	
	volatile enum status_code error_code = 0x10;
    108c:	2210      	movs	r2, #16
    108e:	466b      	mov	r3, sp
    1090:	71da      	strb	r2, [r3, #7]
	uint16_t left_encoder_tick_input  = 0;
	uint8_t i    = 0;
	uint8_t rw   = 0;
	uint8_t mode = 0;
	static bool test = true;
	transmit_value[0] = 0x88;
    1092:	4b19      	ldr	r3, [pc, #100]	; (10f8 <spi_main_loop+0x70>)
    1094:	3278      	adds	r2, #120	; 0x78
    1096:	701a      	strb	r2, [r3, #0]
	transmit_value[1] = 0xAA;
    1098:	3222      	adds	r2, #34	; 0x22
    109a:	705a      	strb	r2, [r3, #1]
	transmit_value[2] = 0xBB;
    109c:	3211      	adds	r2, #17
    109e:	709a      	strb	r2, [r3, #2]
	transmit_value[3] = 0xCC;
    10a0:	3211      	adds	r2, #17
    10a2:	70da      	strb	r2, [r3, #3]
	//check_timeout();
	if(transfer_complete_spi_slave == true)
    10a4:	4b15      	ldr	r3, [pc, #84]	; (10fc <spi_main_loop+0x74>)
    10a6:	781b      	ldrb	r3, [r3, #0]
    10a8:	2b00      	cmp	r3, #0
    10aa:	d101      	bne.n	10b0 <spi_main_loop+0x28>
				break;
		}	
		check_buffer();	//Look for more SPI commands if occurred , while completing one operation
	}
	
    10ac:	b003      	add	sp, #12
    10ae:	bd30      	pop	{r4, r5, pc}
		check_buffer();
    10b0:	4b13      	ldr	r3, [pc, #76]	; (1100 <spi_main_loop+0x78>)
    10b2:	4798      	blx	r3
		mode = temp_receive[0];
    10b4:	4b13      	ldr	r3, [pc, #76]	; (1104 <spi_main_loop+0x7c>)
    10b6:	781b      	ldrb	r3, [r3, #0]
    10b8:	b2db      	uxtb	r3, r3
		switch(mode)
    10ba:	2b10      	cmp	r3, #16
    10bc:	d004      	beq.n	10c8 <spi_main_loop+0x40>
    10be:	2be1      	cmp	r3, #225	; 0xe1
    10c0:	d006      	beq.n	10d0 <spi_main_loop+0x48>
		check_buffer();	//Look for more SPI commands if occurred , while completing one operation
    10c2:	4b0f      	ldr	r3, [pc, #60]	; (1100 <spi_main_loop+0x78>)
    10c4:	4798      	blx	r3
    10c6:	e7f1      	b.n	10ac <spi_main_loop+0x24>
				update_PID_values(temp_receive+1);
    10c8:	480f      	ldr	r0, [pc, #60]	; (1108 <spi_main_loop+0x80>)
    10ca:	4b10      	ldr	r3, [pc, #64]	; (110c <spi_main_loop+0x84>)
    10cc:	4798      	blx	r3
				break;
    10ce:	e7f8      	b.n	10c2 <spi_main_loop+0x3a>
				left_encoder_tick_input    = (temp_receive[2]<<8)&0xFF00;
    10d0:	4a0c      	ldr	r2, [pc, #48]	; (1104 <spi_main_loop+0x7c>)
    10d2:	7894      	ldrb	r4, [r2, #2]
    10d4:	0224      	lsls	r4, r4, #8
				left_encoder_tick_input   |= (temp_receive[3]);
    10d6:	78d1      	ldrb	r1, [r2, #3]
				right_encoder_tick_input   = (temp_receive[5]<<8)&0xFF00;
    10d8:	7955      	ldrb	r5, [r2, #5]
    10da:	022d      	lsls	r5, r5, #8
				right_encoder_tick_input  |= (temp_receive[6]);
    10dc:	7993      	ldrb	r3, [r2, #6]
				move_motor(temp_receive[1], left_encoder_tick_input , temp_receive[4] , right_encoder_tick_input);
    10de:	7850      	ldrb	r0, [r2, #1]
    10e0:	7912      	ldrb	r2, [r2, #4]
    10e2:	432b      	orrs	r3, r5
    10e4:	1e55      	subs	r5, r2, #1
    10e6:	41aa      	sbcs	r2, r5
    10e8:	b2d2      	uxtb	r2, r2
    10ea:	4321      	orrs	r1, r4
    10ec:	1e44      	subs	r4, r0, #1
    10ee:	41a0      	sbcs	r0, r4
    10f0:	b2c0      	uxtb	r0, r0
    10f2:	4c07      	ldr	r4, [pc, #28]	; (1110 <spi_main_loop+0x88>)
    10f4:	47a0      	blx	r4
				break;
    10f6:	e7e4      	b.n	10c2 <spi_main_loop+0x3a>
    10f8:	20000808 	.word	0x20000808
    10fc:	20000150 	.word	0x20000150
    1100:	00000ec1 	.word	0x00000ec1
    1104:	200007f4 	.word	0x200007f4
    1108:	200007f5 	.word	0x200007f5
    110c:	0000092d 	.word	0x0000092d
    1110:	00000961 	.word	0x00000961

00001114 <status_led_init>:
 *  Author: raghu
 */ 
#include <asf.h>
#include "status_LED.h"
void status_led_init()
{
    1114:	b530      	push	{r4, r5, lr}
    1116:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1118:	ac01      	add	r4, sp, #4
    111a:	2301      	movs	r3, #1
    111c:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    111e:	2200      	movs	r2, #0
    1120:	70a2      	strb	r2, [r4, #2]
	//Output initialization
	struct port_config power_button_config;
	port_get_config_defaults(&power_button_config);
	power_button_config.direction  = PORT_PIN_DIR_OUTPUT;
    1122:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(BAT_GREEN,&power_button_config);
    1124:	0021      	movs	r1, r4
    1126:	201e      	movs	r0, #30
    1128:	4d06      	ldr	r5, [pc, #24]	; (1144 <status_led_init+0x30>)
    112a:	47a8      	blx	r5
	port_pin_set_config(BAT_RED,&power_button_config);
    112c:	0021      	movs	r1, r4
    112e:	201f      	movs	r0, #31
    1130:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    1132:	4b05      	ldr	r3, [pc, #20]	; (1148 <status_led_init+0x34>)
    1134:	2280      	movs	r2, #128	; 0x80
    1136:	05d2      	lsls	r2, r2, #23
    1138:	615a      	str	r2, [r3, #20]
    113a:	2280      	movs	r2, #128	; 0x80
    113c:	0612      	lsls	r2, r2, #24
    113e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(BAT_GREEN , false);
	port_pin_set_output_level(BAT_RED , false);
}
    1140:	b003      	add	sp, #12
    1142:	bd30      	pop	{r4, r5, pc}
    1144:	000020a1 	.word	0x000020a1
    1148:	41004400 	.word	0x41004400

0000114c <status_led_green>:
	if (level) {
    114c:	2800      	cmp	r0, #0
    114e:	d104      	bne.n	115a <status_led_green+0xe>
		port_base->OUTCLR.reg = pin_mask;
    1150:	2280      	movs	r2, #128	; 0x80
    1152:	05d2      	lsls	r2, r2, #23
    1154:	4b03      	ldr	r3, [pc, #12]	; (1164 <status_led_green+0x18>)
    1156:	615a      	str	r2, [r3, #20]

void status_led_green(bool on_off)
{
	port_pin_set_output_level(BAT_GREEN , on_off);
}
    1158:	4770      	bx	lr
		port_base->OUTSET.reg = pin_mask;
    115a:	2280      	movs	r2, #128	; 0x80
    115c:	05d2      	lsls	r2, r2, #23
    115e:	4b01      	ldr	r3, [pc, #4]	; (1164 <status_led_green+0x18>)
    1160:	619a      	str	r2, [r3, #24]
    1162:	e7f9      	b.n	1158 <status_led_green+0xc>
    1164:	41004400 	.word	0x41004400

00001168 <status_led_red>:
	if (level) {
    1168:	2800      	cmp	r0, #0
    116a:	d104      	bne.n	1176 <status_led_red+0xe>
		port_base->OUTCLR.reg = pin_mask;
    116c:	2280      	movs	r2, #128	; 0x80
    116e:	0612      	lsls	r2, r2, #24
    1170:	4b03      	ldr	r3, [pc, #12]	; (1180 <status_led_red+0x18>)
    1172:	615a      	str	r2, [r3, #20]

void status_led_red(bool on_off)
{
	port_pin_set_output_level(BAT_RED , on_off);
    1174:	4770      	bx	lr
		port_base->OUTSET.reg = pin_mask;
    1176:	2280      	movs	r2, #128	; 0x80
    1178:	0612      	lsls	r2, r2, #24
    117a:	4b01      	ldr	r3, [pc, #4]	; (1180 <status_led_red+0x18>)
    117c:	619a      	str	r2, [r3, #24]
    117e:	e7f9      	b.n	1174 <status_led_red+0xc>
    1180:	41004400 	.word	0x41004400

00001184 <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    1184:	2000      	movs	r0, #0
    1186:	4770      	bx	lr

00001188 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    1188:	b530      	push	{r4, r5, lr}
    118a:	0004      	movs	r4, r0
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
		return STATUS_ERR_INVALID_ARG;
    118c:	2017      	movs	r0, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
    118e:	2903      	cmp	r1, #3
    1190:	d900      	bls.n	1194 <_tcc_set_compare_value+0xc>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    1192:	bd30      	pop	{r4, r5, pc}
	if (compare > max_count) {
    1194:	4d11      	ldr	r5, [pc, #68]	; (11dc <_tcc_set_compare_value+0x54>)
    1196:	42aa      	cmp	r2, r5
    1198:	d8fb      	bhi.n	1192 <_tcc_set_compare_value+0xa>
	Tcc *const tcc_module = module_inst->hw;
    119a:	6820      	ldr	r0, [r4, #0]
	if (double_buffering_enabled) {
    119c:	2b00      	cmp	r3, #0
    119e:	d010      	beq.n	11c2 <_tcc_set_compare_value+0x3a>
				(TCC_STATUS_CCBV0 << channel_index)) {
    11a0:	2480      	movs	r4, #128	; 0x80
    11a2:	0264      	lsls	r4, r4, #9
    11a4:	408c      	lsls	r4, r1
		while(tcc_module->STATUS.reg  &
    11a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    11a8:	421c      	tst	r4, r3
    11aa:	d1fc      	bne.n	11a6 <_tcc_set_compare_value+0x1e>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    11ac:	2480      	movs	r4, #128	; 0x80
    11ae:	0324      	lsls	r4, r4, #12
    11b0:	408c      	lsls	r4, r1
		while(tcc_module->SYNCBUSY.reg  &
    11b2:	6883      	ldr	r3, [r0, #8]
    11b4:	421c      	tst	r4, r3
    11b6:	d1fc      	bne.n	11b2 <_tcc_set_compare_value+0x2a>
		tcc_module->CCB[channel_index].reg = compare;
    11b8:	311c      	adds	r1, #28
    11ba:	0089      	lsls	r1, r1, #2
    11bc:	500a      	str	r2, [r1, r0]
	return STATUS_OK;
    11be:	2000      	movs	r0, #0
    11c0:	e7e7      	b.n	1192 <_tcc_set_compare_value+0xa>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    11c2:	2480      	movs	r4, #128	; 0x80
    11c4:	0064      	lsls	r4, r4, #1
    11c6:	408c      	lsls	r4, r1
    11c8:	6883      	ldr	r3, [r0, #8]
    11ca:	421c      	tst	r4, r3
    11cc:	d1fc      	bne.n	11c8 <_tcc_set_compare_value+0x40>
		tcc_module->CC[channel_index].reg = compare;
    11ce:	3110      	adds	r1, #16
    11d0:	0089      	lsls	r1, r1, #2
    11d2:	1841      	adds	r1, r0, r1
    11d4:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    11d6:	2000      	movs	r0, #0
    11d8:	e7db      	b.n	1192 <_tcc_set_compare_value+0xa>
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	00ffffff 	.word	0x00ffffff

000011e0 <tcc_get_config_defaults>:
	config->counter.count                  = 0;
    11e0:	2300      	movs	r3, #0
    11e2:	6003      	str	r3, [r0, #0]
	config->counter.period                 = _tcc_maxs[module_index];
    11e4:	4a4c      	ldr	r2, [pc, #304]	; (1318 <tcc_get_config_defaults+0x138>)
    11e6:	6042      	str	r2, [r0, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    11e8:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    11ea:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    11ec:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    11ee:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
    11f0:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    11f2:	61c3      	str	r3, [r0, #28]
    11f4:	6203      	str	r3, [r0, #32]
    11f6:	6243      	str	r3, [r0, #36]	; 0x24
    11f8:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    11fa:	7503      	strb	r3, [r0, #20]
    11fc:	7543      	strb	r3, [r0, #21]
    11fe:	7583      	strb	r3, [r0, #22]
    1200:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    1202:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    1204:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    1206:	7403      	strb	r3, [r0, #16]
    1208:	7443      	strb	r3, [r0, #17]
    120a:	7483      	strb	r3, [r0, #18]
    120c:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    120e:	222c      	movs	r2, #44	; 0x2c
    1210:	5483      	strb	r3, [r0, r2]
    1212:	3201      	adds	r2, #1
    1214:	5483      	strb	r3, [r0, r2]
    1216:	3201      	adds	r2, #1
    1218:	5483      	strb	r3, [r0, r2]
    121a:	3201      	adds	r2, #1
    121c:	5483      	strb	r3, [r0, r2]
    121e:	3201      	adds	r2, #1
    1220:	5483      	strb	r3, [r0, r2]
    1222:	3201      	adds	r2, #1
    1224:	5483      	strb	r3, [r0, r2]
    1226:	3201      	adds	r2, #1
    1228:	5483      	strb	r3, [r0, r2]
    122a:	3201      	adds	r2, #1
    122c:	5483      	strb	r3, [r0, r2]
    122e:	3201      	adds	r2, #1
    1230:	5483      	strb	r3, [r0, r2]
    1232:	3201      	adds	r2, #1
    1234:	5483      	strb	r3, [r0, r2]
    1236:	3201      	adds	r2, #1
    1238:	5483      	strb	r3, [r0, r2]
    123a:	3201      	adds	r2, #1
    123c:	5483      	strb	r3, [r0, r2]
    123e:	3201      	adds	r2, #1
    1240:	5483      	strb	r3, [r0, r2]
    1242:	3201      	adds	r2, #1
    1244:	5483      	strb	r3, [r0, r2]
    1246:	3201      	adds	r2, #1
    1248:	5483      	strb	r3, [r0, r2]
    124a:	3201      	adds	r2, #1
    124c:	5483      	strb	r3, [r0, r2]
    124e:	3201      	adds	r2, #1
    1250:	5483      	strb	r3, [r0, r2]
    1252:	3201      	adds	r2, #1
    1254:	5483      	strb	r3, [r0, r2]
    1256:	3201      	adds	r2, #1
    1258:	5483      	strb	r3, [r0, r2]
    125a:	3201      	adds	r2, #1
    125c:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    125e:	3201      	adds	r2, #1
    1260:	5483      	strb	r3, [r0, r2]
    1262:	3201      	adds	r2, #1
    1264:	5483      	strb	r3, [r0, r2]
    1266:	3201      	adds	r2, #1
    1268:	5483      	strb	r3, [r0, r2]
    126a:	3201      	adds	r2, #1
    126c:	5483      	strb	r3, [r0, r2]
    126e:	3201      	adds	r2, #1
    1270:	5483      	strb	r3, [r0, r2]
    1272:	3201      	adds	r2, #1
    1274:	5483      	strb	r3, [r0, r2]
    1276:	3201      	adds	r2, #1
    1278:	5483      	strb	r3, [r0, r2]
    127a:	3201      	adds	r2, #1
    127c:	5483      	strb	r3, [r0, r2]
    127e:	3201      	adds	r2, #1
    1280:	5483      	strb	r3, [r0, r2]
    1282:	3201      	adds	r2, #1
    1284:	5483      	strb	r3, [r0, r2]
    1286:	3201      	adds	r2, #1
    1288:	5483      	strb	r3, [r0, r2]
    128a:	3201      	adds	r2, #1
    128c:	5483      	strb	r3, [r0, r2]
    128e:	3201      	adds	r2, #1
    1290:	5483      	strb	r3, [r0, r2]
    1292:	3201      	adds	r2, #1
    1294:	5483      	strb	r3, [r0, r2]
    1296:	3201      	adds	r2, #1
    1298:	5483      	strb	r3, [r0, r2]
    129a:	3201      	adds	r2, #1
    129c:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    129e:	3201      	adds	r2, #1
    12a0:	5483      	strb	r3, [r0, r2]
    12a2:	3201      	adds	r2, #1
    12a4:	5483      	strb	r3, [r0, r2]
    12a6:	3201      	adds	r2, #1
    12a8:	5483      	strb	r3, [r0, r2]
    12aa:	3201      	adds	r2, #1
    12ac:	5483      	strb	r3, [r0, r2]
    12ae:	3201      	adds	r2, #1
    12b0:	5483      	strb	r3, [r0, r2]
    12b2:	3201      	adds	r2, #1
    12b4:	5483      	strb	r3, [r0, r2]
    12b6:	3201      	adds	r2, #1
    12b8:	5483      	strb	r3, [r0, r2]
    12ba:	3201      	adds	r2, #1
    12bc:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    12be:	3241      	adds	r2, #65	; 0x41
    12c0:	5483      	strb	r3, [r0, r2]
    12c2:	6583      	str	r3, [r0, #88]	; 0x58
    12c4:	6783      	str	r3, [r0, #120]	; 0x78
    12c6:	3201      	adds	r2, #1
    12c8:	5483      	strb	r3, [r0, r2]
    12ca:	65c3      	str	r3, [r0, #92]	; 0x5c
    12cc:	67c3      	str	r3, [r0, #124]	; 0x7c
    12ce:	3201      	adds	r2, #1
    12d0:	5483      	strb	r3, [r0, r2]
    12d2:	6603      	str	r3, [r0, #96]	; 0x60
    12d4:	3a1a      	subs	r2, #26
    12d6:	5083      	str	r3, [r0, r2]
    12d8:	321b      	adds	r2, #27
    12da:	5483      	strb	r3, [r0, r2]
    12dc:	6643      	str	r3, [r0, #100]	; 0x64
    12de:	3a17      	subs	r2, #23
    12e0:	5083      	str	r3, [r0, r2]
    12e2:	3218      	adds	r2, #24
    12e4:	5483      	strb	r3, [r0, r2]
    12e6:	6683      	str	r3, [r0, #104]	; 0x68
    12e8:	3a14      	subs	r2, #20
    12ea:	5083      	str	r3, [r0, r2]
    12ec:	3215      	adds	r2, #21
    12ee:	5483      	strb	r3, [r0, r2]
    12f0:	66c3      	str	r3, [r0, #108]	; 0x6c
    12f2:	3a11      	subs	r2, #17
    12f4:	5083      	str	r3, [r0, r2]
    12f6:	3212      	adds	r2, #18
    12f8:	5483      	strb	r3, [r0, r2]
    12fa:	6703      	str	r3, [r0, #112]	; 0x70
    12fc:	3a0e      	subs	r2, #14
    12fe:	5083      	str	r3, [r0, r2]
    1300:	320f      	adds	r2, #15
    1302:	5483      	strb	r3, [r0, r2]
    1304:	6743      	str	r3, [r0, #116]	; 0x74
    1306:	3a0b      	subs	r2, #11
    1308:	5083      	str	r3, [r0, r2]
	config->double_buffering_enabled  = true;
    130a:	2101      	movs	r1, #1
    130c:	320c      	adds	r2, #12
    130e:	5481      	strb	r1, [r0, r2]
	config->run_in_standby            = false;
    1310:	3201      	adds	r2, #1
    1312:	5483      	strb	r3, [r0, r2]
}
    1314:	4770      	bx	lr
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	00ffffff 	.word	0x00ffffff

0000131c <tcc_init>:
{
    131c:	b5f0      	push	{r4, r5, r6, r7, lr}
    131e:	46de      	mov	lr, fp
    1320:	4657      	mov	r7, sl
    1322:	464e      	mov	r6, r9
    1324:	4645      	mov	r5, r8
    1326:	b5e0      	push	{r5, r6, r7, lr}
    1328:	b08d      	sub	sp, #52	; 0x34
    132a:	0006      	movs	r6, r0
    132c:	000c      	movs	r4, r1
    132e:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    1330:	0008      	movs	r0, r1
    1332:	4bcd      	ldr	r3, [pc, #820]	; (1668 <tcc_init+0x34c>)
    1334:	4798      	blx	r3
    1336:	0003      	movs	r3, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1338:	49cc      	ldr	r1, [pc, #816]	; (166c <tcc_init+0x350>)
    133a:	6a0a      	ldr	r2, [r1, #32]
    133c:	2020      	movs	r0, #32
    133e:	4302      	orrs	r2, r0
    1340:	620a      	str	r2, [r1, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    1342:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    1344:	3804      	subs	r0, #4
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    1346:	0792      	lsls	r2, r2, #30
    1348:	d506      	bpl.n	1358 <tcc_init+0x3c>
}
    134a:	b00d      	add	sp, #52	; 0x34
    134c:	bc3c      	pop	{r2, r3, r4, r5}
    134e:	4690      	mov	r8, r2
    1350:	4699      	mov	r9, r3
    1352:	46a2      	mov	sl, r4
    1354:	46ab      	mov	fp, r5
    1356:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    1358:	6822      	ldr	r2, [r4, #0]
    135a:	2701      	movs	r7, #1
    135c:	4017      	ands	r7, r2
    135e:	d1f4      	bne.n	134a <tcc_init+0x2e>
	if ((config->counter.count > count_max)
    1360:	4ac3      	ldr	r2, [pc, #780]	; (1670 <tcc_init+0x354>)
		return STATUS_ERR_INVALID_ARG;
    1362:	3805      	subs	r0, #5
	if ((config->counter.count > count_max)
    1364:	6829      	ldr	r1, [r5, #0]
    1366:	4291      	cmp	r1, r2
    1368:	d8ef      	bhi.n	134a <tcc_init+0x2e>
		|| (config->counter.period > count_max)
    136a:	6869      	ldr	r1, [r5, #4]
    136c:	4291      	cmp	r1, r2
    136e:	d8ec      	bhi.n	134a <tcc_init+0x2e>
		if ((config->compare.match[i] > count_max)
    1370:	69e9      	ldr	r1, [r5, #28]
    1372:	4291      	cmp	r1, r2
    1374:	d900      	bls.n	1378 <tcc_init+0x5c>
    1376:	e18b      	b.n	1690 <tcc_init+0x374>
    1378:	6a29      	ldr	r1, [r5, #32]
    137a:	4291      	cmp	r1, r2
    137c:	d900      	bls.n	1380 <tcc_init+0x64>
    137e:	e189      	b.n	1694 <tcc_init+0x378>
    1380:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1382:	4291      	cmp	r1, r2
    1384:	d900      	bls.n	1388 <tcc_init+0x6c>
    1386:	e187      	b.n	1698 <tcc_init+0x37c>
    1388:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    138a:	4291      	cmp	r1, r2
    138c:	d900      	bls.n	1390 <tcc_init+0x74>
    138e:	e185      	b.n	169c <tcc_init+0x380>
		if (config->capture.channel_function[i] ==
    1390:	7c2a      	ldrb	r2, [r5, #16]
    1392:	3a01      	subs	r2, #1
    1394:	4250      	negs	r0, r2
    1396:	4150      	adcs	r0, r2
    1398:	0602      	lsls	r2, r0, #24
    139a:	9201      	str	r2, [sp, #4]
    139c:	7c6a      	ldrb	r2, [r5, #17]
    139e:	2a01      	cmp	r2, #1
    13a0:	d031      	beq.n	1406 <tcc_init+0xea>
    13a2:	7caa      	ldrb	r2, [r5, #18]
    13a4:	2a01      	cmp	r2, #1
    13a6:	d034      	beq.n	1412 <tcc_init+0xf6>
    13a8:	7cea      	ldrb	r2, [r5, #19]
    13aa:	2a01      	cmp	r2, #1
    13ac:	d037      	beq.n	141e <tcc_init+0x102>
	if (config->run_in_standby) {
    13ae:	22a1      	movs	r2, #161	; 0xa1
    13b0:	5caa      	ldrb	r2, [r5, r2]
    13b2:	2a00      	cmp	r2, #0
    13b4:	d004      	beq.n	13c0 <tcc_init+0xa4>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    13b6:	2280      	movs	r2, #128	; 0x80
    13b8:	0112      	lsls	r2, r2, #4
    13ba:	9901      	ldr	r1, [sp, #4]
    13bc:	4311      	orrs	r1, r2
    13be:	9101      	str	r1, [sp, #4]
	if (config->counter.oneshot) {
    13c0:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    13c2:	1e51      	subs	r1, r2, #1
    13c4:	418a      	sbcs	r2, r1
    13c6:	0092      	lsls	r2, r2, #2
    13c8:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    13ca:	7a6a      	ldrb	r2, [r5, #9]
    13cc:	2a01      	cmp	r2, #1
    13ce:	d02c      	beq.n	142a <tcc_init+0x10e>
		if (cfg->capture_channel >= cc_num) {
    13d0:	2235      	movs	r2, #53	; 0x35
    13d2:	5caa      	ldrb	r2, [r5, r2]
    13d4:	2a03      	cmp	r2, #3
    13d6:	d900      	bls.n	13da <tcc_init+0xbe>
    13d8:	e162      	b.n	16a0 <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
    13da:	212c      	movs	r1, #44	; 0x2c
    13dc:	5c69      	ldrb	r1, [r5, r1]
    13de:	290f      	cmp	r1, #15
    13e0:	d900      	bls.n	13e4 <tcc_init+0xc8>
    13e2:	e15d      	b.n	16a0 <tcc_init+0x384>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    13e4:	7b28      	ldrb	r0, [r5, #12]
    13e6:	9004      	str	r0, [sp, #16]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    13e8:	7ae8      	ldrb	r0, [r5, #11]
    13ea:	9005      	str	r0, [sp, #20]
    13ec:	202d      	movs	r0, #45	; 0x2d
    13ee:	4682      	mov	sl, r0
    13f0:	44aa      	add	sl, r5
    13f2:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    13f4:	9702      	str	r7, [sp, #8]
    13f6:	4684      	mov	ip, r0
    13f8:	9606      	str	r6, [sp, #24]
    13fa:	000e      	movs	r6, r1
    13fc:	46a0      	mov	r8, r4
    13fe:	4654      	mov	r4, sl
    1400:	46a9      	mov	r9, r5
    1402:	9307      	str	r3, [sp, #28]
    1404:	e047      	b.n	1496 <tcc_init+0x17a>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    1406:	2280      	movs	r2, #128	; 0x80
    1408:	0492      	lsls	r2, r2, #18
    140a:	9901      	ldr	r1, [sp, #4]
    140c:	4311      	orrs	r1, r2
    140e:	9101      	str	r1, [sp, #4]
    1410:	e7c7      	b.n	13a2 <tcc_init+0x86>
    1412:	2280      	movs	r2, #128	; 0x80
    1414:	04d2      	lsls	r2, r2, #19
    1416:	9901      	ldr	r1, [sp, #4]
    1418:	4311      	orrs	r1, r2
    141a:	9101      	str	r1, [sp, #4]
    141c:	e7c4      	b.n	13a8 <tcc_init+0x8c>
    141e:	2280      	movs	r2, #128	; 0x80
    1420:	0512      	lsls	r2, r2, #20
    1422:	9901      	ldr	r1, [sp, #4]
    1424:	4311      	orrs	r1, r2
    1426:	9101      	str	r1, [sp, #4]
    1428:	e7c1      	b.n	13ae <tcc_init+0x92>
		ctrlb |= TCC_CTRLBSET_DIR;
    142a:	9903      	ldr	r1, [sp, #12]
    142c:	4311      	orrs	r1, r2
    142e:	9103      	str	r1, [sp, #12]
    1430:	e7ce      	b.n	13d0 <tcc_init+0xb4>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    1432:	0292      	lsls	r2, r2, #10
    1434:	25c0      	movs	r5, #192	; 0xc0
    1436:	012d      	lsls	r5, r5, #4
    1438:	402a      	ands	r2, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    143a:	4332      	orrs	r2, r6
				| TCC_FCTRLA_SRC(cfg->source)
    143c:	790d      	ldrb	r5, [r1, #4]
    143e:	2603      	movs	r6, #3
    1440:	402e      	ands	r6, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1442:	4332      	orrs	r2, r6
    1444:	4655      	mov	r5, sl
    1446:	432a      	orrs	r2, r5
				| TCC_FCTRLA_BLANK(cfg->blanking)
    1448:	794e      	ldrb	r6, [r1, #5]
    144a:	0176      	lsls	r6, r6, #5
    144c:	2560      	movs	r5, #96	; 0x60
    144e:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1450:	432a      	orrs	r2, r5
				| TCC_FCTRLA_HALT(cfg->halt_action)
    1452:	798d      	ldrb	r5, [r1, #6]
    1454:	022d      	lsls	r5, r5, #8
    1456:	26c0      	movs	r6, #192	; 0xc0
    1458:	00b6      	lsls	r6, r6, #2
    145a:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    145c:	432a      	orrs	r2, r5
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    145e:	79cd      	ldrb	r5, [r1, #7]
    1460:	032d      	lsls	r5, r5, #12
    1462:	26e0      	movs	r6, #224	; 0xe0
    1464:	01f6      	lsls	r6, r6, #7
    1466:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1468:	432a      	orrs	r2, r5
    146a:	4310      	orrs	r0, r2
    146c:	4303      	orrs	r3, r0
    146e:	431f      	orrs	r7, r3
		value_buffer[i] = fault;
    1470:	ab08      	add	r3, sp, #32
    1472:	4662      	mov	r2, ip
    1474:	2008      	movs	r0, #8
    1476:	181b      	adds	r3, r3, r0
    1478:	509f      	str	r7, [r3, r2]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    147a:	2a04      	cmp	r2, #4
    147c:	d028      	beq.n	14d0 <tcc_init+0x1b4>
		if (cfg->capture_channel >= cc_num) {
    147e:	7c8a      	ldrb	r2, [r1, #18]
    1480:	2a03      	cmp	r2, #3
    1482:	d900      	bls.n	1486 <tcc_init+0x16a>
    1484:	e10c      	b.n	16a0 <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
    1486:	7a4e      	ldrb	r6, [r1, #9]
    1488:	340a      	adds	r4, #10
    148a:	2304      	movs	r3, #4
    148c:	469a      	mov	sl, r3
    148e:	44d4      	add	ip, sl
    1490:	2e0f      	cmp	r6, #15
    1492:	d900      	bls.n	1496 <tcc_init+0x17a>
    1494:	e104      	b.n	16a0 <tcc_init+0x384>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1496:	0636      	lsls	r6, r6, #24
    1498:	23f0      	movs	r3, #240	; 0xf0
    149a:	051b      	lsls	r3, r3, #20
    149c:	401e      	ands	r6, r3
    149e:	0021      	movs	r1, r4
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    14a0:	7825      	ldrb	r5, [r4, #0]
    14a2:	042d      	lsls	r5, r5, #16
    14a4:	23ff      	movs	r3, #255	; 0xff
    14a6:	041b      	lsls	r3, r3, #16
    14a8:	401d      	ands	r5, r3
    14aa:	46aa      	mov	sl, r5
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    14ac:	7863      	ldrb	r3, [r4, #1]
    14ae:	2080      	movs	r0, #128	; 0x80
    14b0:	2b00      	cmp	r3, #0
    14b2:	d100      	bne.n	14b6 <tcc_init+0x19a>
    14b4:	9802      	ldr	r0, [sp, #8]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    14b6:	788f      	ldrb	r7, [r1, #2]
    14b8:	2308      	movs	r3, #8
    14ba:	2f00      	cmp	r7, #0
    14bc:	d100      	bne.n	14c0 <tcc_init+0x1a4>
    14be:	9b02      	ldr	r3, [sp, #8]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    14c0:	78cf      	ldrb	r7, [r1, #3]
    14c2:	46bb      	mov	fp, r7
    14c4:	2710      	movs	r7, #16
    14c6:	465d      	mov	r5, fp
    14c8:	2d00      	cmp	r5, #0
    14ca:	d1b2      	bne.n	1432 <tcc_init+0x116>
    14cc:	9f02      	ldr	r7, [sp, #8]
    14ce:	e7b0      	b.n	1432 <tcc_init+0x116>
    14d0:	9e06      	ldr	r6, [sp, #24]
    14d2:	4644      	mov	r4, r8
    14d4:	464d      	mov	r5, r9
    14d6:	9b07      	ldr	r3, [sp, #28]
    14d8:	4648      	mov	r0, r9
    14da:	3050      	adds	r0, #80	; 0x50
    14dc:	4649      	mov	r1, r9
    14de:	3141      	adds	r1, #65	; 0x41
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    14e0:	2200      	movs	r2, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    14e2:	2780      	movs	r7, #128	; 0x80
    14e4:	027f      	lsls	r7, r7, #9
    14e6:	46bc      	mov	ip, r7
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    14e8:	2701      	movs	r7, #1
    14ea:	46b9      	mov	r9, r7
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    14ec:	2702      	movs	r7, #2
    14ee:	37ff      	adds	r7, #255	; 0xff
    14f0:	46ba      	mov	sl, r7
    14f2:	001f      	movs	r7, r3
    14f4:	0013      	movs	r3, r2
    14f6:	46a0      	mov	r8, r4
    14f8:	003c      	movs	r4, r7
    14fa:	e007      	b.n	150c <tcc_init+0x1f0>
    14fc:	4657      	mov	r7, sl
    14fe:	4097      	lsls	r7, r2
    1500:	433b      	orrs	r3, r7
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    1502:	3201      	adds	r2, #1
    1504:	3001      	adds	r0, #1
    1506:	3102      	adds	r1, #2
    1508:	2a08      	cmp	r2, #8
    150a:	d00e      	beq.n	152a <tcc_init+0x20e>
		if (config->wave_ext.invert[i]) {
    150c:	7807      	ldrb	r7, [r0, #0]
    150e:	2f00      	cmp	r7, #0
    1510:	d002      	beq.n	1518 <tcc_init+0x1fc>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1512:	4667      	mov	r7, ip
    1514:	4097      	lsls	r7, r2
    1516:	433b      	orrs	r3, r7
		if (config->wave_ext.non_recoverable_fault[i].output !=
    1518:	780f      	ldrb	r7, [r1, #0]
    151a:	2f00      	cmp	r7, #0
    151c:	d0f1      	beq.n	1502 <tcc_init+0x1e6>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    151e:	2f02      	cmp	r7, #2
    1520:	d0ec      	beq.n	14fc <tcc_init+0x1e0>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    1522:	464f      	mov	r7, r9
    1524:	4097      	lsls	r7, r2
    1526:	433b      	orrs	r3, r7
    1528:	e7eb      	b.n	1502 <tcc_init+0x1e6>
    152a:	0022      	movs	r2, r4
    152c:	4644      	mov	r4, r8
    152e:	4698      	mov	r8, r3
    1530:	0013      	movs	r3, r2
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1532:	7e6a      	ldrb	r2, [r5, #25]
    1534:	0112      	lsls	r2, r2, #4
    1536:	2130      	movs	r1, #48	; 0x30
    1538:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    153a:	7e28      	ldrb	r0, [r5, #24]
    153c:	2207      	movs	r2, #7
    153e:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1540:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1542:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    1544:	2080      	movs	r0, #128	; 0x80
    1546:	0240      	lsls	r0, r0, #9
    1548:	000f      	movs	r7, r1
    154a:	e002      	b.n	1552 <tcc_init+0x236>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    154c:	3201      	adds	r2, #1
    154e:	2a04      	cmp	r2, #4
    1550:	d007      	beq.n	1562 <tcc_init+0x246>
		if (wav_cfg->wave_polarity[n]) {
    1552:	18a9      	adds	r1, r5, r2
    1554:	7d09      	ldrb	r1, [r1, #20]
    1556:	2900      	cmp	r1, #0
    1558:	d0f8      	beq.n	154c <tcc_init+0x230>
			wave |= (TCC_WAVE_POL0 << n);
    155a:	0001      	movs	r1, r0
    155c:	4091      	lsls	r1, r2
    155e:	430f      	orrs	r7, r1
    1560:	e7f4      	b.n	154c <tcc_init+0x230>
    1562:	46b9      	mov	r9, r7
    1564:	1d32      	adds	r2, r6, #4
    1566:	0030      	movs	r0, r6
    1568:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    156a:	2100      	movs	r1, #0
    156c:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    156e:	4290      	cmp	r0, r2
    1570:	d1fc      	bne.n	156c <tcc_init+0x250>
	module_inst->register_callback_mask = 0;
    1572:	2200      	movs	r2, #0
    1574:	6372      	str	r2, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    1576:	63b2      	str	r2, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    1578:	009b      	lsls	r3, r3, #2
    157a:	4a3e      	ldr	r2, [pc, #248]	; (1674 <tcc_init+0x358>)
    157c:	509e      	str	r6, [r3, r2]
	module_inst->hw = hw;
    157e:	6034      	str	r4, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1580:	23a0      	movs	r3, #160	; 0xa0
    1582:	5cea      	ldrb	r2, [r5, r3]
    1584:	3b64      	subs	r3, #100	; 0x64
    1586:	54f2      	strb	r2, [r6, r3]
	gclk_chan_config.source_generator = config->counter.clock_source;
    1588:	a909      	add	r1, sp, #36	; 0x24
    158a:	7aab      	ldrb	r3, [r5, #10]
    158c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    158e:	2011      	movs	r0, #17
    1590:	4b39      	ldr	r3, [pc, #228]	; (1678 <tcc_init+0x35c>)
    1592:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    1594:	2011      	movs	r0, #17
    1596:	4b39      	ldr	r3, [pc, #228]	; (167c <tcc_init+0x360>)
    1598:	4798      	blx	r3
    159a:	002f      	movs	r7, r5
    159c:	3798      	adds	r7, #152	; 0x98
    159e:	002e      	movs	r6, r5
    15a0:	3658      	adds	r6, #88	; 0x58
    15a2:	2378      	movs	r3, #120	; 0x78
    15a4:	469a      	mov	sl, r3
    15a6:	44aa      	add	sl, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    15a8:	3b77      	subs	r3, #119	; 0x77
    15aa:	469b      	mov	fp, r3
		system_pinmux_pin_set_config(
    15ac:	0023      	movs	r3, r4
    15ae:	4654      	mov	r4, sl
    15b0:	469a      	mov	sl, r3
    15b2:	e003      	b.n	15bc <tcc_init+0x2a0>
    15b4:	3701      	adds	r7, #1
    15b6:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    15b8:	42b4      	cmp	r4, r6
    15ba:	d014      	beq.n	15e6 <tcc_init+0x2ca>
		if (!config->pins.enable_wave_out_pin[i]) {
    15bc:	783b      	ldrb	r3, [r7, #0]
    15be:	2b00      	cmp	r3, #0
    15c0:	d0f8      	beq.n	15b4 <tcc_init+0x298>
    15c2:	ab08      	add	r3, sp, #32
    15c4:	465a      	mov	r2, fp
    15c6:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    15c8:	2300      	movs	r3, #0
    15ca:	aa08      	add	r2, sp, #32
    15cc:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    15ce:	0013      	movs	r3, r2
    15d0:	2220      	movs	r2, #32
    15d2:	18b2      	adds	r2, r6, r2
    15d4:	7812      	ldrb	r2, [r2, #0]
    15d6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    15d8:	465a      	mov	r2, fp
    15da:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    15dc:	7830      	ldrb	r0, [r6, #0]
    15de:	0019      	movs	r1, r3
    15e0:	4b27      	ldr	r3, [pc, #156]	; (1680 <tcc_init+0x364>)
    15e2:	4798      	blx	r3
    15e4:	e7e6      	b.n	15b4 <tcc_init+0x298>
    15e6:	4654      	mov	r4, sl
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    15e8:	9b04      	ldr	r3, [sp, #16]
    15ea:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    15ec:	9a05      	ldr	r2, [sp, #20]
    15ee:	0212      	lsls	r2, r2, #8
    15f0:	4313      	orrs	r3, r2
    15f2:	9a01      	ldr	r2, [sp, #4]
    15f4:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    15f6:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    15f8:	2204      	movs	r2, #4
    15fa:	68a3      	ldr	r3, [r4, #8]
    15fc:	421a      	tst	r2, r3
    15fe:	d1fc      	bne.n	15fa <tcc_init+0x2de>
	hw->CTRLBCLR.reg = 0xFF;
    1600:	23ff      	movs	r3, #255	; 0xff
    1602:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1604:	2204      	movs	r2, #4
    1606:	68a3      	ldr	r3, [r4, #8]
    1608:	421a      	tst	r2, r3
    160a:	d1fc      	bne.n	1606 <tcc_init+0x2ea>
	hw->CTRLBSET.reg = ctrlb;
    160c:	466b      	mov	r3, sp
    160e:	7b1b      	ldrb	r3, [r3, #12]
    1610:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    1612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1614:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    1616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1618:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    161a:	4643      	mov	r3, r8
    161c:	61a3      	str	r3, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    161e:	4a19      	ldr	r2, [pc, #100]	; (1684 <tcc_init+0x368>)
    1620:	68a3      	ldr	r3, [r4, #8]
    1622:	4213      	tst	r3, r2
    1624:	d1fc      	bne.n	1620 <tcc_init+0x304>
	hw->WAVE.reg = waves[0];
    1626:	464b      	mov	r3, r9
    1628:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    162a:	2210      	movs	r2, #16
    162c:	68a3      	ldr	r3, [r4, #8]
    162e:	421a      	tst	r2, r3
    1630:	d1fc      	bne.n	162c <tcc_init+0x310>
	hw->COUNT.reg = config->counter.count;
    1632:	682b      	ldr	r3, [r5, #0]
    1634:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    1636:	4a14      	ldr	r2, [pc, #80]	; (1688 <tcc_init+0x36c>)
    1638:	68a3      	ldr	r3, [r4, #8]
    163a:	4213      	tst	r3, r2
    163c:	d1fc      	bne.n	1638 <tcc_init+0x31c>
	hw->PER.reg = (config->counter.period);
    163e:	686b      	ldr	r3, [r5, #4]
    1640:	6423      	str	r3, [r4, #64]	; 0x40
    1642:	351c      	adds	r5, #28
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1644:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    1646:	4811      	ldr	r0, [pc, #68]	; (168c <tcc_init+0x370>)
    1648:	0002      	movs	r2, r0
    164a:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    164c:	68a3      	ldr	r3, [r4, #8]
    164e:	421a      	tst	r2, r3
    1650:	d1fc      	bne.n	164c <tcc_init+0x330>
		hw->CC[i].reg = (config->compare.match[i]);
    1652:	cd04      	ldmia	r5!, {r2}
    1654:	000b      	movs	r3, r1
    1656:	3310      	adds	r3, #16
    1658:	009b      	lsls	r3, r3, #2
    165a:	18e3      	adds	r3, r4, r3
    165c:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    165e:	3101      	adds	r1, #1
    1660:	2904      	cmp	r1, #4
    1662:	d1f1      	bne.n	1648 <tcc_init+0x32c>
	return STATUS_OK;
    1664:	2000      	movs	r0, #0
    1666:	e670      	b.n	134a <tcc_init+0x2e>
    1668:	00001185 	.word	0x00001185
    166c:	40000400 	.word	0x40000400
    1670:	00ffffff 	.word	0x00ffffff
    1674:	20000714 	.word	0x20000714
    1678:	0000275d 	.word	0x0000275d
    167c:	000026d1 	.word	0x000026d1
    1680:	00002855 	.word	0x00002855
    1684:	00020040 	.word	0x00020040
    1688:	00040080 	.word	0x00040080
    168c:	00080100 	.word	0x00080100
			return STATUS_ERR_INVALID_ARG;
    1690:	2017      	movs	r0, #23
    1692:	e65a      	b.n	134a <tcc_init+0x2e>
    1694:	2017      	movs	r0, #23
    1696:	e658      	b.n	134a <tcc_init+0x2e>
    1698:	2017      	movs	r0, #23
    169a:	e656      	b.n	134a <tcc_init+0x2e>
    169c:	2017      	movs	r0, #23
    169e:	e654      	b.n	134a <tcc_init+0x2e>
    16a0:	2017      	movs	r0, #23
    16a2:	e652      	b.n	134a <tcc_init+0x2e>

000016a4 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    16a4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    16a6:	233c      	movs	r3, #60	; 0x3c
    16a8:	5cc3      	ldrb	r3, [r0, r3]
    16aa:	4c01      	ldr	r4, [pc, #4]	; (16b0 <tcc_set_compare_value+0xc>)
    16ac:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
    16ae:	bd10      	pop	{r4, pc}
    16b0:	00001189 	.word	0x00001189

000016b4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    16b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16b6:	46c6      	mov	lr, r8
    16b8:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    16ba:	0080      	lsls	r0, r0, #2
    16bc:	4b0e      	ldr	r3, [pc, #56]	; (16f8 <_tcc_interrupt_handler+0x44>)
    16be:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    16c0:	683b      	ldr	r3, [r7, #0]
    16c2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    16c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    16c8:	4013      	ands	r3, r2
    16ca:	401e      	ands	r6, r3
    16cc:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    16ce:	4b0b      	ldr	r3, [pc, #44]	; (16fc <_tcc_interrupt_handler+0x48>)
    16d0:	4698      	mov	r8, r3
    16d2:	e002      	b.n	16da <_tcc_interrupt_handler+0x26>
    16d4:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    16d6:	2c30      	cmp	r4, #48	; 0x30
    16d8:	d00a      	beq.n	16f0 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    16da:	4643      	mov	r3, r8
    16dc:	58e5      	ldr	r5, [r4, r3]
    16de:	4235      	tst	r5, r6
    16e0:	d0f8      	beq.n	16d4 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    16e2:	193b      	adds	r3, r7, r4
    16e4:	685b      	ldr	r3, [r3, #4]
    16e6:	0038      	movs	r0, r7
    16e8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    16ea:	683b      	ldr	r3, [r7, #0]
    16ec:	62dd      	str	r5, [r3, #44]	; 0x2c
    16ee:	e7f1      	b.n	16d4 <_tcc_interrupt_handler+0x20>
		}
	}
}
    16f0:	bc04      	pop	{r2}
    16f2:	4690      	mov	r8, r2
    16f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16f6:	46c0      	nop			; (mov r8, r8)
    16f8:	20000714 	.word	0x20000714
    16fc:	00002d70 	.word	0x00002d70

00001700 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1700:	b510      	push	{r4, lr}
    1702:	2000      	movs	r0, #0
    1704:	4b01      	ldr	r3, [pc, #4]	; (170c <TCC0_Handler+0xc>)
    1706:	4798      	blx	r3
    1708:	bd10      	pop	{r4, pc}
    170a:	46c0      	nop			; (mov r8, r8)
    170c:	000016b5 	.word	0x000016b5

00001710 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1710:	4b06      	ldr	r3, [pc, #24]	; (172c <_tc_get_inst_index+0x1c>)
    1712:	4298      	cmp	r0, r3
    1714:	d008      	beq.n	1728 <_tc_get_inst_index+0x18>
    1716:	4a06      	ldr	r2, [pc, #24]	; (1730 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1718:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    171a:	4290      	cmp	r0, r2
    171c:	d001      	beq.n	1722 <_tc_get_inst_index+0x12>
}
    171e:	0018      	movs	r0, r3
    1720:	4770      	bx	lr
    1722:	3301      	adds	r3, #1
			return i;
    1724:	b2db      	uxtb	r3, r3
    1726:	e7fa      	b.n	171e <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1728:	2300      	movs	r3, #0
    172a:	e7fb      	b.n	1724 <_tc_get_inst_index+0x14>
    172c:	42001800 	.word	0x42001800
    1730:	42001c00 	.word	0x42001c00

00001734 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1734:	b5f0      	push	{r4, r5, r6, r7, lr}
    1736:	b085      	sub	sp, #20
    1738:	0004      	movs	r4, r0
    173a:	000d      	movs	r5, r1
    173c:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    173e:	0008      	movs	r0, r1
    1740:	4b82      	ldr	r3, [pc, #520]	; (194c <tc_init+0x218>)
    1742:	4798      	blx	r3
    1744:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1746:	ab03      	add	r3, sp, #12
    1748:	2212      	movs	r2, #18
    174a:	701a      	strb	r2, [r3, #0]
    174c:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    174e:	ab02      	add	r3, sp, #8
    1750:	322e      	adds	r2, #46	; 0x2e
    1752:	801a      	strh	r2, [r3, #0]
    1754:	3240      	adds	r2, #64	; 0x40
    1756:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1758:	2300      	movs	r3, #0
    175a:	60a3      	str	r3, [r4, #8]
    175c:	60e3      	str	r3, [r4, #12]
    175e:	6123      	str	r3, [r4, #16]
    1760:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1762:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1764:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1766:	0082      	lsls	r2, r0, #2
    1768:	4b79      	ldr	r3, [pc, #484]	; (1950 <tc_init+0x21c>)
    176a:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    176c:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    176e:	78b3      	ldrb	r3, [r6, #2]
    1770:	2b08      	cmp	r3, #8
    1772:	d006      	beq.n	1782 <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1774:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1776:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1778:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    177a:	07db      	lsls	r3, r3, #31
    177c:	d505      	bpl.n	178a <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    177e:	b005      	add	sp, #20
    1780:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    1782:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1784:	07fa      	lsls	r2, r7, #31
    1786:	d4fa      	bmi.n	177e <tc_init+0x4a>
    1788:	e7f4      	b.n	1774 <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    178a:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    178c:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    178e:	06db      	lsls	r3, r3, #27
    1790:	d4f5      	bmi.n	177e <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1792:	882b      	ldrh	r3, [r5, #0]
    1794:	079b      	lsls	r3, r3, #30
    1796:	d4f2      	bmi.n	177e <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
    1798:	7c33      	ldrb	r3, [r6, #16]
    179a:	2b00      	cmp	r3, #0
    179c:	d000      	beq.n	17a0 <tc_init+0x6c>
    179e:	e07a      	b.n	1896 <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
    17a0:	7f33      	ldrb	r3, [r6, #28]
    17a2:	2b00      	cmp	r3, #0
    17a4:	d000      	beq.n	17a8 <tc_init+0x74>
    17a6:	e082      	b.n	18ae <tc_init+0x17a>
    17a8:	496a      	ldr	r1, [pc, #424]	; (1954 <tc_init+0x220>)
    17aa:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    17ac:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    17ae:	ab02      	add	r3, sp, #8
    17b0:	5ad3      	ldrh	r3, [r2, r3]
    17b2:	4303      	orrs	r3, r0
    17b4:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    17b6:	78b3      	ldrb	r3, [r6, #2]
    17b8:	2b08      	cmp	r3, #8
    17ba:	d100      	bne.n	17be <tc_init+0x8a>
    17bc:	e087      	b.n	18ce <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
    17be:	7833      	ldrb	r3, [r6, #0]
    17c0:	466a      	mov	r2, sp
    17c2:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    17c4:	ab03      	add	r3, sp, #12
    17c6:	5ddf      	ldrb	r7, [r3, r7]
    17c8:	4669      	mov	r1, sp
    17ca:	0038      	movs	r0, r7
    17cc:	4b62      	ldr	r3, [pc, #392]	; (1958 <tc_init+0x224>)
    17ce:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    17d0:	0038      	movs	r0, r7
    17d2:	4b62      	ldr	r3, [pc, #392]	; (195c <tc_init+0x228>)
    17d4:	4798      	blx	r3
	ctrla_tmp =
    17d6:	8931      	ldrh	r1, [r6, #8]
    17d8:	88b3      	ldrh	r3, [r6, #4]
    17da:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    17dc:	78b1      	ldrb	r1, [r6, #2]
    17de:	79b2      	ldrb	r2, [r6, #6]
    17e0:	4311      	orrs	r1, r2
	ctrla_tmp =
    17e2:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    17e4:	7873      	ldrb	r3, [r6, #1]
    17e6:	2b00      	cmp	r3, #0
    17e8:	d002      	beq.n	17f0 <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    17ea:	2380      	movs	r3, #128	; 0x80
    17ec:	011b      	lsls	r3, r3, #4
    17ee:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    17f0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    17f2:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    17f4:	b25b      	sxtb	r3, r3
    17f6:	2b00      	cmp	r3, #0
    17f8:	dbfb      	blt.n	17f2 <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    17fa:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    17fc:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    17fe:	1e4b      	subs	r3, r1, #1
    1800:	4199      	sbcs	r1, r3
    1802:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    1804:	7bb3      	ldrb	r3, [r6, #14]
    1806:	2b00      	cmp	r3, #0
    1808:	d001      	beq.n	180e <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    180a:	2301      	movs	r3, #1
    180c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    180e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1810:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1812:	b25b      	sxtb	r3, r3
    1814:	2b00      	cmp	r3, #0
    1816:	dbfb      	blt.n	1810 <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1818:	23ff      	movs	r3, #255	; 0xff
    181a:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    181c:	2900      	cmp	r1, #0
    181e:	d005      	beq.n	182c <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1820:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1822:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    1824:	b25b      	sxtb	r3, r3
    1826:	2b00      	cmp	r3, #0
    1828:	dbfb      	blt.n	1822 <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    182a:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    182c:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    182e:	7af3      	ldrb	r3, [r6, #11]
    1830:	2b00      	cmp	r3, #0
    1832:	d001      	beq.n	1838 <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1834:	2310      	movs	r3, #16
    1836:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    1838:	7b33      	ldrb	r3, [r6, #12]
    183a:	2b00      	cmp	r3, #0
    183c:	d001      	beq.n	1842 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    183e:	2320      	movs	r3, #32
    1840:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1842:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1844:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1846:	b25b      	sxtb	r3, r3
    1848:	2b00      	cmp	r3, #0
    184a:	dbfb      	blt.n	1844 <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    184c:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    184e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1850:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1852:	b25b      	sxtb	r3, r3
    1854:	2b00      	cmp	r3, #0
    1856:	dbfb      	blt.n	1850 <tc_init+0x11c>
	switch (module_inst->counter_size) {
    1858:	7923      	ldrb	r3, [r4, #4]
    185a:	2b04      	cmp	r3, #4
    185c:	d03f      	beq.n	18de <tc_init+0x1aa>
    185e:	2b08      	cmp	r3, #8
    1860:	d05e      	beq.n	1920 <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
    1862:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1864:	2b00      	cmp	r3, #0
    1866:	d000      	beq.n	186a <tc_init+0x136>
    1868:	e789      	b.n	177e <tc_init+0x4a>
    186a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    186c:	b25b      	sxtb	r3, r3
    186e:	2b00      	cmp	r3, #0
    1870:	dbfb      	blt.n	186a <tc_init+0x136>
				= config->counter_16_bit.value;
    1872:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1874:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1876:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1878:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    187a:	b25b      	sxtb	r3, r3
    187c:	2b00      	cmp	r3, #0
    187e:	dbfb      	blt.n	1878 <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
    1880:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1882:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1884:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1886:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1888:	b25b      	sxtb	r3, r3
    188a:	2b00      	cmp	r3, #0
    188c:	dbfb      	blt.n	1886 <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
    188e:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1890:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    1892:	2000      	movs	r0, #0
    1894:	e773      	b.n	177e <tc_init+0x4a>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1896:	a901      	add	r1, sp, #4
    1898:	2301      	movs	r3, #1
    189a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    189c:	2200      	movs	r2, #0
    189e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    18a0:	7e32      	ldrb	r2, [r6, #24]
    18a2:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    18a4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    18a6:	7d30      	ldrb	r0, [r6, #20]
    18a8:	4b2d      	ldr	r3, [pc, #180]	; (1960 <tc_init+0x22c>)
    18aa:	4798      	blx	r3
    18ac:	e778      	b.n	17a0 <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    18ae:	a901      	add	r1, sp, #4
    18b0:	2301      	movs	r3, #1
    18b2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    18b4:	2200      	movs	r2, #0
    18b6:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    18b8:	3224      	adds	r2, #36	; 0x24
    18ba:	18b2      	adds	r2, r6, r2
    18bc:	7812      	ldrb	r2, [r2, #0]
    18be:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    18c0:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    18c2:	331f      	adds	r3, #31
    18c4:	18f3      	adds	r3, r6, r3
    18c6:	7818      	ldrb	r0, [r3, #0]
    18c8:	4b25      	ldr	r3, [pc, #148]	; (1960 <tc_init+0x22c>)
    18ca:	4798      	blx	r3
    18cc:	e76c      	b.n	17a8 <tc_init+0x74>
    18ce:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    18d0:	1c7a      	adds	r2, r7, #1
    18d2:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    18d4:	ab02      	add	r3, sp, #8
    18d6:	5ad3      	ldrh	r3, [r2, r3]
    18d8:	4303      	orrs	r3, r0
    18da:	620b      	str	r3, [r1, #32]
    18dc:	e76f      	b.n	17be <tc_init+0x8a>
    18de:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    18e0:	b25b      	sxtb	r3, r3
    18e2:	2b00      	cmp	r3, #0
    18e4:	dbfb      	blt.n	18de <tc_init+0x1aa>
					config->counter_8_bit.value;
    18e6:	2328      	movs	r3, #40	; 0x28
    18e8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    18ea:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    18ec:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    18ee:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    18f0:	b25b      	sxtb	r3, r3
    18f2:	2b00      	cmp	r3, #0
    18f4:	dbfb      	blt.n	18ee <tc_init+0x1ba>
					config->counter_8_bit.period;
    18f6:	2329      	movs	r3, #41	; 0x29
    18f8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    18fa:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    18fc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    18fe:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1900:	b25b      	sxtb	r3, r3
    1902:	2b00      	cmp	r3, #0
    1904:	dbfb      	blt.n	18fe <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
    1906:	232a      	movs	r3, #42	; 0x2a
    1908:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    190a:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    190c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    190e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1910:	b25b      	sxtb	r3, r3
    1912:	2b00      	cmp	r3, #0
    1914:	dbfb      	blt.n	190e <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
    1916:	232b      	movs	r3, #43	; 0x2b
    1918:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    191a:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    191c:	2000      	movs	r0, #0
    191e:	e72e      	b.n	177e <tc_init+0x4a>
    1920:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1922:	b25b      	sxtb	r3, r3
    1924:	2b00      	cmp	r3, #0
    1926:	dbfb      	blt.n	1920 <tc_init+0x1ec>
				= config->counter_32_bit.value;
    1928:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    192a:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    192c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    192e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1930:	b25b      	sxtb	r3, r3
    1932:	2b00      	cmp	r3, #0
    1934:	dbfb      	blt.n	192e <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
    1936:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1938:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    193a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    193c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    193e:	b25b      	sxtb	r3, r3
    1940:	2b00      	cmp	r3, #0
    1942:	dbfb      	blt.n	193c <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
    1944:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1946:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    1948:	2000      	movs	r0, #0
    194a:	e718      	b.n	177e <tc_init+0x4a>
    194c:	00001711 	.word	0x00001711
    1950:	20000718 	.word	0x20000718
    1954:	40000400 	.word	0x40000400
    1958:	0000275d 	.word	0x0000275d
    195c:	000026d1 	.word	0x000026d1
    1960:	00002855 	.word	0x00002855

00001964 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    1964:	6802      	ldr	r2, [r0, #0]
    1966:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1968:	b25b      	sxtb	r3, r3
    196a:	2b00      	cmp	r3, #0
    196c:	dbfb      	blt.n	1966 <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    196e:	7903      	ldrb	r3, [r0, #4]
    1970:	2b04      	cmp	r3, #4
    1972:	d005      	beq.n	1980 <tc_set_count_value+0x1c>
    1974:	2b08      	cmp	r3, #8
    1976:	d00b      	beq.n	1990 <tc_set_count_value+0x2c>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    1978:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    197a:	2b00      	cmp	r3, #0
    197c:	d004      	beq.n	1988 <tc_set_count_value+0x24>
	}
}
    197e:	4770      	bx	lr
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    1980:	b2c9      	uxtb	r1, r1
    1982:	7411      	strb	r1, [r2, #16]
			return STATUS_OK;
    1984:	2000      	movs	r0, #0
    1986:	e7fa      	b.n	197e <tc_set_count_value+0x1a>
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    1988:	b289      	uxth	r1, r1
    198a:	8211      	strh	r1, [r2, #16]
			return STATUS_OK;
    198c:	2000      	movs	r0, #0
    198e:	e7f6      	b.n	197e <tc_set_count_value+0x1a>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    1990:	6111      	str	r1, [r2, #16]
			return STATUS_OK;
    1992:	2000      	movs	r0, #0
    1994:	e7f3      	b.n	197e <tc_set_count_value+0x1a>

00001996 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1996:	6802      	ldr	r2, [r0, #0]
    1998:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    199a:	b25b      	sxtb	r3, r3
    199c:	2b00      	cmp	r3, #0
    199e:	dbfb      	blt.n	1998 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    19a0:	7903      	ldrb	r3, [r0, #4]
    19a2:	2b04      	cmp	r3, #4
    19a4:	d005      	beq.n	19b2 <tc_get_count_value+0x1c>
    19a6:	2b08      	cmp	r3, #8
    19a8:	d009      	beq.n	19be <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    19aa:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    19ac:	2b00      	cmp	r3, #0
    19ae:	d003      	beq.n	19b8 <tc_get_count_value+0x22>
}
    19b0:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    19b2:	7c10      	ldrb	r0, [r2, #16]
    19b4:	b2c0      	uxtb	r0, r0
    19b6:	e7fb      	b.n	19b0 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    19b8:	8a10      	ldrh	r0, [r2, #16]
    19ba:	b280      	uxth	r0, r0
    19bc:	e7f8      	b.n	19b0 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    19be:	6910      	ldr	r0, [r2, #16]
    19c0:	e7f6      	b.n	19b0 <tc_get_count_value+0x1a>

000019c2 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    19c2:	1c93      	adds	r3, r2, #2
    19c4:	009b      	lsls	r3, r3, #2
    19c6:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    19c8:	2a02      	cmp	r2, #2
    19ca:	d009      	beq.n	19e0 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    19cc:	2a03      	cmp	r2, #3
    19ce:	d00c      	beq.n	19ea <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    19d0:	2301      	movs	r3, #1
    19d2:	4093      	lsls	r3, r2
    19d4:	001a      	movs	r2, r3
    19d6:	7e03      	ldrb	r3, [r0, #24]
    19d8:	4313      	orrs	r3, r2
    19da:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    19dc:	2000      	movs	r0, #0
    19de:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    19e0:	7e03      	ldrb	r3, [r0, #24]
    19e2:	2210      	movs	r2, #16
    19e4:	4313      	orrs	r3, r2
    19e6:	7603      	strb	r3, [r0, #24]
    19e8:	e7f8      	b.n	19dc <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    19ea:	7e03      	ldrb	r3, [r0, #24]
    19ec:	2220      	movs	r2, #32
    19ee:	4313      	orrs	r3, r2
    19f0:	7603      	strb	r3, [r0, #24]
    19f2:	e7f3      	b.n	19dc <tc_register_callback+0x1a>

000019f4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    19f4:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    19f6:	0080      	lsls	r0, r0, #2
    19f8:	4b16      	ldr	r3, [pc, #88]	; (1a54 <_tc_interrupt_handler+0x60>)
    19fa:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    19fc:	6823      	ldr	r3, [r4, #0]
    19fe:	7b9d      	ldrb	r5, [r3, #14]
    1a00:	7e22      	ldrb	r2, [r4, #24]
    1a02:	7e63      	ldrb	r3, [r4, #25]
    1a04:	4013      	ands	r3, r2
    1a06:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1a08:	07eb      	lsls	r3, r5, #31
    1a0a:	d406      	bmi.n	1a1a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1a0c:	07ab      	lsls	r3, r5, #30
    1a0e:	d40b      	bmi.n	1a28 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1a10:	06eb      	lsls	r3, r5, #27
    1a12:	d410      	bmi.n	1a36 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1a14:	06ab      	lsls	r3, r5, #26
    1a16:	d415      	bmi.n	1a44 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1a18:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1a1a:	0020      	movs	r0, r4
    1a1c:	68a3      	ldr	r3, [r4, #8]
    1a1e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1a20:	2301      	movs	r3, #1
    1a22:	6822      	ldr	r2, [r4, #0]
    1a24:	7393      	strb	r3, [r2, #14]
    1a26:	e7f1      	b.n	1a0c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1a28:	0020      	movs	r0, r4
    1a2a:	68e3      	ldr	r3, [r4, #12]
    1a2c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1a2e:	2302      	movs	r3, #2
    1a30:	6822      	ldr	r2, [r4, #0]
    1a32:	7393      	strb	r3, [r2, #14]
    1a34:	e7ec      	b.n	1a10 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1a36:	0020      	movs	r0, r4
    1a38:	6923      	ldr	r3, [r4, #16]
    1a3a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1a3c:	2310      	movs	r3, #16
    1a3e:	6822      	ldr	r2, [r4, #0]
    1a40:	7393      	strb	r3, [r2, #14]
    1a42:	e7e7      	b.n	1a14 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1a44:	0020      	movs	r0, r4
    1a46:	6963      	ldr	r3, [r4, #20]
    1a48:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1a4a:	6823      	ldr	r3, [r4, #0]
    1a4c:	2220      	movs	r2, #32
    1a4e:	739a      	strb	r2, [r3, #14]
}
    1a50:	e7e2      	b.n	1a18 <_tc_interrupt_handler+0x24>
    1a52:	46c0      	nop			; (mov r8, r8)
    1a54:	20000718 	.word	0x20000718

00001a58 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1a58:	b510      	push	{r4, lr}
    1a5a:	2000      	movs	r0, #0
    1a5c:	4b01      	ldr	r3, [pc, #4]	; (1a64 <TC1_Handler+0xc>)
    1a5e:	4798      	blx	r3
    1a60:	bd10      	pop	{r4, pc}
    1a62:	46c0      	nop			; (mov r8, r8)
    1a64:	000019f5 	.word	0x000019f5

00001a68 <TC2_Handler>:
    1a68:	b510      	push	{r4, lr}
    1a6a:	2001      	movs	r0, #1
    1a6c:	4b01      	ldr	r3, [pc, #4]	; (1a74 <TC2_Handler+0xc>)
    1a6e:	4798      	blx	r3
    1a70:	bd10      	pop	{r4, pc}
    1a72:	46c0      	nop			; (mov r8, r8)
    1a74:	000019f5 	.word	0x000019f5

00001a78 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    1a78:	b570      	push	{r4, r5, r6, lr}
    1a7a:	0005      	movs	r5, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1a7c:	6804      	ldr	r4, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1a7e:	0020      	movs	r0, r4
    1a80:	4b0e      	ldr	r3, [pc, #56]	; (1abc <spi_reset+0x44>)
    1a82:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1a84:	231f      	movs	r3, #31
    1a86:	4018      	ands	r0, r3
    1a88:	3b1e      	subs	r3, #30
    1a8a:	4083      	lsls	r3, r0
    1a8c:	2280      	movs	r2, #128	; 0x80
    1a8e:	490c      	ldr	r1, [pc, #48]	; (1ac0 <spi_reset+0x48>)
    1a90:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1a92:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1a94:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    1a96:	2b00      	cmp	r3, #0
    1a98:	d1fc      	bne.n	1a94 <spi_reset+0x1c>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    1a9a:	338f      	adds	r3, #143	; 0x8f
    1a9c:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    1a9e:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1aa0:	6823      	ldr	r3, [r4, #0]
    1aa2:	2202      	movs	r2, #2
    1aa4:	4393      	bics	r3, r2
    1aa6:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1aa8:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1aaa:	69d3      	ldr	r3, [r2, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    1aac:	2b00      	cmp	r3, #0
    1aae:	d1fc      	bne.n	1aaa <spi_reset+0x32>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    1ab0:	6823      	ldr	r3, [r4, #0]
    1ab2:	2201      	movs	r2, #1
    1ab4:	4313      	orrs	r3, r2
    1ab6:	6023      	str	r3, [r4, #0]
}
    1ab8:	bd70      	pop	{r4, r5, r6, pc}
    1aba:	46c0      	nop			; (mov r8, r8)
    1abc:	00001f19 	.word	0x00001f19
    1ac0:	e000e100 	.word	0xe000e100

00001ac4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ac6:	b08b      	sub	sp, #44	; 0x2c
    1ac8:	0005      	movs	r5, r0
    1aca:	000c      	movs	r4, r1
    1acc:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1ace:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1ad0:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1ad2:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1ad4:	079b      	lsls	r3, r3, #30
    1ad6:	d501      	bpl.n	1adc <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1ad8:	b00b      	add	sp, #44	; 0x2c
    1ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1adc:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1ade:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1ae0:	07db      	lsls	r3, r3, #31
    1ae2:	d4f9      	bmi.n	1ad8 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1ae4:	0008      	movs	r0, r1
    1ae6:	4b6f      	ldr	r3, [pc, #444]	; (1ca4 <spi_init+0x1e0>)
    1ae8:	4798      	blx	r3
    1aea:	4a6f      	ldr	r2, [pc, #444]	; (1ca8 <spi_init+0x1e4>)
    1aec:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1aee:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1af0:	2301      	movs	r3, #1
    1af2:	40bb      	lsls	r3, r7
    1af4:	430b      	orrs	r3, r1
    1af6:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1af8:	a909      	add	r1, sp, #36	; 0x24
    1afa:	2724      	movs	r7, #36	; 0x24
    1afc:	5df3      	ldrb	r3, [r6, r7]
    1afe:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1b00:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1b02:	b2c3      	uxtb	r3, r0
    1b04:	9301      	str	r3, [sp, #4]
    1b06:	0018      	movs	r0, r3
    1b08:	4b68      	ldr	r3, [pc, #416]	; (1cac <spi_init+0x1e8>)
    1b0a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1b0c:	9801      	ldr	r0, [sp, #4]
    1b0e:	4b68      	ldr	r3, [pc, #416]	; (1cb0 <spi_init+0x1ec>)
    1b10:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1b12:	5df0      	ldrb	r0, [r6, r7]
    1b14:	2100      	movs	r1, #0
    1b16:	4b67      	ldr	r3, [pc, #412]	; (1cb4 <spi_init+0x1f0>)
    1b18:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1b1a:	7833      	ldrb	r3, [r6, #0]
    1b1c:	2b01      	cmp	r3, #1
    1b1e:	d03f      	beq.n	1ba0 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    1b20:	7833      	ldrb	r3, [r6, #0]
    1b22:	2b00      	cmp	r3, #0
    1b24:	d103      	bne.n	1b2e <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1b26:	6823      	ldr	r3, [r4, #0]
    1b28:	2208      	movs	r2, #8
    1b2a:	4313      	orrs	r3, r2
    1b2c:	6023      	str	r3, [r4, #0]
    1b2e:	002b      	movs	r3, r5
    1b30:	330c      	adds	r3, #12
    1b32:	0029      	movs	r1, r5
    1b34:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    1b36:	2200      	movs	r2, #0
    1b38:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1b3a:	428b      	cmp	r3, r1
    1b3c:	d1fc      	bne.n	1b38 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    1b3e:	2300      	movs	r3, #0
    1b40:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    1b42:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    1b44:	2400      	movs	r4, #0
    1b46:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    1b48:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    1b4a:	3336      	adds	r3, #54	; 0x36
    1b4c:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    1b4e:	3301      	adds	r3, #1
    1b50:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    1b52:	3301      	adds	r3, #1
    1b54:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    1b56:	3b35      	subs	r3, #53	; 0x35
    1b58:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    1b5a:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1b5c:	6828      	ldr	r0, [r5, #0]
    1b5e:	4b51      	ldr	r3, [pc, #324]	; (1ca4 <spi_init+0x1e0>)
    1b60:	4798      	blx	r3
    1b62:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    1b64:	4954      	ldr	r1, [pc, #336]	; (1cb8 <spi_init+0x1f4>)
    1b66:	4b55      	ldr	r3, [pc, #340]	; (1cbc <spi_init+0x1f8>)
    1b68:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1b6a:	00bf      	lsls	r7, r7, #2
    1b6c:	4b54      	ldr	r3, [pc, #336]	; (1cc0 <spi_init+0x1fc>)
    1b6e:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1b70:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1b72:	ab04      	add	r3, sp, #16
    1b74:	2280      	movs	r2, #128	; 0x80
    1b76:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1b78:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1b7a:	3a7f      	subs	r2, #127	; 0x7f
    1b7c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1b7e:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    1b80:	7833      	ldrb	r3, [r6, #0]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d102      	bne.n	1b8c <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1b86:	2200      	movs	r2, #0
    1b88:	ab04      	add	r3, sp, #16
    1b8a:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1b8c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1b8e:	9305      	str	r3, [sp, #20]
    1b90:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1b92:	9306      	str	r3, [sp, #24]
    1b94:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1b96:	9307      	str	r3, [sp, #28]
    1b98:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1b9a:	9308      	str	r3, [sp, #32]
    1b9c:	2400      	movs	r4, #0
    1b9e:	e00b      	b.n	1bb8 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1ba0:	6823      	ldr	r3, [r4, #0]
    1ba2:	220c      	movs	r2, #12
    1ba4:	4313      	orrs	r3, r2
    1ba6:	6023      	str	r3, [r4, #0]
    1ba8:	e7ba      	b.n	1b20 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1baa:	0038      	movs	r0, r7
    1bac:	4b45      	ldr	r3, [pc, #276]	; (1cc4 <spi_init+0x200>)
    1bae:	4798      	blx	r3
    1bb0:	e00a      	b.n	1bc8 <spi_init+0x104>
    1bb2:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1bb4:	2c04      	cmp	r4, #4
    1bb6:	d010      	beq.n	1bda <spi_init+0x116>
    1bb8:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1bba:	00a3      	lsls	r3, r4, #2
    1bbc:	aa02      	add	r2, sp, #8
    1bbe:	200c      	movs	r0, #12
    1bc0:	1812      	adds	r2, r2, r0
    1bc2:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    1bc4:	2800      	cmp	r0, #0
    1bc6:	d0f0      	beq.n	1baa <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    1bc8:	1c43      	adds	r3, r0, #1
    1bca:	d0f2      	beq.n	1bb2 <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1bcc:	a904      	add	r1, sp, #16
    1bce:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1bd0:	0c00      	lsrs	r0, r0, #16
    1bd2:	b2c0      	uxtb	r0, r0
    1bd4:	4b3c      	ldr	r3, [pc, #240]	; (1cc8 <spi_init+0x204>)
    1bd6:	4798      	blx	r3
    1bd8:	e7eb      	b.n	1bb2 <spi_init+0xee>
	module->mode             = config->mode;
    1bda:	7833      	ldrb	r3, [r6, #0]
    1bdc:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    1bde:	7c33      	ldrb	r3, [r6, #16]
    1be0:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    1be2:	7cb3      	ldrb	r3, [r6, #18]
    1be4:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1be6:	7d33      	ldrb	r3, [r6, #20]
    1be8:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    1bea:	2200      	movs	r2, #0
    1bec:	ab02      	add	r3, sp, #8
    1bee:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1bf0:	7833      	ldrb	r3, [r6, #0]
    1bf2:	2b01      	cmp	r3, #1
    1bf4:	d012      	beq.n	1c1c <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    1bf6:	7833      	ldrb	r3, [r6, #0]
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d126      	bne.n	1c4a <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    1bfc:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    1bfe:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    1c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1c02:	7ff1      	ldrb	r1, [r6, #31]
    1c04:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1c06:	7fb4      	ldrb	r4, [r6, #30]
    1c08:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    1c0a:	4319      	orrs	r1, r3
    1c0c:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    1c0e:	2320      	movs	r3, #32
    1c10:	5cf3      	ldrb	r3, [r6, r3]
    1c12:	2b00      	cmp	r3, #0
    1c14:	d01b      	beq.n	1c4e <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1c16:	2340      	movs	r3, #64	; 0x40
    1c18:	431a      	orrs	r2, r3
    1c1a:	e018      	b.n	1c4e <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1c1c:	6828      	ldr	r0, [r5, #0]
    1c1e:	4b21      	ldr	r3, [pc, #132]	; (1ca4 <spi_init+0x1e0>)
    1c20:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1c22:	300e      	adds	r0, #14
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1c24:	b2c0      	uxtb	r0, r0
    1c26:	4b29      	ldr	r3, [pc, #164]	; (1ccc <spi_init+0x208>)
    1c28:	4798      	blx	r3
    1c2a:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1c2c:	ab02      	add	r3, sp, #8
    1c2e:	1d9a      	adds	r2, r3, #6
    1c30:	69b0      	ldr	r0, [r6, #24]
    1c32:	4b27      	ldr	r3, [pc, #156]	; (1cd0 <spi_init+0x20c>)
    1c34:	4798      	blx	r3
    1c36:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1c38:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1c3a:	2b00      	cmp	r3, #0
    1c3c:	d000      	beq.n	1c40 <spi_init+0x17c>
    1c3e:	e74b      	b.n	1ad8 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    1c40:	ab02      	add	r3, sp, #8
    1c42:	3306      	adds	r3, #6
    1c44:	781b      	ldrb	r3, [r3, #0]
    1c46:	733b      	strb	r3, [r7, #12]
    1c48:	e7d5      	b.n	1bf6 <spi_init+0x132>
	uint32_t ctrlb = 0;
    1c4a:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    1c4c:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    1c4e:	6873      	ldr	r3, [r6, #4]
    1c50:	68b1      	ldr	r1, [r6, #8]
    1c52:	430b      	orrs	r3, r1
    1c54:	68f1      	ldr	r1, [r6, #12]
    1c56:	430b      	orrs	r3, r1
    1c58:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    1c5a:	7c31      	ldrb	r1, [r6, #16]
    1c5c:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    1c5e:	7c71      	ldrb	r1, [r6, #17]
    1c60:	2900      	cmp	r1, #0
    1c62:	d103      	bne.n	1c6c <spi_init+0x1a8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1c64:	491b      	ldr	r1, [pc, #108]	; (1cd4 <spi_init+0x210>)
    1c66:	7889      	ldrb	r1, [r1, #2]
    1c68:	0789      	lsls	r1, r1, #30
    1c6a:	d501      	bpl.n	1c70 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1c6c:	2180      	movs	r1, #128	; 0x80
    1c6e:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    1c70:	7cb1      	ldrb	r1, [r6, #18]
    1c72:	2900      	cmp	r1, #0
    1c74:	d002      	beq.n	1c7c <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1c76:	2180      	movs	r1, #128	; 0x80
    1c78:	0289      	lsls	r1, r1, #10
    1c7a:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    1c7c:	7cf1      	ldrb	r1, [r6, #19]
    1c7e:	2900      	cmp	r1, #0
    1c80:	d002      	beq.n	1c88 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1c82:	2180      	movs	r1, #128	; 0x80
    1c84:	0089      	lsls	r1, r1, #2
    1c86:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    1c88:	7d31      	ldrb	r1, [r6, #20]
    1c8a:	2900      	cmp	r1, #0
    1c8c:	d002      	beq.n	1c94 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1c8e:	2180      	movs	r1, #128	; 0x80
    1c90:	0189      	lsls	r1, r1, #6
    1c92:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    1c94:	6839      	ldr	r1, [r7, #0]
    1c96:	430b      	orrs	r3, r1
    1c98:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    1c9a:	687b      	ldr	r3, [r7, #4]
    1c9c:	431a      	orrs	r2, r3
    1c9e:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    1ca0:	2000      	movs	r0, #0
    1ca2:	e719      	b.n	1ad8 <spi_init+0x14>
    1ca4:	000006ed 	.word	0x000006ed
    1ca8:	40000400 	.word	0x40000400
    1cac:	0000275d 	.word	0x0000275d
    1cb0:	000026d1 	.word	0x000026d1
    1cb4:	000005e1 	.word	0x000005e1
    1cb8:	00001d39 	.word	0x00001d39
    1cbc:	00001edd 	.word	0x00001edd
    1cc0:	20000720 	.word	0x20000720
    1cc4:	0000062d 	.word	0x0000062d
    1cc8:	00002855 	.word	0x00002855
    1ccc:	00002779 	.word	0x00002779
    1cd0:	000005b9 	.word	0x000005b9
    1cd4:	41002000 	.word	0x41002000

00001cd8 <spi_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1cd8:	1c93      	adds	r3, r2, #2
    1cda:	009b      	lsls	r3, r3, #2
    1cdc:	18c3      	adds	r3, r0, r3
    1cde:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
    1ce0:	2136      	movs	r1, #54	; 0x36
    1ce2:	2301      	movs	r3, #1
    1ce4:	4093      	lsls	r3, r2
    1ce6:	001a      	movs	r2, r3
    1ce8:	5c43      	ldrb	r3, [r0, r1]
    1cea:	4313      	orrs	r3, r2
    1cec:	5443      	strb	r3, [r0, r1]
}
    1cee:	4770      	bx	lr

00001cf0 <spi_transceive_buffer_job>:
enum status_code spi_transceive_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    1cf0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);
	
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1cf2:	2417      	movs	r4, #23
	if (length == 0) {
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d101      	bne.n	1cfc <spi_transceive_buffer_job+0xc>

	/* Issue internal transceive */
	_spi_transceive_buffer(module, tx_data, rx_data, length);
	
	return STATUS_OK;
}
    1cf8:	0020      	movs	r0, r4
    1cfa:	bd30      	pop	{r4, r5, pc}
	if (!(module->receiver_enabled)) {
    1cfc:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
    1cfe:	3405      	adds	r4, #5
	if (!(module->receiver_enabled)) {
    1d00:	2d00      	cmp	r5, #0
    1d02:	d0f9      	beq.n	1cf8 <spi_transceive_buffer_job+0x8>
	if (module->status == STATUS_BUSY) {
    1d04:	341c      	adds	r4, #28
    1d06:	5d05      	ldrb	r5, [r0, r4]
		return STATUS_BUSY;
    1d08:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    1d0a:	2d05      	cmp	r5, #5
    1d0c:	d0f4      	beq.n	1cf8 <spi_transceive_buffer_job+0x8>
	module->remaining_tx_buffer_length = length;
    1d0e:	8683      	strh	r3, [r0, #52]	; 0x34
	module->remaining_rx_buffer_length = length;
    1d10:	8603      	strh	r3, [r0, #48]	; 0x30
	module->rx_buffer_ptr = rx_data;
    1d12:	6282      	str	r2, [r0, #40]	; 0x28
	module->tx_buffer_ptr = tx_data;
    1d14:	62c1      	str	r1, [r0, #44]	; 0x2c
	module->status = STATUS_BUSY;
    1d16:	2205      	movs	r2, #5
    1d18:	2338      	movs	r3, #56	; 0x38
    1d1a:	54c2      	strb	r2, [r0, r3]
	module->dir = SPI_DIRECTION_BOTH;
    1d1c:	3b36      	subs	r3, #54	; 0x36
    1d1e:	7243      	strb	r3, [r0, #9]
	SercomSpi *const hw = &(module->hw->SPI);
    1d20:	6803      	ldr	r3, [r0, #0]
	hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
    1d22:	759a      	strb	r2, [r3, #22]
	hw->INTFLAG.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
    1d24:	3280      	adds	r2, #128	; 0x80
    1d26:	761a      	strb	r2, [r3, #24]
	if (module->mode == SPI_MODE_SLAVE) {
    1d28:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    1d2a:	2400      	movs	r4, #0
	if (module->mode == SPI_MODE_SLAVE) {
    1d2c:	2a00      	cmp	r2, #0
    1d2e:	d1e3      	bne.n	1cf8 <spi_transceive_buffer_job+0x8>
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1d30:	3202      	adds	r2, #2
    1d32:	761a      	strb	r2, [r3, #24]
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1d34:	759a      	strb	r2, [r3, #22]
    1d36:	e7df      	b.n	1cf8 <spi_transceive_buffer_job+0x8>

00001d38 <_spi_interrupt_handler>:

extern volatile bool spi_reset_1 ;


void _spi_interrupt_handler(uint8_t instance)
{
    1d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	
	//*PORT_SET	=  G2_RGB;
	
	/* Get device instance from the look-up table */
	struct spi_module *module = (struct spi_module *)_sercom_instances[instance];
    1d3a:	0080      	lsls	r0, r0, #2
    1d3c:	4b60      	ldr	r3, [pc, #384]	; (1ec0 <_spi_interrupt_handler+0x188>)
    1d3e:	58c5      	ldr	r5, [r0, r3]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1d40:	682e      	ldr	r6, [r5, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask = module->enabled_callback & module->registered_callback;
    1d42:	2337      	movs	r3, #55	; 0x37
    1d44:	5cef      	ldrb	r7, [r5, r3]
    1d46:	2236      	movs	r2, #54	; 0x36
    1d48:	5caa      	ldrb	r2, [r5, r2]
    1d4a:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1d4c:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    1d4e:	7db4      	ldrb	r4, [r6, #22]
    1d50:	401c      	ands	r4, r3
	
	/* Data register empty interrupt */ 
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) 
    1d52:	07e3      	lsls	r3, r4, #31
    1d54:	d514      	bpl.n	1d80 <_spi_interrupt_handler+0x48>
	{
		if((module->mode == SPI_MODE_SLAVE) &&(module->dir != SPI_DIRECTION_READ))
    1d56:	796b      	ldrb	r3, [r5, #5]
    1d58:	2b00      	cmp	r3, #0
    1d5a:	d111      	bne.n	1d80 <_spi_interrupt_handler+0x48>
    1d5c:	7a6b      	ldrb	r3, [r5, #9]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00e      	beq.n	1d80 <_spi_interrupt_handler+0x48>
		 {
			//_spi_write(module);
			//*PORT_SET	=  B2_RGB;
			data_to_send = *(module->tx_buffer_ptr);
    1d62:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    1d64:	781a      	ldrb	r2, [r3, #0]
			(module->tx_buffer_ptr)++;
    1d66:	3301      	adds	r3, #1
    1d68:	62eb      	str	r3, [r5, #44]	; 0x2c
			spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1d6a:	62b2      	str	r2, [r6, #40]	; 0x28
			(module->remaining_tx_buffer_length)--;
    1d6c:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    1d6e:	3b01      	subs	r3, #1
    1d70:	b29b      	uxth	r3, r3
    1d72:	86ab      	strh	r3, [r5, #52]	; 0x34
		
			if (module->remaining_tx_buffer_length == 0) 
    1d74:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    1d76:	b29b      	uxth	r3, r3
    1d78:	2b00      	cmp	r3, #0
    1d7a:	d101      	bne.n	1d80 <_spi_interrupt_handler+0x48>
			{
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1d7c:	3301      	adds	r3, #1
    1d7e:	7533      	strb	r3, [r6, #20]
			//*PORT_CLEAR	=  B2_RGB;
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1d80:	0763      	lsls	r3, r4, #29
    1d82:	d505      	bpl.n	1d90 <_spi_interrupt_handler+0x58>
		/* Check for overflow */
		//*PORT_SET	=  B2_RGB;
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) 
    1d84:	8b73      	ldrh	r3, [r6, #26]
    1d86:	075b      	lsls	r3, r3, #29
    1d88:	d520      	bpl.n	1dcc <_spi_interrupt_handler+0x94>
		{
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1d8a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1d8c:	2304      	movs	r3, #4
    1d8e:	8373      	strh	r3, [r6, #26]
			}
			
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1d90:	07a3      	lsls	r3, r4, #30
    1d92:	d50b      	bpl.n	1dac <_spi_interrupt_handler+0x74>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1d94:	796b      	ldrb	r3, [r5, #5]
    1d96:	2b00      	cmp	r3, #0
    1d98:	d113      	bne.n	1dc2 <_spi_interrupt_handler+0x8a>
			
			spi_reset_1 = true;
    1d9a:	2201      	movs	r2, #1
    1d9c:	4b49      	ldr	r3, [pc, #292]	; (1ec4 <_spi_interrupt_handler+0x18c>)
    1d9e:	701a      	strb	r2, [r3, #0]
			if(module->dir == SPI_DIRECTION_BOTH) {
    1da0:	7a6b      	ldrb	r3, [r5, #9]
    1da2:	2b02      	cmp	r3, #2
    1da4:	d100      	bne.n	1da8 <_spi_interrupt_handler+0x70>
    1da6:	e076      	b.n	1e96 <_spi_interrupt_handler+0x15e>
					(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
					
				}
			}
			
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1da8:	2302      	movs	r3, #2
    1daa:	7633      	strb	r3, [r6, #24]

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
        
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1dac:	0723      	lsls	r3, r4, #28
    1dae:	d508      	bpl.n	1dc2 <_spi_interrupt_handler+0x8a>
			if (module->mode == SPI_MODE_SLAVE) {
    1db0:	796b      	ldrb	r3, [r5, #5]
    1db2:	2b00      	cmp	r3, #0
    1db4:	d105      	bne.n	1dc2 <_spi_interrupt_handler+0x8a>
				//*PORT_SET	=  B2_RGB;
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1db6:	3308      	adds	r3, #8
    1db8:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1dba:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1dbc:	06bb      	lsls	r3, r7, #26
    1dbe:	d500      	bpl.n	1dc2 <_spi_interrupt_handler+0x8a>
    1dc0:	e070      	b.n	1ea4 <_spi_interrupt_handler+0x16c>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1dc2:	b264      	sxtb	r4, r4
    1dc4:	2c00      	cmp	r4, #0
    1dc6:	da00      	bge.n	1dca <_spi_interrupt_handler+0x92>
    1dc8:	e070      	b.n	1eac <_spi_interrupt_handler+0x174>
	}
#  endif
	
	
  
}
    1dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1dcc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
				*(module->rx_buffer_ptr) = received_data;
    1dce:	b2db      	uxtb	r3, r3
    1dd0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1dd2:	7013      	strb	r3, [r2, #0]
				module->rx_buffer_ptr += 1;
    1dd4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    1dd6:	1c4b      	adds	r3, r1, #1
    1dd8:	62ab      	str	r3, [r5, #40]	; 0x28
				module->remaining_rx_buffer_length--;
    1dda:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    1ddc:	3b01      	subs	r3, #1
    1dde:	b29b      	uxth	r3, r3
    1de0:	862b      	strh	r3, [r5, #48]	; 0x30
				buffer_length++;
    1de2:	4a39      	ldr	r2, [pc, #228]	; (1ec8 <_spi_interrupt_handler+0x190>)
    1de4:	7813      	ldrb	r3, [r2, #0]
    1de6:	3301      	adds	r3, #1
    1de8:	b2db      	uxtb	r3, r3
    1dea:	7013      	strb	r3, [r2, #0]
				if(buffer_length == 1)
    1dec:	2b01      	cmp	r3, #1
    1dee:	d01b      	beq.n	1e28 <_spi_interrupt_handler+0xf0>
				if (module->remaining_rx_buffer_length == 0) 
    1df0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    1df2:	b29b      	uxth	r3, r3
    1df4:	2b00      	cmp	r3, #0
    1df6:	d1cb      	bne.n	1d90 <_spi_interrupt_handler+0x58>
					buffer_length = 0;
    1df8:	4a33      	ldr	r2, [pc, #204]	; (1ec8 <_spi_interrupt_handler+0x190>)
    1dfa:	7013      	strb	r3, [r2, #0]
					transcation_start = false;
    1dfc:	4a33      	ldr	r2, [pc, #204]	; (1ecc <_spi_interrupt_handler+0x194>)
    1dfe:	7013      	strb	r3, [r2, #0]
					serial_timeout = false;
    1e00:	4a33      	ldr	r2, [pc, #204]	; (1ed0 <_spi_interrupt_handler+0x198>)
    1e02:	7013      	strb	r3, [r2, #0]
					serial_timeout_count = 0 ;
    1e04:	4a33      	ldr	r2, [pc, #204]	; (1ed4 <_spi_interrupt_handler+0x19c>)
    1e06:	7013      	strb	r3, [r2, #0]
					module->status = STATUS_OK;
    1e08:	2238      	movs	r2, #56	; 0x38
    1e0a:	54ab      	strb	r3, [r5, r2]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1e0c:	3304      	adds	r3, #4
    1e0e:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1e10:	7a6b      	ldrb	r3, [r5, #9]
    1e12:	2b02      	cmp	r3, #2
    1e14:	d038      	beq.n	1e88 <_spi_interrupt_handler+0x150>
					} else if (module->dir == SPI_DIRECTION_READ) {
    1e16:	7a6b      	ldrb	r3, [r5, #9]
    1e18:	2b00      	cmp	r3, #0
    1e1a:	d1b9      	bne.n	1d90 <_spi_interrupt_handler+0x58>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1e1c:	07bb      	lsls	r3, r7, #30
    1e1e:	d5b7      	bpl.n	1d90 <_spi_interrupt_handler+0x58>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1e20:	0028      	movs	r0, r5
    1e22:	692b      	ldr	r3, [r5, #16]
    1e24:	4798      	blx	r3
    1e26:	e7b3      	b.n	1d90 <_spi_interrupt_handler+0x58>
					transcation_start = true;
    1e28:	2201      	movs	r2, #1
    1e2a:	4b28      	ldr	r3, [pc, #160]	; (1ecc <_spi_interrupt_handler+0x194>)
    1e2c:	701a      	strb	r2, [r3, #0]
					serial_timeout = false;
    1e2e:	2300      	movs	r3, #0
    1e30:	4a27      	ldr	r2, [pc, #156]	; (1ed0 <_spi_interrupt_handler+0x198>)
    1e32:	7013      	strb	r3, [r2, #0]
					serial_timeout_count = 0 ; 
    1e34:	4a27      	ldr	r2, [pc, #156]	; (1ed4 <_spi_interrupt_handler+0x19c>)
    1e36:	7013      	strb	r3, [r2, #0]
					if ((*(module->rx_buffer_ptr-1) == WR_SPI_INT_SET_ALL )) 
    1e38:	780b      	ldrb	r3, [r1, #0]
    1e3a:	b2db      	uxtb	r3, r3
    1e3c:	2bea      	cmp	r3, #234	; 0xea
    1e3e:	d011      	beq.n	1e64 <_spi_interrupt_handler+0x12c>
					else if((*(module->rx_buffer_ptr-1) == DEVICE_VERSION) || (*(module->rx_buffer_ptr-1) == WR_SPI_INT_RECEIVE_ALL) )
    1e40:	780b      	ldrb	r3, [r1, #0]
    1e42:	b2db      	uxtb	r3, r3
    1e44:	2b8c      	cmp	r3, #140	; 0x8c
    1e46:	d003      	beq.n	1e50 <_spi_interrupt_handler+0x118>
    1e48:	780b      	ldrb	r3, [r1, #0]
    1e4a:	b2db      	uxtb	r3, r3
    1e4c:	2bcc      	cmp	r3, #204	; 0xcc
    1e4e:	d1cf      	bne.n	1df0 <_spi_interrupt_handler+0xb8>
						if(*(module->rx_buffer_ptr-1) == WR_SPI_INT_RECEIVE_ALL)
    1e50:	780b      	ldrb	r3, [r1, #0]
    1e52:	b2db      	uxtb	r3, r3
    1e54:	2bcc      	cmp	r3, #204	; 0xcc
    1e56:	d00e      	beq.n	1e76 <_spi_interrupt_handler+0x13e>
							*(module->tx_buffer_ptr)      =	DEVICE_ID_HF ;
    1e58:	2302      	movs	r3, #2
    1e5a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    1e5c:	7013      	strb	r3, [r2, #0]
							*(module->tx_buffer_ptr + 1)  = DEVICE_ID_FIRMWARE ;
    1e5e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    1e60:	7053      	strb	r3, [r2, #1]
    1e62:	e7c5      	b.n	1df0 <_spi_interrupt_handler+0xb8>
						module->remaining_tx_buffer_length =  LENGTH_SET_ALL_COMMAND - (INITIAL_LENGTH - module->remaining_tx_buffer_length);
    1e64:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    1e66:	3309      	adds	r3, #9
    1e68:	b29b      	uxth	r3, r3
    1e6a:	86ab      	strh	r3, [r5, #52]	; 0x34
						module->remaining_rx_buffer_length =  LENGTH_SET_ALL_COMMAND - (INITIAL_LENGTH - module->remaining_rx_buffer_length);
    1e6c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    1e6e:	3309      	adds	r3, #9
    1e70:	b29b      	uxth	r3, r3
    1e72:	862b      	strh	r3, [r5, #48]	; 0x30
    1e74:	e7bc      	b.n	1df0 <_spi_interrupt_handler+0xb8>
							 module->remaining_tx_buffer_length =  LENGTH_SENSOR_MAKE_COMMAND - (INITIAL_LENGTH - module->remaining_tx_buffer_length);
    1e76:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    1e78:	3302      	adds	r3, #2
    1e7a:	b29b      	uxth	r3, r3
    1e7c:	86ab      	strh	r3, [r5, #52]	; 0x34
							 module->remaining_rx_buffer_length =  LENGTH_SENSOR_MAKE_COMMAND - (INITIAL_LENGTH - module->remaining_rx_buffer_length);
    1e7e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    1e80:	3302      	adds	r3, #2
    1e82:	b29b      	uxth	r3, r3
    1e84:	862b      	strh	r3, [r5, #48]	; 0x30
    1e86:	e7b3      	b.n	1df0 <_spi_interrupt_handler+0xb8>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1e88:	077b      	lsls	r3, r7, #29
    1e8a:	d400      	bmi.n	1e8e <_spi_interrupt_handler+0x156>
    1e8c:	e780      	b.n	1d90 <_spi_interrupt_handler+0x58>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1e8e:	0028      	movs	r0, r5
    1e90:	696b      	ldr	r3, [r5, #20]
    1e92:	4798      	blx	r3
    1e94:	e77c      	b.n	1d90 <_spi_interrupt_handler+0x58>
				if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1e96:	077b      	lsls	r3, r7, #29
    1e98:	d400      	bmi.n	1e9c <_spi_interrupt_handler+0x164>
    1e9a:	e785      	b.n	1da8 <_spi_interrupt_handler+0x70>
					(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1e9c:	0028      	movs	r0, r5
    1e9e:	696b      	ldr	r3, [r5, #20]
    1ea0:	4798      	blx	r3
    1ea2:	e781      	b.n	1da8 <_spi_interrupt_handler+0x70>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1ea4:	0028      	movs	r0, r5
    1ea6:	6a2b      	ldr	r3, [r5, #32]
    1ea8:	4798      	blx	r3
    1eaa:	e78a      	b.n	1dc2 <_spi_interrupt_handler+0x8a>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1eac:	2380      	movs	r3, #128	; 0x80
    1eae:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1eb0:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1eb2:	067b      	lsls	r3, r7, #25
    1eb4:	d400      	bmi.n	1eb8 <_spi_interrupt_handler+0x180>
    1eb6:	e788      	b.n	1dca <_spi_interrupt_handler+0x92>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1eb8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1eba:	0028      	movs	r0, r5
    1ebc:	4798      	blx	r3
}
    1ebe:	e784      	b.n	1dca <_spi_interrupt_handler+0x92>
    1ec0:	20000720 	.word	0x20000720
    1ec4:	2000014e 	.word	0x2000014e
    1ec8:	20000117 	.word	0x20000117
    1ecc:	2000014f 	.word	0x2000014f
    1ed0:	2000014c 	.word	0x2000014c
    1ed4:	2000014d 	.word	0x2000014d

00001ed8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1ed8:	4770      	bx	lr
	...

00001edc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1edc:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1ede:	4b0a      	ldr	r3, [pc, #40]	; (1f08 <_sercom_set_handler+0x2c>)
    1ee0:	781b      	ldrb	r3, [r3, #0]
    1ee2:	2b00      	cmp	r3, #0
    1ee4:	d10c      	bne.n	1f00 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1ee6:	4c09      	ldr	r4, [pc, #36]	; (1f0c <_sercom_set_handler+0x30>)
    1ee8:	4d09      	ldr	r5, [pc, #36]	; (1f10 <_sercom_set_handler+0x34>)
    1eea:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    1eec:	4b09      	ldr	r3, [pc, #36]	; (1f14 <_sercom_set_handler+0x38>)
    1eee:	2200      	movs	r2, #0
    1ef0:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1ef2:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    1ef4:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1ef6:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    1ef8:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
    1efa:	3201      	adds	r2, #1
    1efc:	4b02      	ldr	r3, [pc, #8]	; (1f08 <_sercom_set_handler+0x2c>)
    1efe:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1f00:	0080      	lsls	r0, r0, #2
    1f02:	4b02      	ldr	r3, [pc, #8]	; (1f0c <_sercom_set_handler+0x30>)
    1f04:	50c1      	str	r1, [r0, r3]
}
    1f06:	bd30      	pop	{r4, r5, pc}
    1f08:	20000118 	.word	0x20000118
    1f0c:	2000011c 	.word	0x2000011c
    1f10:	00001ed9 	.word	0x00001ed9
    1f14:	20000720 	.word	0x20000720

00001f18 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1f18:	b510      	push	{r4, lr}
    1f1a:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1f1c:	ac01      	add	r4, sp, #4
    1f1e:	2309      	movs	r3, #9
    1f20:	7023      	strb	r3, [r4, #0]
    1f22:	3301      	adds	r3, #1
    1f24:	7063      	strb	r3, [r4, #1]
    1f26:	3301      	adds	r3, #1
    1f28:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1f2a:	4b02      	ldr	r3, [pc, #8]	; (1f34 <_sercom_get_interrupt_vector+0x1c>)
    1f2c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1f2e:	5620      	ldrsb	r0, [r4, r0]
}
    1f30:	b002      	add	sp, #8
    1f32:	bd10      	pop	{r4, pc}
    1f34:	000006ed 	.word	0x000006ed

00001f38 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1f38:	b510      	push	{r4, lr}
    1f3a:	4b02      	ldr	r3, [pc, #8]	; (1f44 <SERCOM0_Handler+0xc>)
    1f3c:	681b      	ldr	r3, [r3, #0]
    1f3e:	2000      	movs	r0, #0
    1f40:	4798      	blx	r3
    1f42:	bd10      	pop	{r4, pc}
    1f44:	2000011c 	.word	0x2000011c

00001f48 <SERCOM1_Handler>:
    1f48:	b510      	push	{r4, lr}
    1f4a:	4b02      	ldr	r3, [pc, #8]	; (1f54 <SERCOM1_Handler+0xc>)
    1f4c:	685b      	ldr	r3, [r3, #4]
    1f4e:	2001      	movs	r0, #1
    1f50:	4798      	blx	r3
    1f52:	bd10      	pop	{r4, pc}
    1f54:	2000011c 	.word	0x2000011c

00001f58 <SERCOM2_Handler>:
    1f58:	b510      	push	{r4, lr}
    1f5a:	4b02      	ldr	r3, [pc, #8]	; (1f64 <SERCOM2_Handler+0xc>)
    1f5c:	689b      	ldr	r3, [r3, #8]
    1f5e:	2002      	movs	r0, #2
    1f60:	4798      	blx	r3
    1f62:	bd10      	pop	{r4, pc}
    1f64:	2000011c 	.word	0x2000011c

00001f68 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1f68:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    1f6a:	2a00      	cmp	r2, #0
    1f6c:	d001      	beq.n	1f72 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1f6e:	0018      	movs	r0, r3
    1f70:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    1f72:	008b      	lsls	r3, r1, #2
    1f74:	4a06      	ldr	r2, [pc, #24]	; (1f90 <extint_register_callback+0x28>)
    1f76:	589b      	ldr	r3, [r3, r2]
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d003      	beq.n	1f84 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    1f7c:	4283      	cmp	r3, r0
    1f7e:	d005      	beq.n	1f8c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    1f80:	231d      	movs	r3, #29
    1f82:	e7f4      	b.n	1f6e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    1f84:	0089      	lsls	r1, r1, #2
    1f86:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    1f88:	2300      	movs	r3, #0
    1f8a:	e7f0      	b.n	1f6e <extint_register_callback+0x6>
		return STATUS_OK;
    1f8c:	2300      	movs	r3, #0
    1f8e:	e7ee      	b.n	1f6e <extint_register_callback+0x6>
    1f90:	200001cc 	.word	0x200001cc

00001f94 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1f94:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1f96:	2900      	cmp	r1, #0
    1f98:	d001      	beq.n	1f9e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    1f9a:	0018      	movs	r0, r3
    1f9c:	4770      	bx	lr
		return NULL;
    1f9e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    1fa0:	281f      	cmp	r0, #31
    1fa2:	d800      	bhi.n	1fa6 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    1fa4:	4a02      	ldr	r2, [pc, #8]	; (1fb0 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    1fa6:	2301      	movs	r3, #1
    1fa8:	4083      	lsls	r3, r0
    1faa:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    1fac:	2300      	movs	r3, #0
    1fae:	e7f4      	b.n	1f9a <extint_chan_enable_callback+0x6>
    1fb0:	40001800 	.word	0x40001800

00001fb4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1fb4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1fb6:	2200      	movs	r2, #0
    1fb8:	4b10      	ldr	r3, [pc, #64]	; (1ffc <EIC_Handler+0x48>)
    1fba:	701a      	strb	r2, [r3, #0]
    1fbc:	2300      	movs	r3, #0
    1fbe:	4910      	ldr	r1, [pc, #64]	; (2000 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1fc0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1fc2:	4e10      	ldr	r6, [pc, #64]	; (2004 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1fc4:	4c0d      	ldr	r4, [pc, #52]	; (1ffc <EIC_Handler+0x48>)
    1fc6:	e00a      	b.n	1fde <EIC_Handler+0x2a>
		return eics[eic_index];
    1fc8:	490d      	ldr	r1, [pc, #52]	; (2000 <EIC_Handler+0x4c>)
    1fca:	e008      	b.n	1fde <EIC_Handler+0x2a>
    1fcc:	7823      	ldrb	r3, [r4, #0]
    1fce:	3301      	adds	r3, #1
    1fd0:	b2db      	uxtb	r3, r3
    1fd2:	7023      	strb	r3, [r4, #0]
    1fd4:	2b0f      	cmp	r3, #15
    1fd6:	d810      	bhi.n	1ffa <EIC_Handler+0x46>
		return NULL;
    1fd8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    1fda:	2b1f      	cmp	r3, #31
    1fdc:	d9f4      	bls.n	1fc8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    1fde:	0028      	movs	r0, r5
    1fe0:	4018      	ands	r0, r3
    1fe2:	2201      	movs	r2, #1
    1fe4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    1fe6:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    1fe8:	4210      	tst	r0, r2
    1fea:	d0ef      	beq.n	1fcc <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1fec:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1fee:	009b      	lsls	r3, r3, #2
    1ff0:	599b      	ldr	r3, [r3, r6]
    1ff2:	2b00      	cmp	r3, #0
    1ff4:	d0ea      	beq.n	1fcc <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1ff6:	4798      	blx	r3
    1ff8:	e7e8      	b.n	1fcc <EIC_Handler+0x18>
			}
		}
	}
}
    1ffa:	bd70      	pop	{r4, r5, r6, pc}
    1ffc:	2000072c 	.word	0x2000072c
    2000:	40001800 	.word	0x40001800
    2004:	200001cc 	.word	0x200001cc

00002008 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    2008:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    200a:	2000      	movs	r0, #0
    200c:	4b08      	ldr	r3, [pc, #32]	; (2030 <delay_init+0x28>)
    200e:	4798      	blx	r3
    2010:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    2012:	4c08      	ldr	r4, [pc, #32]	; (2034 <delay_init+0x2c>)
    2014:	21fa      	movs	r1, #250	; 0xfa
    2016:	0089      	lsls	r1, r1, #2
    2018:	47a0      	blx	r4
    201a:	4b07      	ldr	r3, [pc, #28]	; (2038 <delay_init+0x30>)
    201c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    201e:	4907      	ldr	r1, [pc, #28]	; (203c <delay_init+0x34>)
    2020:	0028      	movs	r0, r5
    2022:	47a0      	blx	r4
    2024:	4b06      	ldr	r3, [pc, #24]	; (2040 <delay_init+0x38>)
    2026:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    2028:	2205      	movs	r2, #5
    202a:	4b06      	ldr	r3, [pc, #24]	; (2044 <delay_init+0x3c>)
    202c:	601a      	str	r2, [r3, #0]
}
    202e:	bd70      	pop	{r4, r5, r6, pc}
    2030:	00002645 	.word	0x00002645
    2034:	00002a19 	.word	0x00002a19
    2038:	20000008 	.word	0x20000008
    203c:	000f4240 	.word	0x000f4240
    2040:	2000000c 	.word	0x2000000c
    2044:	e000e010 	.word	0xe000e010

00002048 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    2048:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    204a:	4b08      	ldr	r3, [pc, #32]	; (206c <delay_cycles_us+0x24>)
    204c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    204e:	4a08      	ldr	r2, [pc, #32]	; (2070 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    2050:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2052:	2180      	movs	r1, #128	; 0x80
    2054:	0249      	lsls	r1, r1, #9
	while (n--) {
    2056:	3801      	subs	r0, #1
    2058:	d307      	bcc.n	206a <delay_cycles_us+0x22>
	if (n > 0) {
    205a:	2c00      	cmp	r4, #0
    205c:	d0fb      	beq.n	2056 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    205e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    2060:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2062:	6813      	ldr	r3, [r2, #0]
    2064:	420b      	tst	r3, r1
    2066:	d0fc      	beq.n	2062 <delay_cycles_us+0x1a>
    2068:	e7f5      	b.n	2056 <delay_cycles_us+0xe>
	}
}
    206a:	bd30      	pop	{r4, r5, pc}
    206c:	2000000c 	.word	0x2000000c
    2070:	e000e010 	.word	0xe000e010

00002074 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    2074:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    2076:	4b08      	ldr	r3, [pc, #32]	; (2098 <delay_cycles_ms+0x24>)
    2078:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    207a:	4a08      	ldr	r2, [pc, #32]	; (209c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    207c:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    207e:	2180      	movs	r1, #128	; 0x80
    2080:	0249      	lsls	r1, r1, #9
	while (n--) {
    2082:	3801      	subs	r0, #1
    2084:	d307      	bcc.n	2096 <delay_cycles_ms+0x22>
	if (n > 0) {
    2086:	2c00      	cmp	r4, #0
    2088:	d0fb      	beq.n	2082 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    208a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    208c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    208e:	6813      	ldr	r3, [r2, #0]
    2090:	420b      	tst	r3, r1
    2092:	d0fc      	beq.n	208e <delay_cycles_ms+0x1a>
    2094:	e7f5      	b.n	2082 <delay_cycles_ms+0xe>
	}
}
    2096:	bd30      	pop	{r4, r5, pc}
    2098:	20000008 	.word	0x20000008
    209c:	e000e010 	.word	0xe000e010

000020a0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    20a0:	b500      	push	{lr}
    20a2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    20a4:	ab01      	add	r3, sp, #4
    20a6:	2280      	movs	r2, #128	; 0x80
    20a8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    20aa:	780a      	ldrb	r2, [r1, #0]
    20ac:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    20ae:	784a      	ldrb	r2, [r1, #1]
    20b0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    20b2:	788a      	ldrb	r2, [r1, #2]
    20b4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    20b6:	0019      	movs	r1, r3
    20b8:	4b01      	ldr	r3, [pc, #4]	; (20c0 <port_pin_set_config+0x20>)
    20ba:	4798      	blx	r3
}
    20bc:	b003      	add	sp, #12
    20be:	bd00      	pop	{pc}
    20c0:	00002855 	.word	0x00002855

000020c4 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    20c4:	4770      	bx	lr
	...

000020c8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    20c8:	4b0c      	ldr	r3, [pc, #48]	; (20fc <cpu_irq_enter_critical+0x34>)
    20ca:	681b      	ldr	r3, [r3, #0]
    20cc:	2b00      	cmp	r3, #0
    20ce:	d106      	bne.n	20de <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    20d0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    20d4:	2b00      	cmp	r3, #0
    20d6:	d007      	beq.n	20e8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    20d8:	2200      	movs	r2, #0
    20da:	4b09      	ldr	r3, [pc, #36]	; (2100 <cpu_irq_enter_critical+0x38>)
    20dc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    20de:	4a07      	ldr	r2, [pc, #28]	; (20fc <cpu_irq_enter_critical+0x34>)
    20e0:	6813      	ldr	r3, [r2, #0]
    20e2:	3301      	adds	r3, #1
    20e4:	6013      	str	r3, [r2, #0]
}
    20e6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    20e8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    20ea:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    20ee:	2200      	movs	r2, #0
    20f0:	4b04      	ldr	r3, [pc, #16]	; (2104 <cpu_irq_enter_critical+0x3c>)
    20f2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    20f4:	3201      	adds	r2, #1
    20f6:	4b02      	ldr	r3, [pc, #8]	; (2100 <cpu_irq_enter_critical+0x38>)
    20f8:	701a      	strb	r2, [r3, #0]
    20fa:	e7f0      	b.n	20de <cpu_irq_enter_critical+0x16>
    20fc:	20000128 	.word	0x20000128
    2100:	2000012c 	.word	0x2000012c
    2104:	20000010 	.word	0x20000010

00002108 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2108:	4b08      	ldr	r3, [pc, #32]	; (212c <cpu_irq_leave_critical+0x24>)
    210a:	681a      	ldr	r2, [r3, #0]
    210c:	3a01      	subs	r2, #1
    210e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2110:	681b      	ldr	r3, [r3, #0]
    2112:	2b00      	cmp	r3, #0
    2114:	d109      	bne.n	212a <cpu_irq_leave_critical+0x22>
    2116:	4b06      	ldr	r3, [pc, #24]	; (2130 <cpu_irq_leave_critical+0x28>)
    2118:	781b      	ldrb	r3, [r3, #0]
    211a:	2b00      	cmp	r3, #0
    211c:	d005      	beq.n	212a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    211e:	2201      	movs	r2, #1
    2120:	4b04      	ldr	r3, [pc, #16]	; (2134 <cpu_irq_leave_critical+0x2c>)
    2122:	701a      	strb	r2, [r3, #0]
    2124:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2128:	b662      	cpsie	i
	}
}
    212a:	4770      	bx	lr
    212c:	20000128 	.word	0x20000128
    2130:	2000012c 	.word	0x2000012c
    2134:	20000010 	.word	0x20000010

00002138 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2138:	b510      	push	{r4, lr}
	switch (clock_source) {
    213a:	2808      	cmp	r0, #8
    213c:	d803      	bhi.n	2146 <system_clock_source_get_hz+0xe>
    213e:	0080      	lsls	r0, r0, #2
    2140:	4b1b      	ldr	r3, [pc, #108]	; (21b0 <system_clock_source_get_hz+0x78>)
    2142:	581b      	ldr	r3, [r3, r0]
    2144:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2146:	2000      	movs	r0, #0
    2148:	e030      	b.n	21ac <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    214a:	4b1a      	ldr	r3, [pc, #104]	; (21b4 <system_clock_source_get_hz+0x7c>)
    214c:	6918      	ldr	r0, [r3, #16]
    214e:	e02d      	b.n	21ac <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2150:	4b19      	ldr	r3, [pc, #100]	; (21b8 <system_clock_source_get_hz+0x80>)
    2152:	6a1b      	ldr	r3, [r3, #32]
    2154:	059b      	lsls	r3, r3, #22
    2156:	0f9b      	lsrs	r3, r3, #30
    2158:	4818      	ldr	r0, [pc, #96]	; (21bc <system_clock_source_get_hz+0x84>)
    215a:	40d8      	lsrs	r0, r3
    215c:	e026      	b.n	21ac <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    215e:	4b15      	ldr	r3, [pc, #84]	; (21b4 <system_clock_source_get_hz+0x7c>)
    2160:	6958      	ldr	r0, [r3, #20]
    2162:	e023      	b.n	21ac <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2164:	4b13      	ldr	r3, [pc, #76]	; (21b4 <system_clock_source_get_hz+0x7c>)
    2166:	681b      	ldr	r3, [r3, #0]
			return 0;
    2168:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    216a:	079b      	lsls	r3, r3, #30
    216c:	d51e      	bpl.n	21ac <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    216e:	4912      	ldr	r1, [pc, #72]	; (21b8 <system_clock_source_get_hz+0x80>)
    2170:	2210      	movs	r2, #16
    2172:	68cb      	ldr	r3, [r1, #12]
    2174:	421a      	tst	r2, r3
    2176:	d0fc      	beq.n	2172 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2178:	4b0e      	ldr	r3, [pc, #56]	; (21b4 <system_clock_source_get_hz+0x7c>)
    217a:	681b      	ldr	r3, [r3, #0]
    217c:	075b      	lsls	r3, r3, #29
    217e:	d401      	bmi.n	2184 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2180:	480f      	ldr	r0, [pc, #60]	; (21c0 <system_clock_source_get_hz+0x88>)
    2182:	e013      	b.n	21ac <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2184:	2000      	movs	r0, #0
    2186:	4b0f      	ldr	r3, [pc, #60]	; (21c4 <system_clock_source_get_hz+0x8c>)
    2188:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    218a:	4b0a      	ldr	r3, [pc, #40]	; (21b4 <system_clock_source_get_hz+0x7c>)
    218c:	689b      	ldr	r3, [r3, #8]
    218e:	041b      	lsls	r3, r3, #16
    2190:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2192:	4358      	muls	r0, r3
    2194:	e00a      	b.n	21ac <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2196:	2350      	movs	r3, #80	; 0x50
    2198:	4a07      	ldr	r2, [pc, #28]	; (21b8 <system_clock_source_get_hz+0x80>)
    219a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    219c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    219e:	075b      	lsls	r3, r3, #29
    21a0:	d504      	bpl.n	21ac <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    21a2:	4b04      	ldr	r3, [pc, #16]	; (21b4 <system_clock_source_get_hz+0x7c>)
    21a4:	68d8      	ldr	r0, [r3, #12]
    21a6:	e001      	b.n	21ac <system_clock_source_get_hz+0x74>
		return 32768UL;
    21a8:	2080      	movs	r0, #128	; 0x80
    21aa:	0200      	lsls	r0, r0, #8
	}
}
    21ac:	bd10      	pop	{r4, pc}
    21ae:	46c0      	nop			; (mov r8, r8)
    21b0:	00002da0 	.word	0x00002da0
    21b4:	20000130 	.word	0x20000130
    21b8:	40000800 	.word	0x40000800
    21bc:	007a1200 	.word	0x007a1200
    21c0:	02dc6c00 	.word	0x02dc6c00
    21c4:	00002779 	.word	0x00002779

000021c8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    21c8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    21ca:	490c      	ldr	r1, [pc, #48]	; (21fc <system_clock_source_osc8m_set_config+0x34>)
    21cc:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    21ce:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    21d0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    21d2:	7840      	ldrb	r0, [r0, #1]
    21d4:	2201      	movs	r2, #1
    21d6:	4010      	ands	r0, r2
    21d8:	0180      	lsls	r0, r0, #6
    21da:	2640      	movs	r6, #64	; 0x40
    21dc:	43b3      	bics	r3, r6
    21de:	4303      	orrs	r3, r0
    21e0:	402a      	ands	r2, r5
    21e2:	01d2      	lsls	r2, r2, #7
    21e4:	2080      	movs	r0, #128	; 0x80
    21e6:	4383      	bics	r3, r0
    21e8:	4313      	orrs	r3, r2
    21ea:	2203      	movs	r2, #3
    21ec:	4022      	ands	r2, r4
    21ee:	0212      	lsls	r2, r2, #8
    21f0:	4803      	ldr	r0, [pc, #12]	; (2200 <system_clock_source_osc8m_set_config+0x38>)
    21f2:	4003      	ands	r3, r0
    21f4:	4313      	orrs	r3, r2
    21f6:	620b      	str	r3, [r1, #32]
}
    21f8:	bd70      	pop	{r4, r5, r6, pc}
    21fa:	46c0      	nop			; (mov r8, r8)
    21fc:	40000800 	.word	0x40000800
    2200:	fffffcff 	.word	0xfffffcff

00002204 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    2204:	b5f0      	push	{r4, r5, r6, r7, lr}
    2206:	46ce      	mov	lr, r9
    2208:	4647      	mov	r7, r8
    220a:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    220c:	4b19      	ldr	r3, [pc, #100]	; (2274 <system_clock_source_osc32k_set_config+0x70>)
    220e:	4699      	mov	r9, r3
    2210:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    2212:	7841      	ldrb	r1, [r0, #1]
    2214:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    2216:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2218:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    221a:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    221c:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    221e:	7880      	ldrb	r0, [r0, #2]
    2220:	2101      	movs	r1, #1
    2222:	4008      	ands	r0, r1
    2224:	0080      	lsls	r0, r0, #2
    2226:	2204      	movs	r2, #4
    2228:	4393      	bics	r3, r2
    222a:	4303      	orrs	r3, r0
    222c:	4660      	mov	r0, ip
    222e:	4008      	ands	r0, r1
    2230:	00c0      	lsls	r0, r0, #3
    2232:	3204      	adds	r2, #4
    2234:	4393      	bics	r3, r2
    2236:	4303      	orrs	r3, r0
    2238:	0038      	movs	r0, r7
    223a:	4008      	ands	r0, r1
    223c:	0180      	lsls	r0, r0, #6
    223e:	2740      	movs	r7, #64	; 0x40
    2240:	43bb      	bics	r3, r7
    2242:	4303      	orrs	r3, r0
    2244:	0030      	movs	r0, r6
    2246:	4008      	ands	r0, r1
    2248:	01c0      	lsls	r0, r0, #7
    224a:	2680      	movs	r6, #128	; 0x80
    224c:	43b3      	bics	r3, r6
    224e:	4303      	orrs	r3, r0
    2250:	2007      	movs	r0, #7
    2252:	4005      	ands	r5, r0
    2254:	022d      	lsls	r5, r5, #8
    2256:	4808      	ldr	r0, [pc, #32]	; (2278 <system_clock_source_osc32k_set_config+0x74>)
    2258:	4003      	ands	r3, r0
    225a:	432b      	orrs	r3, r5
    225c:	4021      	ands	r1, r4
    225e:	0309      	lsls	r1, r1, #12
    2260:	4806      	ldr	r0, [pc, #24]	; (227c <system_clock_source_osc32k_set_config+0x78>)
    2262:	4003      	ands	r3, r0
    2264:	430b      	orrs	r3, r1
    2266:	464a      	mov	r2, r9
    2268:	6193      	str	r3, [r2, #24]
}
    226a:	bc0c      	pop	{r2, r3}
    226c:	4690      	mov	r8, r2
    226e:	4699      	mov	r9, r3
    2270:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2272:	46c0      	nop			; (mov r8, r8)
    2274:	40000800 	.word	0x40000800
    2278:	fffff8ff 	.word	0xfffff8ff
    227c:	ffffefff 	.word	0xffffefff

00002280 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2280:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2282:	7a03      	ldrb	r3, [r0, #8]
    2284:	069b      	lsls	r3, r3, #26
    2286:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2288:	8942      	ldrh	r2, [r0, #10]
    228a:	0592      	lsls	r2, r2, #22
    228c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    228e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2290:	4918      	ldr	r1, [pc, #96]	; (22f4 <system_clock_source_dfll_set_config+0x74>)
    2292:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2294:	7983      	ldrb	r3, [r0, #6]
    2296:	79c2      	ldrb	r2, [r0, #7]
    2298:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    229a:	8842      	ldrh	r2, [r0, #2]
    229c:	8884      	ldrh	r4, [r0, #4]
    229e:	4322      	orrs	r2, r4
    22a0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    22a2:	7842      	ldrb	r2, [r0, #1]
    22a4:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    22a6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    22a8:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    22aa:	7803      	ldrb	r3, [r0, #0]
    22ac:	2b04      	cmp	r3, #4
    22ae:	d011      	beq.n	22d4 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    22b0:	2b20      	cmp	r3, #32
    22b2:	d10e      	bne.n	22d2 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    22b4:	7b03      	ldrb	r3, [r0, #12]
    22b6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    22b8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    22ba:	4313      	orrs	r3, r2
    22bc:	89c2      	ldrh	r2, [r0, #14]
    22be:	0412      	lsls	r2, r2, #16
    22c0:	490d      	ldr	r1, [pc, #52]	; (22f8 <system_clock_source_dfll_set_config+0x78>)
    22c2:	400a      	ands	r2, r1
    22c4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    22c6:	4a0b      	ldr	r2, [pc, #44]	; (22f4 <system_clock_source_dfll_set_config+0x74>)
    22c8:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    22ca:	6811      	ldr	r1, [r2, #0]
    22cc:	4b0b      	ldr	r3, [pc, #44]	; (22fc <system_clock_source_dfll_set_config+0x7c>)
    22ce:	430b      	orrs	r3, r1
    22d0:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    22d2:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    22d4:	7b03      	ldrb	r3, [r0, #12]
    22d6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    22d8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    22da:	4313      	orrs	r3, r2
    22dc:	89c2      	ldrh	r2, [r0, #14]
    22de:	0412      	lsls	r2, r2, #16
    22e0:	4905      	ldr	r1, [pc, #20]	; (22f8 <system_clock_source_dfll_set_config+0x78>)
    22e2:	400a      	ands	r2, r1
    22e4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    22e6:	4a03      	ldr	r2, [pc, #12]	; (22f4 <system_clock_source_dfll_set_config+0x74>)
    22e8:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    22ea:	6813      	ldr	r3, [r2, #0]
    22ec:	2104      	movs	r1, #4
    22ee:	430b      	orrs	r3, r1
    22f0:	6013      	str	r3, [r2, #0]
    22f2:	e7ee      	b.n	22d2 <system_clock_source_dfll_set_config+0x52>
    22f4:	20000130 	.word	0x20000130
    22f8:	03ff0000 	.word	0x03ff0000
    22fc:	00000424 	.word	0x00000424

00002300 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2300:	2808      	cmp	r0, #8
    2302:	d803      	bhi.n	230c <system_clock_source_enable+0xc>
    2304:	0080      	lsls	r0, r0, #2
    2306:	4b25      	ldr	r3, [pc, #148]	; (239c <system_clock_source_enable+0x9c>)
    2308:	581b      	ldr	r3, [r3, r0]
    230a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    230c:	2017      	movs	r0, #23
    230e:	e044      	b.n	239a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2310:	4a23      	ldr	r2, [pc, #140]	; (23a0 <system_clock_source_enable+0xa0>)
    2312:	6a13      	ldr	r3, [r2, #32]
    2314:	2102      	movs	r1, #2
    2316:	430b      	orrs	r3, r1
    2318:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    231a:	2000      	movs	r0, #0
    231c:	e03d      	b.n	239a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    231e:	4a20      	ldr	r2, [pc, #128]	; (23a0 <system_clock_source_enable+0xa0>)
    2320:	6993      	ldr	r3, [r2, #24]
    2322:	2102      	movs	r1, #2
    2324:	430b      	orrs	r3, r1
    2326:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2328:	2000      	movs	r0, #0
		break;
    232a:	e036      	b.n	239a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    232c:	4a1c      	ldr	r2, [pc, #112]	; (23a0 <system_clock_source_enable+0xa0>)
    232e:	8a13      	ldrh	r3, [r2, #16]
    2330:	2102      	movs	r1, #2
    2332:	430b      	orrs	r3, r1
    2334:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2336:	2000      	movs	r0, #0
		break;
    2338:	e02f      	b.n	239a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    233a:	4a19      	ldr	r2, [pc, #100]	; (23a0 <system_clock_source_enable+0xa0>)
    233c:	8a93      	ldrh	r3, [r2, #20]
    233e:	2102      	movs	r1, #2
    2340:	430b      	orrs	r3, r1
    2342:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2344:	2000      	movs	r0, #0
		break;
    2346:	e028      	b.n	239a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2348:	4916      	ldr	r1, [pc, #88]	; (23a4 <system_clock_source_enable+0xa4>)
    234a:	680b      	ldr	r3, [r1, #0]
    234c:	2202      	movs	r2, #2
    234e:	4313      	orrs	r3, r2
    2350:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2352:	4b13      	ldr	r3, [pc, #76]	; (23a0 <system_clock_source_enable+0xa0>)
    2354:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2356:	0019      	movs	r1, r3
    2358:	320e      	adds	r2, #14
    235a:	68cb      	ldr	r3, [r1, #12]
    235c:	421a      	tst	r2, r3
    235e:	d0fc      	beq.n	235a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2360:	4a10      	ldr	r2, [pc, #64]	; (23a4 <system_clock_source_enable+0xa4>)
    2362:	6891      	ldr	r1, [r2, #8]
    2364:	4b0e      	ldr	r3, [pc, #56]	; (23a0 <system_clock_source_enable+0xa0>)
    2366:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2368:	6852      	ldr	r2, [r2, #4]
    236a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    236c:	2200      	movs	r2, #0
    236e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2370:	0019      	movs	r1, r3
    2372:	3210      	adds	r2, #16
    2374:	68cb      	ldr	r3, [r1, #12]
    2376:	421a      	tst	r2, r3
    2378:	d0fc      	beq.n	2374 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    237a:	4b0a      	ldr	r3, [pc, #40]	; (23a4 <system_clock_source_enable+0xa4>)
    237c:	681b      	ldr	r3, [r3, #0]
    237e:	b29b      	uxth	r3, r3
    2380:	4a07      	ldr	r2, [pc, #28]	; (23a0 <system_clock_source_enable+0xa0>)
    2382:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2384:	2000      	movs	r0, #0
    2386:	e008      	b.n	239a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2388:	4905      	ldr	r1, [pc, #20]	; (23a0 <system_clock_source_enable+0xa0>)
    238a:	2244      	movs	r2, #68	; 0x44
    238c:	5c8b      	ldrb	r3, [r1, r2]
    238e:	2002      	movs	r0, #2
    2390:	4303      	orrs	r3, r0
    2392:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2394:	2000      	movs	r0, #0
		break;
    2396:	e000      	b.n	239a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2398:	2000      	movs	r0, #0
}
    239a:	4770      	bx	lr
    239c:	00002dc4 	.word	0x00002dc4
    23a0:	40000800 	.word	0x40000800
    23a4:	20000130 	.word	0x20000130

000023a8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    23a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23aa:	46ce      	mov	lr, r9
    23ac:	4647      	mov	r7, r8
    23ae:	b580      	push	{r7, lr}
    23b0:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    23b2:	22c2      	movs	r2, #194	; 0xc2
    23b4:	00d2      	lsls	r2, r2, #3
    23b6:	4b4d      	ldr	r3, [pc, #308]	; (24ec <system_clock_init+0x144>)
    23b8:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    23ba:	494d      	ldr	r1, [pc, #308]	; (24f0 <system_clock_init+0x148>)
    23bc:	684b      	ldr	r3, [r1, #4]
    23be:	221e      	movs	r2, #30
    23c0:	4393      	bics	r3, r2
    23c2:	3a1c      	subs	r2, #28
    23c4:	4313      	orrs	r3, r2
    23c6:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    23c8:	ab01      	add	r3, sp, #4
    23ca:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    23cc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    23ce:	4d49      	ldr	r5, [pc, #292]	; (24f4 <system_clock_init+0x14c>)
    23d0:	b2e0      	uxtb	r0, r4
    23d2:	a901      	add	r1, sp, #4
    23d4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    23d6:	3401      	adds	r4, #1
    23d8:	2c18      	cmp	r4, #24
    23da:	d1f9      	bne.n	23d0 <system_clock_init+0x28>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
    23dc:	4c46      	ldr	r4, [pc, #280]	; (24f8 <system_clock_init+0x150>)
	SYSCTRL->OSC32K.bit.CALIB =
    23de:	6823      	ldr	r3, [r4, #0]
    23e0:	04db      	lsls	r3, r3, #19
    23e2:	4942      	ldr	r1, [pc, #264]	; (24ec <system_clock_init+0x144>)
    23e4:	698a      	ldr	r2, [r1, #24]
    23e6:	0e5b      	lsrs	r3, r3, #25
    23e8:	041b      	lsls	r3, r3, #16
    23ea:	4844      	ldr	r0, [pc, #272]	; (24fc <system_clock_init+0x154>)
    23ec:	4002      	ands	r2, r0
    23ee:	4313      	orrs	r3, r2
    23f0:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    23f2:	a80a      	add	r0, sp, #40	; 0x28
    23f4:	2301      	movs	r3, #1
    23f6:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    23f8:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    23fa:	2500      	movs	r5, #0
    23fc:	70c5      	strb	r5, [r0, #3]
	config->on_demand           = true;
    23fe:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    2400:	3306      	adds	r3, #6
    2402:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    2404:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    2406:	4b3e      	ldr	r3, [pc, #248]	; (2500 <system_clock_init+0x158>)
    2408:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    240a:	2004      	movs	r0, #4
    240c:	4b3d      	ldr	r3, [pc, #244]	; (2504 <system_clock_init+0x15c>)
    240e:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2410:	ab05      	add	r3, sp, #20
    2412:	2200      	movs	r2, #0
    2414:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2416:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2418:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    241a:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    241c:	213f      	movs	r1, #63	; 0x3f
    241e:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2420:	393b      	subs	r1, #59	; 0x3b
    2422:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2424:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2426:	6823      	ldr	r3, [r4, #0]
    2428:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    242a:	2b3f      	cmp	r3, #63	; 0x3f
    242c:	d05b      	beq.n	24e6 <system_clock_init+0x13e>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    242e:	a805      	add	r0, sp, #20
    2430:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2432:	23b7      	movs	r3, #183	; 0xb7
    2434:	00db      	lsls	r3, r3, #3
    2436:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2438:	2307      	movs	r3, #7
    243a:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    243c:	3338      	adds	r3, #56	; 0x38
    243e:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2440:	4b31      	ldr	r3, [pc, #196]	; (2508 <system_clock_init+0x160>)
    2442:	4798      	blx	r3
	config->run_in_standby  = false;
    2444:	a804      	add	r0, sp, #16
    2446:	2500      	movs	r5, #0
    2448:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    244a:	2601      	movs	r6, #1
    244c:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    244e:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2450:	4b2e      	ldr	r3, [pc, #184]	; (250c <system_clock_init+0x164>)
    2452:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2454:	2006      	movs	r0, #6
    2456:	4f2b      	ldr	r7, [pc, #172]	; (2504 <system_clock_init+0x15c>)
    2458:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    245a:	4b2d      	ldr	r3, [pc, #180]	; (2510 <system_clock_init+0x168>)
    245c:	4798      	blx	r3
	config->division_factor    = 1;
    245e:	ac01      	add	r4, sp, #4
    2460:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2462:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    2464:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2466:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2468:	2304      	movs	r3, #4
    246a:	7023      	strb	r3, [r4, #0]
    246c:	0021      	movs	r1, r4
    246e:	2001      	movs	r0, #1
    2470:	4b28      	ldr	r3, [pc, #160]	; (2514 <system_clock_init+0x16c>)
    2472:	4699      	mov	r9, r3
    2474:	4798      	blx	r3
    2476:	2001      	movs	r0, #1
    2478:	4b27      	ldr	r3, [pc, #156]	; (2518 <system_clock_init+0x170>)
    247a:	4698      	mov	r8, r3
    247c:	4798      	blx	r3
	config->division_factor    = 1;
    247e:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    2480:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2482:	2306      	movs	r3, #6
    2484:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    2486:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2488:	7265      	strb	r5, [r4, #9]
    248a:	0021      	movs	r1, r4
    248c:	2003      	movs	r0, #3
    248e:	47c8      	blx	r9
    2490:	2003      	movs	r0, #3
    2492:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2494:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2496:	0021      	movs	r1, r4
    2498:	2000      	movs	r0, #0
    249a:	4b16      	ldr	r3, [pc, #88]	; (24f4 <system_clock_init+0x14c>)
    249c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    249e:	2000      	movs	r0, #0
    24a0:	4b1e      	ldr	r3, [pc, #120]	; (251c <system_clock_init+0x174>)
    24a2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    24a4:	2007      	movs	r0, #7
    24a6:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    24a8:	4910      	ldr	r1, [pc, #64]	; (24ec <system_clock_init+0x144>)
    24aa:	22d0      	movs	r2, #208	; 0xd0
    24ac:	68cb      	ldr	r3, [r1, #12]
    24ae:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    24b0:	2bd0      	cmp	r3, #208	; 0xd0
    24b2:	d1fb      	bne.n	24ac <system_clock_init+0x104>
	PM->CPUSEL.reg = (uint32_t)divider;
    24b4:	4a1a      	ldr	r2, [pc, #104]	; (2520 <system_clock_init+0x178>)
    24b6:	2300      	movs	r3, #0
    24b8:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    24ba:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    24bc:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    24be:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    24c0:	a901      	add	r1, sp, #4
    24c2:	2201      	movs	r2, #1
    24c4:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    24c6:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    24c8:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    24ca:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    24cc:	3307      	adds	r3, #7
    24ce:	700b      	strb	r3, [r1, #0]
    24d0:	2000      	movs	r0, #0
    24d2:	4b10      	ldr	r3, [pc, #64]	; (2514 <system_clock_init+0x16c>)
    24d4:	4798      	blx	r3
    24d6:	2000      	movs	r0, #0
    24d8:	4b0f      	ldr	r3, [pc, #60]	; (2518 <system_clock_init+0x170>)
    24da:	4798      	blx	r3
#endif
}
    24dc:	b00d      	add	sp, #52	; 0x34
    24de:	bc0c      	pop	{r2, r3}
    24e0:	4690      	mov	r8, r2
    24e2:	4699      	mov	r9, r3
    24e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    24e6:	3b20      	subs	r3, #32
    24e8:	e7a1      	b.n	242e <system_clock_init+0x86>
    24ea:	46c0      	nop			; (mov r8, r8)
    24ec:	40000800 	.word	0x40000800
    24f0:	41004000 	.word	0x41004000
    24f4:	0000275d 	.word	0x0000275d
    24f8:	00806024 	.word	0x00806024
    24fc:	ff80ffff 	.word	0xff80ffff
    2500:	00002205 	.word	0x00002205
    2504:	00002301 	.word	0x00002301
    2508:	00002281 	.word	0x00002281
    250c:	000021c9 	.word	0x000021c9
    2510:	00002525 	.word	0x00002525
    2514:	00002549 	.word	0x00002549
    2518:	00002601 	.word	0x00002601
    251c:	000026d1 	.word	0x000026d1
    2520:	40000400 	.word	0x40000400

00002524 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2524:	4a06      	ldr	r2, [pc, #24]	; (2540 <system_gclk_init+0x1c>)
    2526:	6993      	ldr	r3, [r2, #24]
    2528:	2108      	movs	r1, #8
    252a:	430b      	orrs	r3, r1
    252c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    252e:	2201      	movs	r2, #1
    2530:	4b04      	ldr	r3, [pc, #16]	; (2544 <system_gclk_init+0x20>)
    2532:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2534:	0019      	movs	r1, r3
    2536:	780b      	ldrb	r3, [r1, #0]
    2538:	4213      	tst	r3, r2
    253a:	d1fc      	bne.n	2536 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    253c:	4770      	bx	lr
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	40000400 	.word	0x40000400
    2544:	40000c00 	.word	0x40000c00

00002548 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2548:	b570      	push	{r4, r5, r6, lr}
    254a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    254c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    254e:	780d      	ldrb	r5, [r1, #0]
    2550:	022d      	lsls	r5, r5, #8
    2552:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2554:	784b      	ldrb	r3, [r1, #1]
    2556:	2b00      	cmp	r3, #0
    2558:	d002      	beq.n	2560 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    255a:	2380      	movs	r3, #128	; 0x80
    255c:	02db      	lsls	r3, r3, #11
    255e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2560:	7a4b      	ldrb	r3, [r1, #9]
    2562:	2b00      	cmp	r3, #0
    2564:	d002      	beq.n	256c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2566:	2380      	movs	r3, #128	; 0x80
    2568:	031b      	lsls	r3, r3, #12
    256a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    256c:	6848      	ldr	r0, [r1, #4]
    256e:	2801      	cmp	r0, #1
    2570:	d910      	bls.n	2594 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2572:	1e43      	subs	r3, r0, #1
    2574:	4218      	tst	r0, r3
    2576:	d134      	bne.n	25e2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2578:	2802      	cmp	r0, #2
    257a:	d930      	bls.n	25de <system_gclk_gen_set_config+0x96>
    257c:	2302      	movs	r3, #2
    257e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2580:	3201      	adds	r2, #1
						mask <<= 1) {
    2582:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2584:	4298      	cmp	r0, r3
    2586:	d8fb      	bhi.n	2580 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2588:	0212      	lsls	r2, r2, #8
    258a:	4332      	orrs	r2, r6
    258c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    258e:	2380      	movs	r3, #128	; 0x80
    2590:	035b      	lsls	r3, r3, #13
    2592:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2594:	7a0b      	ldrb	r3, [r1, #8]
    2596:	2b00      	cmp	r3, #0
    2598:	d002      	beq.n	25a0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    259a:	2380      	movs	r3, #128	; 0x80
    259c:	039b      	lsls	r3, r3, #14
    259e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25a0:	4a13      	ldr	r2, [pc, #76]	; (25f0 <system_gclk_gen_set_config+0xa8>)
    25a2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    25a4:	b25b      	sxtb	r3, r3
    25a6:	2b00      	cmp	r3, #0
    25a8:	dbfb      	blt.n	25a2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    25aa:	4b12      	ldr	r3, [pc, #72]	; (25f4 <system_gclk_gen_set_config+0xac>)
    25ac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    25ae:	4b12      	ldr	r3, [pc, #72]	; (25f8 <system_gclk_gen_set_config+0xb0>)
    25b0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25b2:	4a0f      	ldr	r2, [pc, #60]	; (25f0 <system_gclk_gen_set_config+0xa8>)
    25b4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    25b6:	b25b      	sxtb	r3, r3
    25b8:	2b00      	cmp	r3, #0
    25ba:	dbfb      	blt.n	25b4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    25bc:	4b0c      	ldr	r3, [pc, #48]	; (25f0 <system_gclk_gen_set_config+0xa8>)
    25be:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25c0:	001a      	movs	r2, r3
    25c2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    25c4:	b25b      	sxtb	r3, r3
    25c6:	2b00      	cmp	r3, #0
    25c8:	dbfb      	blt.n	25c2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    25ca:	4a09      	ldr	r2, [pc, #36]	; (25f0 <system_gclk_gen_set_config+0xa8>)
    25cc:	6853      	ldr	r3, [r2, #4]
    25ce:	2180      	movs	r1, #128	; 0x80
    25d0:	0249      	lsls	r1, r1, #9
    25d2:	400b      	ands	r3, r1
    25d4:	431d      	orrs	r5, r3
    25d6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    25d8:	4b08      	ldr	r3, [pc, #32]	; (25fc <system_gclk_gen_set_config+0xb4>)
    25da:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    25dc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    25de:	2200      	movs	r2, #0
    25e0:	e7d2      	b.n	2588 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    25e2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    25e4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    25e6:	2380      	movs	r3, #128	; 0x80
    25e8:	029b      	lsls	r3, r3, #10
    25ea:	431d      	orrs	r5, r3
    25ec:	e7d2      	b.n	2594 <system_gclk_gen_set_config+0x4c>
    25ee:	46c0      	nop			; (mov r8, r8)
    25f0:	40000c00 	.word	0x40000c00
    25f4:	000020c9 	.word	0x000020c9
    25f8:	40000c08 	.word	0x40000c08
    25fc:	00002109 	.word	0x00002109

00002600 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2600:	b510      	push	{r4, lr}
    2602:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2604:	4a0b      	ldr	r2, [pc, #44]	; (2634 <system_gclk_gen_enable+0x34>)
    2606:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2608:	b25b      	sxtb	r3, r3
    260a:	2b00      	cmp	r3, #0
    260c:	dbfb      	blt.n	2606 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    260e:	4b0a      	ldr	r3, [pc, #40]	; (2638 <system_gclk_gen_enable+0x38>)
    2610:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2612:	4b0a      	ldr	r3, [pc, #40]	; (263c <system_gclk_gen_enable+0x3c>)
    2614:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2616:	4a07      	ldr	r2, [pc, #28]	; (2634 <system_gclk_gen_enable+0x34>)
    2618:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    261a:	b25b      	sxtb	r3, r3
    261c:	2b00      	cmp	r3, #0
    261e:	dbfb      	blt.n	2618 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2620:	4a04      	ldr	r2, [pc, #16]	; (2634 <system_gclk_gen_enable+0x34>)
    2622:	6851      	ldr	r1, [r2, #4]
    2624:	2380      	movs	r3, #128	; 0x80
    2626:	025b      	lsls	r3, r3, #9
    2628:	430b      	orrs	r3, r1
    262a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    262c:	4b04      	ldr	r3, [pc, #16]	; (2640 <system_gclk_gen_enable+0x40>)
    262e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2630:	bd10      	pop	{r4, pc}
    2632:	46c0      	nop			; (mov r8, r8)
    2634:	40000c00 	.word	0x40000c00
    2638:	000020c9 	.word	0x000020c9
    263c:	40000c04 	.word	0x40000c04
    2640:	00002109 	.word	0x00002109

00002644 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2644:	b570      	push	{r4, r5, r6, lr}
    2646:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2648:	4a1a      	ldr	r2, [pc, #104]	; (26b4 <system_gclk_gen_get_hz+0x70>)
    264a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    264c:	b25b      	sxtb	r3, r3
    264e:	2b00      	cmp	r3, #0
    2650:	dbfb      	blt.n	264a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2652:	4b19      	ldr	r3, [pc, #100]	; (26b8 <system_gclk_gen_get_hz+0x74>)
    2654:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2656:	4b19      	ldr	r3, [pc, #100]	; (26bc <system_gclk_gen_get_hz+0x78>)
    2658:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    265a:	4a16      	ldr	r2, [pc, #88]	; (26b4 <system_gclk_gen_get_hz+0x70>)
    265c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    265e:	b25b      	sxtb	r3, r3
    2660:	2b00      	cmp	r3, #0
    2662:	dbfb      	blt.n	265c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2664:	4e13      	ldr	r6, [pc, #76]	; (26b4 <system_gclk_gen_get_hz+0x70>)
    2666:	6870      	ldr	r0, [r6, #4]
    2668:	04c0      	lsls	r0, r0, #19
    266a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    266c:	4b14      	ldr	r3, [pc, #80]	; (26c0 <system_gclk_gen_get_hz+0x7c>)
    266e:	4798      	blx	r3
    2670:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2672:	4b12      	ldr	r3, [pc, #72]	; (26bc <system_gclk_gen_get_hz+0x78>)
    2674:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2676:	6876      	ldr	r6, [r6, #4]
    2678:	02f6      	lsls	r6, r6, #11
    267a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    267c:	4b11      	ldr	r3, [pc, #68]	; (26c4 <system_gclk_gen_get_hz+0x80>)
    267e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2680:	4a0c      	ldr	r2, [pc, #48]	; (26b4 <system_gclk_gen_get_hz+0x70>)
    2682:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2684:	b25b      	sxtb	r3, r3
    2686:	2b00      	cmp	r3, #0
    2688:	dbfb      	blt.n	2682 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    268a:	4b0a      	ldr	r3, [pc, #40]	; (26b4 <system_gclk_gen_get_hz+0x70>)
    268c:	689c      	ldr	r4, [r3, #8]
    268e:	0224      	lsls	r4, r4, #8
    2690:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2692:	4b0d      	ldr	r3, [pc, #52]	; (26c8 <system_gclk_gen_get_hz+0x84>)
    2694:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2696:	2e00      	cmp	r6, #0
    2698:	d107      	bne.n	26aa <system_gclk_gen_get_hz+0x66>
    269a:	2c01      	cmp	r4, #1
    269c:	d907      	bls.n	26ae <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    269e:	0021      	movs	r1, r4
    26a0:	0028      	movs	r0, r5
    26a2:	4b0a      	ldr	r3, [pc, #40]	; (26cc <system_gclk_gen_get_hz+0x88>)
    26a4:	4798      	blx	r3
    26a6:	0005      	movs	r5, r0
    26a8:	e001      	b.n	26ae <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    26aa:	3401      	adds	r4, #1
    26ac:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    26ae:	0028      	movs	r0, r5
    26b0:	bd70      	pop	{r4, r5, r6, pc}
    26b2:	46c0      	nop			; (mov r8, r8)
    26b4:	40000c00 	.word	0x40000c00
    26b8:	000020c9 	.word	0x000020c9
    26bc:	40000c04 	.word	0x40000c04
    26c0:	00002139 	.word	0x00002139
    26c4:	40000c08 	.word	0x40000c08
    26c8:	00002109 	.word	0x00002109
    26cc:	00002a19 	.word	0x00002a19

000026d0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    26d0:	b510      	push	{r4, lr}
    26d2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    26d4:	4b06      	ldr	r3, [pc, #24]	; (26f0 <system_gclk_chan_enable+0x20>)
    26d6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    26d8:	4b06      	ldr	r3, [pc, #24]	; (26f4 <system_gclk_chan_enable+0x24>)
    26da:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    26dc:	4a06      	ldr	r2, [pc, #24]	; (26f8 <system_gclk_chan_enable+0x28>)
    26de:	8853      	ldrh	r3, [r2, #2]
    26e0:	2180      	movs	r1, #128	; 0x80
    26e2:	01c9      	lsls	r1, r1, #7
    26e4:	430b      	orrs	r3, r1
    26e6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    26e8:	4b04      	ldr	r3, [pc, #16]	; (26fc <system_gclk_chan_enable+0x2c>)
    26ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    26ec:	bd10      	pop	{r4, pc}
    26ee:	46c0      	nop			; (mov r8, r8)
    26f0:	000020c9 	.word	0x000020c9
    26f4:	40000c02 	.word	0x40000c02
    26f8:	40000c00 	.word	0x40000c00
    26fc:	00002109 	.word	0x00002109

00002700 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2700:	b510      	push	{r4, lr}
    2702:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2704:	4b0f      	ldr	r3, [pc, #60]	; (2744 <system_gclk_chan_disable+0x44>)
    2706:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2708:	4b0f      	ldr	r3, [pc, #60]	; (2748 <system_gclk_chan_disable+0x48>)
    270a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    270c:	4a0f      	ldr	r2, [pc, #60]	; (274c <system_gclk_chan_disable+0x4c>)
    270e:	8853      	ldrh	r3, [r2, #2]
    2710:	051b      	lsls	r3, r3, #20
    2712:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2714:	8853      	ldrh	r3, [r2, #2]
    2716:	490e      	ldr	r1, [pc, #56]	; (2750 <system_gclk_chan_disable+0x50>)
    2718:	400b      	ands	r3, r1
    271a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    271c:	8853      	ldrh	r3, [r2, #2]
    271e:	490d      	ldr	r1, [pc, #52]	; (2754 <system_gclk_chan_disable+0x54>)
    2720:	400b      	ands	r3, r1
    2722:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2724:	0011      	movs	r1, r2
    2726:	2280      	movs	r2, #128	; 0x80
    2728:	01d2      	lsls	r2, r2, #7
    272a:	884b      	ldrh	r3, [r1, #2]
    272c:	4213      	tst	r3, r2
    272e:	d1fc      	bne.n	272a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2730:	4906      	ldr	r1, [pc, #24]	; (274c <system_gclk_chan_disable+0x4c>)
    2732:	884a      	ldrh	r2, [r1, #2]
    2734:	0203      	lsls	r3, r0, #8
    2736:	4806      	ldr	r0, [pc, #24]	; (2750 <system_gclk_chan_disable+0x50>)
    2738:	4002      	ands	r2, r0
    273a:	4313      	orrs	r3, r2
    273c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    273e:	4b06      	ldr	r3, [pc, #24]	; (2758 <system_gclk_chan_disable+0x58>)
    2740:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2742:	bd10      	pop	{r4, pc}
    2744:	000020c9 	.word	0x000020c9
    2748:	40000c02 	.word	0x40000c02
    274c:	40000c00 	.word	0x40000c00
    2750:	fffff0ff 	.word	0xfffff0ff
    2754:	ffffbfff 	.word	0xffffbfff
    2758:	00002109 	.word	0x00002109

0000275c <system_gclk_chan_set_config>:
{
    275c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    275e:	780c      	ldrb	r4, [r1, #0]
    2760:	0224      	lsls	r4, r4, #8
    2762:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2764:	4b02      	ldr	r3, [pc, #8]	; (2770 <system_gclk_chan_set_config+0x14>)
    2766:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2768:	b2a4      	uxth	r4, r4
    276a:	4b02      	ldr	r3, [pc, #8]	; (2774 <system_gclk_chan_set_config+0x18>)
    276c:	805c      	strh	r4, [r3, #2]
}
    276e:	bd10      	pop	{r4, pc}
    2770:	00002701 	.word	0x00002701
    2774:	40000c00 	.word	0x40000c00

00002778 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2778:	b510      	push	{r4, lr}
    277a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    277c:	4b06      	ldr	r3, [pc, #24]	; (2798 <system_gclk_chan_get_hz+0x20>)
    277e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2780:	4b06      	ldr	r3, [pc, #24]	; (279c <system_gclk_chan_get_hz+0x24>)
    2782:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2784:	4b06      	ldr	r3, [pc, #24]	; (27a0 <system_gclk_chan_get_hz+0x28>)
    2786:	885c      	ldrh	r4, [r3, #2]
    2788:	0524      	lsls	r4, r4, #20
    278a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    278c:	4b05      	ldr	r3, [pc, #20]	; (27a4 <system_gclk_chan_get_hz+0x2c>)
    278e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2790:	0020      	movs	r0, r4
    2792:	4b05      	ldr	r3, [pc, #20]	; (27a8 <system_gclk_chan_get_hz+0x30>)
    2794:	4798      	blx	r3
}
    2796:	bd10      	pop	{r4, pc}
    2798:	000020c9 	.word	0x000020c9
    279c:	40000c02 	.word	0x40000c02
    27a0:	40000c00 	.word	0x40000c00
    27a4:	00002109 	.word	0x00002109
    27a8:	00002645 	.word	0x00002645

000027ac <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    27ac:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    27ae:	78d3      	ldrb	r3, [r2, #3]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d135      	bne.n	2820 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    27b4:	7813      	ldrb	r3, [r2, #0]
    27b6:	2b80      	cmp	r3, #128	; 0x80
    27b8:	d029      	beq.n	280e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    27ba:	061b      	lsls	r3, r3, #24
    27bc:	2480      	movs	r4, #128	; 0x80
    27be:	0264      	lsls	r4, r4, #9
    27c0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    27c2:	7854      	ldrb	r4, [r2, #1]
    27c4:	2502      	movs	r5, #2
    27c6:	43ac      	bics	r4, r5
    27c8:	d106      	bne.n	27d8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    27ca:	7894      	ldrb	r4, [r2, #2]
    27cc:	2c00      	cmp	r4, #0
    27ce:	d120      	bne.n	2812 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    27d0:	2480      	movs	r4, #128	; 0x80
    27d2:	02a4      	lsls	r4, r4, #10
    27d4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    27d6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    27d8:	7854      	ldrb	r4, [r2, #1]
    27da:	3c01      	subs	r4, #1
    27dc:	2c01      	cmp	r4, #1
    27de:	d91c      	bls.n	281a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    27e0:	040d      	lsls	r5, r1, #16
    27e2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    27e4:	24a0      	movs	r4, #160	; 0xa0
    27e6:	05e4      	lsls	r4, r4, #23
    27e8:	432c      	orrs	r4, r5
    27ea:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    27ec:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    27ee:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    27f0:	24d0      	movs	r4, #208	; 0xd0
    27f2:	0624      	lsls	r4, r4, #24
    27f4:	432c      	orrs	r4, r5
    27f6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    27f8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    27fa:	78d4      	ldrb	r4, [r2, #3]
    27fc:	2c00      	cmp	r4, #0
    27fe:	d122      	bne.n	2846 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2800:	035b      	lsls	r3, r3, #13
    2802:	d51c      	bpl.n	283e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2804:	7893      	ldrb	r3, [r2, #2]
    2806:	2b01      	cmp	r3, #1
    2808:	d01e      	beq.n	2848 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    280a:	6141      	str	r1, [r0, #20]
    280c:	e017      	b.n	283e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    280e:	2300      	movs	r3, #0
    2810:	e7d7      	b.n	27c2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2812:	24c0      	movs	r4, #192	; 0xc0
    2814:	02e4      	lsls	r4, r4, #11
    2816:	4323      	orrs	r3, r4
    2818:	e7dd      	b.n	27d6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    281a:	4c0d      	ldr	r4, [pc, #52]	; (2850 <_system_pinmux_config+0xa4>)
    281c:	4023      	ands	r3, r4
    281e:	e7df      	b.n	27e0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2820:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2822:	040c      	lsls	r4, r1, #16
    2824:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2826:	23a0      	movs	r3, #160	; 0xa0
    2828:	05db      	lsls	r3, r3, #23
    282a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    282c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    282e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2830:	23d0      	movs	r3, #208	; 0xd0
    2832:	061b      	lsls	r3, r3, #24
    2834:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2836:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2838:	78d3      	ldrb	r3, [r2, #3]
    283a:	2b00      	cmp	r3, #0
    283c:	d103      	bne.n	2846 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    283e:	7853      	ldrb	r3, [r2, #1]
    2840:	3b01      	subs	r3, #1
    2842:	2b01      	cmp	r3, #1
    2844:	d902      	bls.n	284c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2846:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2848:	6181      	str	r1, [r0, #24]
    284a:	e7f8      	b.n	283e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    284c:	6081      	str	r1, [r0, #8]
}
    284e:	e7fa      	b.n	2846 <_system_pinmux_config+0x9a>
    2850:	fffbffff 	.word	0xfffbffff

00002854 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2854:	b510      	push	{r4, lr}
    2856:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2858:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    285a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    285c:	2900      	cmp	r1, #0
    285e:	d104      	bne.n	286a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2860:	0943      	lsrs	r3, r0, #5
    2862:	01db      	lsls	r3, r3, #7
    2864:	4905      	ldr	r1, [pc, #20]	; (287c <system_pinmux_pin_set_config+0x28>)
    2866:	468c      	mov	ip, r1
    2868:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    286a:	241f      	movs	r4, #31
    286c:	4020      	ands	r0, r4
    286e:	2101      	movs	r1, #1
    2870:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2872:	0018      	movs	r0, r3
    2874:	4b02      	ldr	r3, [pc, #8]	; (2880 <system_pinmux_pin_set_config+0x2c>)
    2876:	4798      	blx	r3
}
    2878:	bd10      	pop	{r4, pc}
    287a:	46c0      	nop			; (mov r8, r8)
    287c:	41004400 	.word	0x41004400
    2880:	000027ad 	.word	0x000027ad

00002884 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2884:	4770      	bx	lr
	...

00002888 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2888:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    288a:	4b05      	ldr	r3, [pc, #20]	; (28a0 <system_init+0x18>)
    288c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    288e:	4b05      	ldr	r3, [pc, #20]	; (28a4 <system_init+0x1c>)
    2890:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2892:	4b05      	ldr	r3, [pc, #20]	; (28a8 <system_init+0x20>)
    2894:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2896:	4b05      	ldr	r3, [pc, #20]	; (28ac <system_init+0x24>)
    2898:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    289a:	4b05      	ldr	r3, [pc, #20]	; (28b0 <system_init+0x28>)
    289c:	4798      	blx	r3
}
    289e:	bd10      	pop	{r4, pc}
    28a0:	000023a9 	.word	0x000023a9
    28a4:	000020c5 	.word	0x000020c5
    28a8:	00002885 	.word	0x00002885
    28ac:	000004c1 	.word	0x000004c1
    28b0:	00002885 	.word	0x00002885

000028b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    28b4:	e7fe      	b.n	28b4 <Dummy_Handler>
	...

000028b8 <Reset_Handler>:
{
    28b8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    28ba:	4a26      	ldr	r2, [pc, #152]	; (2954 <Reset_Handler+0x9c>)
    28bc:	4b26      	ldr	r3, [pc, #152]	; (2958 <Reset_Handler+0xa0>)
    28be:	429a      	cmp	r2, r3
    28c0:	d011      	beq.n	28e6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    28c2:	001a      	movs	r2, r3
    28c4:	4b25      	ldr	r3, [pc, #148]	; (295c <Reset_Handler+0xa4>)
    28c6:	429a      	cmp	r2, r3
    28c8:	d20d      	bcs.n	28e6 <Reset_Handler+0x2e>
    28ca:	4a25      	ldr	r2, [pc, #148]	; (2960 <Reset_Handler+0xa8>)
    28cc:	3303      	adds	r3, #3
    28ce:	1a9b      	subs	r3, r3, r2
    28d0:	089b      	lsrs	r3, r3, #2
    28d2:	3301      	adds	r3, #1
    28d4:	009b      	lsls	r3, r3, #2
    28d6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    28d8:	481f      	ldr	r0, [pc, #124]	; (2958 <Reset_Handler+0xa0>)
    28da:	491e      	ldr	r1, [pc, #120]	; (2954 <Reset_Handler+0x9c>)
    28dc:	588c      	ldr	r4, [r1, r2]
    28de:	5084      	str	r4, [r0, r2]
    28e0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    28e2:	429a      	cmp	r2, r3
    28e4:	d1fa      	bne.n	28dc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    28e6:	4a1f      	ldr	r2, [pc, #124]	; (2964 <Reset_Handler+0xac>)
    28e8:	4b1f      	ldr	r3, [pc, #124]	; (2968 <Reset_Handler+0xb0>)
    28ea:	429a      	cmp	r2, r3
    28ec:	d20a      	bcs.n	2904 <Reset_Handler+0x4c>
    28ee:	43d3      	mvns	r3, r2
    28f0:	491d      	ldr	r1, [pc, #116]	; (2968 <Reset_Handler+0xb0>)
    28f2:	185b      	adds	r3, r3, r1
    28f4:	2103      	movs	r1, #3
    28f6:	438b      	bics	r3, r1
    28f8:	3304      	adds	r3, #4
    28fa:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    28fc:	2100      	movs	r1, #0
    28fe:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2900:	4293      	cmp	r3, r2
    2902:	d1fc      	bne.n	28fe <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2904:	4a19      	ldr	r2, [pc, #100]	; (296c <Reset_Handler+0xb4>)
    2906:	21ff      	movs	r1, #255	; 0xff
    2908:	4b19      	ldr	r3, [pc, #100]	; (2970 <Reset_Handler+0xb8>)
    290a:	438b      	bics	r3, r1
    290c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    290e:	39fd      	subs	r1, #253	; 0xfd
    2910:	2390      	movs	r3, #144	; 0x90
    2912:	005b      	lsls	r3, r3, #1
    2914:	4a17      	ldr	r2, [pc, #92]	; (2974 <Reset_Handler+0xbc>)
    2916:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2918:	4b17      	ldr	r3, [pc, #92]	; (2978 <Reset_Handler+0xc0>)
    291a:	7b9a      	ldrb	r2, [r3, #14]
    291c:	312e      	adds	r1, #46	; 0x2e
    291e:	438a      	bics	r2, r1
    2920:	2120      	movs	r1, #32
    2922:	430a      	orrs	r2, r1
    2924:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2926:	7b9a      	ldrb	r2, [r3, #14]
    2928:	210c      	movs	r1, #12
    292a:	438a      	bics	r2, r1
    292c:	2108      	movs	r1, #8
    292e:	430a      	orrs	r2, r1
    2930:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2932:	7b9a      	ldrb	r2, [r3, #14]
    2934:	2103      	movs	r1, #3
    2936:	438a      	bics	r2, r1
    2938:	2102      	movs	r1, #2
    293a:	430a      	orrs	r2, r1
    293c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    293e:	4a0f      	ldr	r2, [pc, #60]	; (297c <Reset_Handler+0xc4>)
    2940:	6853      	ldr	r3, [r2, #4]
    2942:	2180      	movs	r1, #128	; 0x80
    2944:	430b      	orrs	r3, r1
    2946:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2948:	4b0d      	ldr	r3, [pc, #52]	; (2980 <Reset_Handler+0xc8>)
    294a:	4798      	blx	r3
        main();
    294c:	4b0d      	ldr	r3, [pc, #52]	; (2984 <Reset_Handler+0xcc>)
    294e:	4798      	blx	r3
    2950:	e7fe      	b.n	2950 <Reset_Handler+0x98>
    2952:	46c0      	nop			; (mov r8, r8)
    2954:	00002e08 	.word	0x00002e08
    2958:	20000000 	.word	0x20000000
    295c:	20000014 	.word	0x20000014
    2960:	20000004 	.word	0x20000004
    2964:	20000020 	.word	0x20000020
    2968:	2000081c 	.word	0x2000081c
    296c:	e000ed00 	.word	0xe000ed00
    2970:	00000000 	.word	0x00000000
    2974:	41007000 	.word	0x41007000
    2978:	41004800 	.word	0x41004800
    297c:	41004000 	.word	0x41004000
    2980:	00002d05 	.word	0x00002d05
    2984:	000029a9 	.word	0x000029a9

00002988 <configureProfile>:
#define SPI_DATA_LENGTH 20


//SPI related  global variables
void configureProfile()
{
    2988:	b500      	push	{lr}
    298a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    298c:	a901      	add	r1, sp, #4
    298e:	2301      	movs	r3, #1
    2990:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    2992:	2200      	movs	r2, #0
    2994:	708a      	strb	r2, [r1, #2]
	struct port_config power_button_config;
	port_get_config_defaults(&power_button_config);
	power_button_config.direction  = PORT_PIN_DIR_OUTPUT;
    2996:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(PROFILE_PIN,&power_button_config);
    2998:	2002      	movs	r0, #2
    299a:	4b02      	ldr	r3, [pc, #8]	; (29a4 <configureProfile+0x1c>)
    299c:	4798      	blx	r3
	
}
    299e:	b003      	add	sp, #12
    29a0:	bd00      	pop	{pc}
    29a2:	46c0      	nop			; (mov r8, r8)
    29a4:	000020a1 	.word	0x000020a1

000029a8 <main>:

int main (void)
{
    29a8:	b570      	push	{r4, r5, r6, lr}
	
	system_init();
    29aa:	4b0e      	ldr	r3, [pc, #56]	; (29e4 <main+0x3c>)
    29ac:	4798      	blx	r3
	delay_init();
    29ae:	4b0e      	ldr	r3, [pc, #56]	; (29e8 <main+0x40>)
    29b0:	4798      	blx	r3
	status_led_init();
    29b2:	4b0e      	ldr	r3, [pc, #56]	; (29ec <main+0x44>)
    29b4:	4798      	blx	r3
	power_button_init();
    29b6:	4b0e      	ldr	r3, [pc, #56]	; (29f0 <main+0x48>)
    29b8:	4798      	blx	r3
	configure_motors();
    29ba:	4b0e      	ldr	r3, [pc, #56]	; (29f4 <main+0x4c>)
    29bc:	4798      	blx	r3
	encoders_init();
    29be:	4b0e      	ldr	r3, [pc, #56]	; (29f8 <main+0x50>)
    29c0:	4798      	blx	r3
	spi_slave_init();
    29c2:	4b0e      	ldr	r3, [pc, #56]	; (29fc <main+0x54>)
    29c4:	4798      	blx	r3
	configureUltrasound();
    29c6:	4b0e      	ldr	r3, [pc, #56]	; (2a00 <main+0x58>)
    29c8:	4798      	blx	r3
	configureProfile();
    29ca:	4b0e      	ldr	r3, [pc, #56]	; (2a04 <main+0x5c>)
    29cc:	4798      	blx	r3
	
	
	while(1)
	{
		//delay_cycles_ms(10000);
		check_power_off_button();
    29ce:	4e0e      	ldr	r6, [pc, #56]	; (2a08 <main+0x60>)
		readSensors();
    29d0:	4d0e      	ldr	r5, [pc, #56]	; (2a0c <main+0x64>)
		delay_cycles_ms(2);
    29d2:	4c0f      	ldr	r4, [pc, #60]	; (2a10 <main+0x68>)
		check_power_off_button();
    29d4:	47b0      	blx	r6
		readSensors();
    29d6:	47a8      	blx	r5
		delay_cycles_ms(2);
    29d8:	2002      	movs	r0, #2
    29da:	47a0      	blx	r4
		spi_main_loop();
    29dc:	4b0d      	ldr	r3, [pc, #52]	; (2a14 <main+0x6c>)
    29de:	4798      	blx	r3
    29e0:	e7f8      	b.n	29d4 <main+0x2c>
    29e2:	46c0      	nop			; (mov r8, r8)
    29e4:	00002889 	.word	0x00002889
    29e8:	00002009 	.word	0x00002009
    29ec:	00001115 	.word	0x00001115
    29f0:	00000dfd 	.word	0x00000dfd
    29f4:	00000d11 	.word	0x00000d11
    29f8:	00000b7d 	.word	0x00000b7d
    29fc:	00000f71 	.word	0x00000f71
    2a00:	0000048d 	.word	0x0000048d
    2a04:	00002989 	.word	0x00002989
    2a08:	00000da9 	.word	0x00000da9
    2a0c:	00000261 	.word	0x00000261
    2a10:	00002075 	.word	0x00002075
    2a14:	00001089 	.word	0x00001089

00002a18 <__udivsi3>:
    2a18:	2200      	movs	r2, #0
    2a1a:	0843      	lsrs	r3, r0, #1
    2a1c:	428b      	cmp	r3, r1
    2a1e:	d374      	bcc.n	2b0a <__udivsi3+0xf2>
    2a20:	0903      	lsrs	r3, r0, #4
    2a22:	428b      	cmp	r3, r1
    2a24:	d35f      	bcc.n	2ae6 <__udivsi3+0xce>
    2a26:	0a03      	lsrs	r3, r0, #8
    2a28:	428b      	cmp	r3, r1
    2a2a:	d344      	bcc.n	2ab6 <__udivsi3+0x9e>
    2a2c:	0b03      	lsrs	r3, r0, #12
    2a2e:	428b      	cmp	r3, r1
    2a30:	d328      	bcc.n	2a84 <__udivsi3+0x6c>
    2a32:	0c03      	lsrs	r3, r0, #16
    2a34:	428b      	cmp	r3, r1
    2a36:	d30d      	bcc.n	2a54 <__udivsi3+0x3c>
    2a38:	22ff      	movs	r2, #255	; 0xff
    2a3a:	0209      	lsls	r1, r1, #8
    2a3c:	ba12      	rev	r2, r2
    2a3e:	0c03      	lsrs	r3, r0, #16
    2a40:	428b      	cmp	r3, r1
    2a42:	d302      	bcc.n	2a4a <__udivsi3+0x32>
    2a44:	1212      	asrs	r2, r2, #8
    2a46:	0209      	lsls	r1, r1, #8
    2a48:	d065      	beq.n	2b16 <__udivsi3+0xfe>
    2a4a:	0b03      	lsrs	r3, r0, #12
    2a4c:	428b      	cmp	r3, r1
    2a4e:	d319      	bcc.n	2a84 <__udivsi3+0x6c>
    2a50:	e000      	b.n	2a54 <__udivsi3+0x3c>
    2a52:	0a09      	lsrs	r1, r1, #8
    2a54:	0bc3      	lsrs	r3, r0, #15
    2a56:	428b      	cmp	r3, r1
    2a58:	d301      	bcc.n	2a5e <__udivsi3+0x46>
    2a5a:	03cb      	lsls	r3, r1, #15
    2a5c:	1ac0      	subs	r0, r0, r3
    2a5e:	4152      	adcs	r2, r2
    2a60:	0b83      	lsrs	r3, r0, #14
    2a62:	428b      	cmp	r3, r1
    2a64:	d301      	bcc.n	2a6a <__udivsi3+0x52>
    2a66:	038b      	lsls	r3, r1, #14
    2a68:	1ac0      	subs	r0, r0, r3
    2a6a:	4152      	adcs	r2, r2
    2a6c:	0b43      	lsrs	r3, r0, #13
    2a6e:	428b      	cmp	r3, r1
    2a70:	d301      	bcc.n	2a76 <__udivsi3+0x5e>
    2a72:	034b      	lsls	r3, r1, #13
    2a74:	1ac0      	subs	r0, r0, r3
    2a76:	4152      	adcs	r2, r2
    2a78:	0b03      	lsrs	r3, r0, #12
    2a7a:	428b      	cmp	r3, r1
    2a7c:	d301      	bcc.n	2a82 <__udivsi3+0x6a>
    2a7e:	030b      	lsls	r3, r1, #12
    2a80:	1ac0      	subs	r0, r0, r3
    2a82:	4152      	adcs	r2, r2
    2a84:	0ac3      	lsrs	r3, r0, #11
    2a86:	428b      	cmp	r3, r1
    2a88:	d301      	bcc.n	2a8e <__udivsi3+0x76>
    2a8a:	02cb      	lsls	r3, r1, #11
    2a8c:	1ac0      	subs	r0, r0, r3
    2a8e:	4152      	adcs	r2, r2
    2a90:	0a83      	lsrs	r3, r0, #10
    2a92:	428b      	cmp	r3, r1
    2a94:	d301      	bcc.n	2a9a <__udivsi3+0x82>
    2a96:	028b      	lsls	r3, r1, #10
    2a98:	1ac0      	subs	r0, r0, r3
    2a9a:	4152      	adcs	r2, r2
    2a9c:	0a43      	lsrs	r3, r0, #9
    2a9e:	428b      	cmp	r3, r1
    2aa0:	d301      	bcc.n	2aa6 <__udivsi3+0x8e>
    2aa2:	024b      	lsls	r3, r1, #9
    2aa4:	1ac0      	subs	r0, r0, r3
    2aa6:	4152      	adcs	r2, r2
    2aa8:	0a03      	lsrs	r3, r0, #8
    2aaa:	428b      	cmp	r3, r1
    2aac:	d301      	bcc.n	2ab2 <__udivsi3+0x9a>
    2aae:	020b      	lsls	r3, r1, #8
    2ab0:	1ac0      	subs	r0, r0, r3
    2ab2:	4152      	adcs	r2, r2
    2ab4:	d2cd      	bcs.n	2a52 <__udivsi3+0x3a>
    2ab6:	09c3      	lsrs	r3, r0, #7
    2ab8:	428b      	cmp	r3, r1
    2aba:	d301      	bcc.n	2ac0 <__udivsi3+0xa8>
    2abc:	01cb      	lsls	r3, r1, #7
    2abe:	1ac0      	subs	r0, r0, r3
    2ac0:	4152      	adcs	r2, r2
    2ac2:	0983      	lsrs	r3, r0, #6
    2ac4:	428b      	cmp	r3, r1
    2ac6:	d301      	bcc.n	2acc <__udivsi3+0xb4>
    2ac8:	018b      	lsls	r3, r1, #6
    2aca:	1ac0      	subs	r0, r0, r3
    2acc:	4152      	adcs	r2, r2
    2ace:	0943      	lsrs	r3, r0, #5
    2ad0:	428b      	cmp	r3, r1
    2ad2:	d301      	bcc.n	2ad8 <__udivsi3+0xc0>
    2ad4:	014b      	lsls	r3, r1, #5
    2ad6:	1ac0      	subs	r0, r0, r3
    2ad8:	4152      	adcs	r2, r2
    2ada:	0903      	lsrs	r3, r0, #4
    2adc:	428b      	cmp	r3, r1
    2ade:	d301      	bcc.n	2ae4 <__udivsi3+0xcc>
    2ae0:	010b      	lsls	r3, r1, #4
    2ae2:	1ac0      	subs	r0, r0, r3
    2ae4:	4152      	adcs	r2, r2
    2ae6:	08c3      	lsrs	r3, r0, #3
    2ae8:	428b      	cmp	r3, r1
    2aea:	d301      	bcc.n	2af0 <__udivsi3+0xd8>
    2aec:	00cb      	lsls	r3, r1, #3
    2aee:	1ac0      	subs	r0, r0, r3
    2af0:	4152      	adcs	r2, r2
    2af2:	0883      	lsrs	r3, r0, #2
    2af4:	428b      	cmp	r3, r1
    2af6:	d301      	bcc.n	2afc <__udivsi3+0xe4>
    2af8:	008b      	lsls	r3, r1, #2
    2afa:	1ac0      	subs	r0, r0, r3
    2afc:	4152      	adcs	r2, r2
    2afe:	0843      	lsrs	r3, r0, #1
    2b00:	428b      	cmp	r3, r1
    2b02:	d301      	bcc.n	2b08 <__udivsi3+0xf0>
    2b04:	004b      	lsls	r3, r1, #1
    2b06:	1ac0      	subs	r0, r0, r3
    2b08:	4152      	adcs	r2, r2
    2b0a:	1a41      	subs	r1, r0, r1
    2b0c:	d200      	bcs.n	2b10 <__udivsi3+0xf8>
    2b0e:	4601      	mov	r1, r0
    2b10:	4152      	adcs	r2, r2
    2b12:	4610      	mov	r0, r2
    2b14:	4770      	bx	lr
    2b16:	e7ff      	b.n	2b18 <__udivsi3+0x100>
    2b18:	b501      	push	{r0, lr}
    2b1a:	2000      	movs	r0, #0
    2b1c:	f000 f8f0 	bl	2d00 <__aeabi_idiv0>
    2b20:	bd02      	pop	{r1, pc}
    2b22:	46c0      	nop			; (mov r8, r8)

00002b24 <__aeabi_uidivmod>:
    2b24:	2900      	cmp	r1, #0
    2b26:	d0f7      	beq.n	2b18 <__udivsi3+0x100>
    2b28:	e776      	b.n	2a18 <__udivsi3>
    2b2a:	4770      	bx	lr

00002b2c <__divsi3>:
    2b2c:	4603      	mov	r3, r0
    2b2e:	430b      	orrs	r3, r1
    2b30:	d47f      	bmi.n	2c32 <__divsi3+0x106>
    2b32:	2200      	movs	r2, #0
    2b34:	0843      	lsrs	r3, r0, #1
    2b36:	428b      	cmp	r3, r1
    2b38:	d374      	bcc.n	2c24 <__divsi3+0xf8>
    2b3a:	0903      	lsrs	r3, r0, #4
    2b3c:	428b      	cmp	r3, r1
    2b3e:	d35f      	bcc.n	2c00 <__divsi3+0xd4>
    2b40:	0a03      	lsrs	r3, r0, #8
    2b42:	428b      	cmp	r3, r1
    2b44:	d344      	bcc.n	2bd0 <__divsi3+0xa4>
    2b46:	0b03      	lsrs	r3, r0, #12
    2b48:	428b      	cmp	r3, r1
    2b4a:	d328      	bcc.n	2b9e <__divsi3+0x72>
    2b4c:	0c03      	lsrs	r3, r0, #16
    2b4e:	428b      	cmp	r3, r1
    2b50:	d30d      	bcc.n	2b6e <__divsi3+0x42>
    2b52:	22ff      	movs	r2, #255	; 0xff
    2b54:	0209      	lsls	r1, r1, #8
    2b56:	ba12      	rev	r2, r2
    2b58:	0c03      	lsrs	r3, r0, #16
    2b5a:	428b      	cmp	r3, r1
    2b5c:	d302      	bcc.n	2b64 <__divsi3+0x38>
    2b5e:	1212      	asrs	r2, r2, #8
    2b60:	0209      	lsls	r1, r1, #8
    2b62:	d065      	beq.n	2c30 <__divsi3+0x104>
    2b64:	0b03      	lsrs	r3, r0, #12
    2b66:	428b      	cmp	r3, r1
    2b68:	d319      	bcc.n	2b9e <__divsi3+0x72>
    2b6a:	e000      	b.n	2b6e <__divsi3+0x42>
    2b6c:	0a09      	lsrs	r1, r1, #8
    2b6e:	0bc3      	lsrs	r3, r0, #15
    2b70:	428b      	cmp	r3, r1
    2b72:	d301      	bcc.n	2b78 <__divsi3+0x4c>
    2b74:	03cb      	lsls	r3, r1, #15
    2b76:	1ac0      	subs	r0, r0, r3
    2b78:	4152      	adcs	r2, r2
    2b7a:	0b83      	lsrs	r3, r0, #14
    2b7c:	428b      	cmp	r3, r1
    2b7e:	d301      	bcc.n	2b84 <__divsi3+0x58>
    2b80:	038b      	lsls	r3, r1, #14
    2b82:	1ac0      	subs	r0, r0, r3
    2b84:	4152      	adcs	r2, r2
    2b86:	0b43      	lsrs	r3, r0, #13
    2b88:	428b      	cmp	r3, r1
    2b8a:	d301      	bcc.n	2b90 <__divsi3+0x64>
    2b8c:	034b      	lsls	r3, r1, #13
    2b8e:	1ac0      	subs	r0, r0, r3
    2b90:	4152      	adcs	r2, r2
    2b92:	0b03      	lsrs	r3, r0, #12
    2b94:	428b      	cmp	r3, r1
    2b96:	d301      	bcc.n	2b9c <__divsi3+0x70>
    2b98:	030b      	lsls	r3, r1, #12
    2b9a:	1ac0      	subs	r0, r0, r3
    2b9c:	4152      	adcs	r2, r2
    2b9e:	0ac3      	lsrs	r3, r0, #11
    2ba0:	428b      	cmp	r3, r1
    2ba2:	d301      	bcc.n	2ba8 <__divsi3+0x7c>
    2ba4:	02cb      	lsls	r3, r1, #11
    2ba6:	1ac0      	subs	r0, r0, r3
    2ba8:	4152      	adcs	r2, r2
    2baa:	0a83      	lsrs	r3, r0, #10
    2bac:	428b      	cmp	r3, r1
    2bae:	d301      	bcc.n	2bb4 <__divsi3+0x88>
    2bb0:	028b      	lsls	r3, r1, #10
    2bb2:	1ac0      	subs	r0, r0, r3
    2bb4:	4152      	adcs	r2, r2
    2bb6:	0a43      	lsrs	r3, r0, #9
    2bb8:	428b      	cmp	r3, r1
    2bba:	d301      	bcc.n	2bc0 <__divsi3+0x94>
    2bbc:	024b      	lsls	r3, r1, #9
    2bbe:	1ac0      	subs	r0, r0, r3
    2bc0:	4152      	adcs	r2, r2
    2bc2:	0a03      	lsrs	r3, r0, #8
    2bc4:	428b      	cmp	r3, r1
    2bc6:	d301      	bcc.n	2bcc <__divsi3+0xa0>
    2bc8:	020b      	lsls	r3, r1, #8
    2bca:	1ac0      	subs	r0, r0, r3
    2bcc:	4152      	adcs	r2, r2
    2bce:	d2cd      	bcs.n	2b6c <__divsi3+0x40>
    2bd0:	09c3      	lsrs	r3, r0, #7
    2bd2:	428b      	cmp	r3, r1
    2bd4:	d301      	bcc.n	2bda <__divsi3+0xae>
    2bd6:	01cb      	lsls	r3, r1, #7
    2bd8:	1ac0      	subs	r0, r0, r3
    2bda:	4152      	adcs	r2, r2
    2bdc:	0983      	lsrs	r3, r0, #6
    2bde:	428b      	cmp	r3, r1
    2be0:	d301      	bcc.n	2be6 <__divsi3+0xba>
    2be2:	018b      	lsls	r3, r1, #6
    2be4:	1ac0      	subs	r0, r0, r3
    2be6:	4152      	adcs	r2, r2
    2be8:	0943      	lsrs	r3, r0, #5
    2bea:	428b      	cmp	r3, r1
    2bec:	d301      	bcc.n	2bf2 <__divsi3+0xc6>
    2bee:	014b      	lsls	r3, r1, #5
    2bf0:	1ac0      	subs	r0, r0, r3
    2bf2:	4152      	adcs	r2, r2
    2bf4:	0903      	lsrs	r3, r0, #4
    2bf6:	428b      	cmp	r3, r1
    2bf8:	d301      	bcc.n	2bfe <__divsi3+0xd2>
    2bfa:	010b      	lsls	r3, r1, #4
    2bfc:	1ac0      	subs	r0, r0, r3
    2bfe:	4152      	adcs	r2, r2
    2c00:	08c3      	lsrs	r3, r0, #3
    2c02:	428b      	cmp	r3, r1
    2c04:	d301      	bcc.n	2c0a <__divsi3+0xde>
    2c06:	00cb      	lsls	r3, r1, #3
    2c08:	1ac0      	subs	r0, r0, r3
    2c0a:	4152      	adcs	r2, r2
    2c0c:	0883      	lsrs	r3, r0, #2
    2c0e:	428b      	cmp	r3, r1
    2c10:	d301      	bcc.n	2c16 <__divsi3+0xea>
    2c12:	008b      	lsls	r3, r1, #2
    2c14:	1ac0      	subs	r0, r0, r3
    2c16:	4152      	adcs	r2, r2
    2c18:	0843      	lsrs	r3, r0, #1
    2c1a:	428b      	cmp	r3, r1
    2c1c:	d301      	bcc.n	2c22 <__divsi3+0xf6>
    2c1e:	004b      	lsls	r3, r1, #1
    2c20:	1ac0      	subs	r0, r0, r3
    2c22:	4152      	adcs	r2, r2
    2c24:	1a41      	subs	r1, r0, r1
    2c26:	d200      	bcs.n	2c2a <__divsi3+0xfe>
    2c28:	4601      	mov	r1, r0
    2c2a:	4152      	adcs	r2, r2
    2c2c:	4610      	mov	r0, r2
    2c2e:	4770      	bx	lr
    2c30:	e05d      	b.n	2cee <__divsi3+0x1c2>
    2c32:	0fca      	lsrs	r2, r1, #31
    2c34:	d000      	beq.n	2c38 <__divsi3+0x10c>
    2c36:	4249      	negs	r1, r1
    2c38:	1003      	asrs	r3, r0, #32
    2c3a:	d300      	bcc.n	2c3e <__divsi3+0x112>
    2c3c:	4240      	negs	r0, r0
    2c3e:	4053      	eors	r3, r2
    2c40:	2200      	movs	r2, #0
    2c42:	469c      	mov	ip, r3
    2c44:	0903      	lsrs	r3, r0, #4
    2c46:	428b      	cmp	r3, r1
    2c48:	d32d      	bcc.n	2ca6 <__divsi3+0x17a>
    2c4a:	0a03      	lsrs	r3, r0, #8
    2c4c:	428b      	cmp	r3, r1
    2c4e:	d312      	bcc.n	2c76 <__divsi3+0x14a>
    2c50:	22fc      	movs	r2, #252	; 0xfc
    2c52:	0189      	lsls	r1, r1, #6
    2c54:	ba12      	rev	r2, r2
    2c56:	0a03      	lsrs	r3, r0, #8
    2c58:	428b      	cmp	r3, r1
    2c5a:	d30c      	bcc.n	2c76 <__divsi3+0x14a>
    2c5c:	0189      	lsls	r1, r1, #6
    2c5e:	1192      	asrs	r2, r2, #6
    2c60:	428b      	cmp	r3, r1
    2c62:	d308      	bcc.n	2c76 <__divsi3+0x14a>
    2c64:	0189      	lsls	r1, r1, #6
    2c66:	1192      	asrs	r2, r2, #6
    2c68:	428b      	cmp	r3, r1
    2c6a:	d304      	bcc.n	2c76 <__divsi3+0x14a>
    2c6c:	0189      	lsls	r1, r1, #6
    2c6e:	d03a      	beq.n	2ce6 <__divsi3+0x1ba>
    2c70:	1192      	asrs	r2, r2, #6
    2c72:	e000      	b.n	2c76 <__divsi3+0x14a>
    2c74:	0989      	lsrs	r1, r1, #6
    2c76:	09c3      	lsrs	r3, r0, #7
    2c78:	428b      	cmp	r3, r1
    2c7a:	d301      	bcc.n	2c80 <__divsi3+0x154>
    2c7c:	01cb      	lsls	r3, r1, #7
    2c7e:	1ac0      	subs	r0, r0, r3
    2c80:	4152      	adcs	r2, r2
    2c82:	0983      	lsrs	r3, r0, #6
    2c84:	428b      	cmp	r3, r1
    2c86:	d301      	bcc.n	2c8c <__divsi3+0x160>
    2c88:	018b      	lsls	r3, r1, #6
    2c8a:	1ac0      	subs	r0, r0, r3
    2c8c:	4152      	adcs	r2, r2
    2c8e:	0943      	lsrs	r3, r0, #5
    2c90:	428b      	cmp	r3, r1
    2c92:	d301      	bcc.n	2c98 <__divsi3+0x16c>
    2c94:	014b      	lsls	r3, r1, #5
    2c96:	1ac0      	subs	r0, r0, r3
    2c98:	4152      	adcs	r2, r2
    2c9a:	0903      	lsrs	r3, r0, #4
    2c9c:	428b      	cmp	r3, r1
    2c9e:	d301      	bcc.n	2ca4 <__divsi3+0x178>
    2ca0:	010b      	lsls	r3, r1, #4
    2ca2:	1ac0      	subs	r0, r0, r3
    2ca4:	4152      	adcs	r2, r2
    2ca6:	08c3      	lsrs	r3, r0, #3
    2ca8:	428b      	cmp	r3, r1
    2caa:	d301      	bcc.n	2cb0 <__divsi3+0x184>
    2cac:	00cb      	lsls	r3, r1, #3
    2cae:	1ac0      	subs	r0, r0, r3
    2cb0:	4152      	adcs	r2, r2
    2cb2:	0883      	lsrs	r3, r0, #2
    2cb4:	428b      	cmp	r3, r1
    2cb6:	d301      	bcc.n	2cbc <__divsi3+0x190>
    2cb8:	008b      	lsls	r3, r1, #2
    2cba:	1ac0      	subs	r0, r0, r3
    2cbc:	4152      	adcs	r2, r2
    2cbe:	d2d9      	bcs.n	2c74 <__divsi3+0x148>
    2cc0:	0843      	lsrs	r3, r0, #1
    2cc2:	428b      	cmp	r3, r1
    2cc4:	d301      	bcc.n	2cca <__divsi3+0x19e>
    2cc6:	004b      	lsls	r3, r1, #1
    2cc8:	1ac0      	subs	r0, r0, r3
    2cca:	4152      	adcs	r2, r2
    2ccc:	1a41      	subs	r1, r0, r1
    2cce:	d200      	bcs.n	2cd2 <__divsi3+0x1a6>
    2cd0:	4601      	mov	r1, r0
    2cd2:	4663      	mov	r3, ip
    2cd4:	4152      	adcs	r2, r2
    2cd6:	105b      	asrs	r3, r3, #1
    2cd8:	4610      	mov	r0, r2
    2cda:	d301      	bcc.n	2ce0 <__divsi3+0x1b4>
    2cdc:	4240      	negs	r0, r0
    2cde:	2b00      	cmp	r3, #0
    2ce0:	d500      	bpl.n	2ce4 <__divsi3+0x1b8>
    2ce2:	4249      	negs	r1, r1
    2ce4:	4770      	bx	lr
    2ce6:	4663      	mov	r3, ip
    2ce8:	105b      	asrs	r3, r3, #1
    2cea:	d300      	bcc.n	2cee <__divsi3+0x1c2>
    2cec:	4240      	negs	r0, r0
    2cee:	b501      	push	{r0, lr}
    2cf0:	2000      	movs	r0, #0
    2cf2:	f000 f805 	bl	2d00 <__aeabi_idiv0>
    2cf6:	bd02      	pop	{r1, pc}

00002cf8 <__aeabi_idivmod>:
    2cf8:	2900      	cmp	r1, #0
    2cfa:	d0f8      	beq.n	2cee <__divsi3+0x1c2>
    2cfc:	e716      	b.n	2b2c <__divsi3>
    2cfe:	4770      	bx	lr

00002d00 <__aeabi_idiv0>:
    2d00:	4770      	bx	lr
    2d02:	46c0      	nop			; (mov r8, r8)

00002d04 <__libc_init_array>:
    2d04:	b570      	push	{r4, r5, r6, lr}
    2d06:	2600      	movs	r6, #0
    2d08:	4d0c      	ldr	r5, [pc, #48]	; (2d3c <__libc_init_array+0x38>)
    2d0a:	4c0d      	ldr	r4, [pc, #52]	; (2d40 <__libc_init_array+0x3c>)
    2d0c:	1b64      	subs	r4, r4, r5
    2d0e:	10a4      	asrs	r4, r4, #2
    2d10:	42a6      	cmp	r6, r4
    2d12:	d109      	bne.n	2d28 <__libc_init_array+0x24>
    2d14:	2600      	movs	r6, #0
    2d16:	f000 f867 	bl	2de8 <_init>
    2d1a:	4d0a      	ldr	r5, [pc, #40]	; (2d44 <__libc_init_array+0x40>)
    2d1c:	4c0a      	ldr	r4, [pc, #40]	; (2d48 <__libc_init_array+0x44>)
    2d1e:	1b64      	subs	r4, r4, r5
    2d20:	10a4      	asrs	r4, r4, #2
    2d22:	42a6      	cmp	r6, r4
    2d24:	d105      	bne.n	2d32 <__libc_init_array+0x2e>
    2d26:	bd70      	pop	{r4, r5, r6, pc}
    2d28:	00b3      	lsls	r3, r6, #2
    2d2a:	58eb      	ldr	r3, [r5, r3]
    2d2c:	4798      	blx	r3
    2d2e:	3601      	adds	r6, #1
    2d30:	e7ee      	b.n	2d10 <__libc_init_array+0xc>
    2d32:	00b3      	lsls	r3, r6, #2
    2d34:	58eb      	ldr	r3, [r5, r3]
    2d36:	4798      	blx	r3
    2d38:	3601      	adds	r6, #1
    2d3a:	e7f2      	b.n	2d22 <__libc_init_array+0x1e>
    2d3c:	00002df4 	.word	0x00002df4
    2d40:	00002df4 	.word	0x00002df4
    2d44:	00002df4 	.word	0x00002df4
    2d48:	00002df8 	.word	0x00002df8

00002d4c <memset>:
    2d4c:	0003      	movs	r3, r0
    2d4e:	1882      	adds	r2, r0, r2
    2d50:	4293      	cmp	r3, r2
    2d52:	d100      	bne.n	2d56 <memset+0xa>
    2d54:	4770      	bx	lr
    2d56:	7019      	strb	r1, [r3, #0]
    2d58:	3301      	adds	r3, #1
    2d5a:	e7f9      	b.n	2d50 <memset+0x4>

00002d5c <tc_interrupt_vectors.12389>:
    2d5c:	0e0d 0000 0800 4200 0c00 4200 1000 4200     .......B...B...B

00002d6c <tc_interrupt_vectors.12389>:
    2d6c:	0e0d 0000                                   ....

00002d70 <_tcc_intflag>:
    2d70:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    2d80:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    2d90:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    2da0:	214a 0000 2146 0000 2146 0000 21a8 0000     J!..F!..F!...!..
    2db0:	21a8 0000 215e 0000 2150 0000 2164 0000     .!..^!..P!..d!..
    2dc0:	2196 0000 232c 0000 230c 0000 230c 0000     .!..,#...#...#..
    2dd0:	2398 0000 231e 0000 233a 0000 2310 0000     .#...#..:#...#..
    2de0:	2348 0000 2388 0000                         H#...#..

00002de8 <_init>:
    2de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dea:	46c0      	nop			; (mov r8, r8)
    2dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2dee:	bc08      	pop	{r3}
    2df0:	469e      	mov	lr, r3
    2df2:	4770      	bx	lr

00002df4 <__init_array_start>:
    2df4:	000000b5 	.word	0x000000b5

00002df8 <_fini>:
    2df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2dfe:	bc08      	pop	{r3}
    2e00:	469e      	mov	lr, r3
    2e02:	4770      	bx	lr

00002e04 <__fini_array_start>:
    2e04:	0000008d 	.word	0x0000008d
